[
  {
    "text": "AutoComplete",
    "name": "autocomplete",
    "api": "web/autocomplete",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/autocomplete"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/autocomplete"
    },
    "spriteCssClass": "autoCompleteIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "autocomplete/index",
        "title": {
          "aspnet-core": "Demo and source code for  Telerik $FRAMEWORK Autocomplete"
        },
        "meta": {
          "aspnet-core": "See how the Telerik $FRAMEWORK Autocomplete control works and view the demo source code."
        }
      },
      {
        "text": "Tag Helper",
        "url": "autocomplete/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK AutoComplete Tag Helper sample"
        }
      },
      {
        "text": "Server filtering",
        "url": "autocomplete/serverfiltering",
        "title": {
          "aspnet-core": "Server filtering in $FRAMEWORK Autocomplete control"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo of $FRAMEWORK Autocomplete control shows how autocomplete suggestions are given upon typing and the data is loaded from OData remote data source."
        }
      },
      {
        "text": "Virtualization",
        "url": "autocomplete/virtualization",
        "title": {
          "aspnet-core": "Virtualization in $FRAMEWORK Autocomplete control"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "OrderViewModel.cs",
              "url": "~/Models/OrderViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo of ASP.NET Core Autocomplete control shows how load large amount of data in the autocomplete widget"
        }
      },
      {
        "text": "Grouping",
        "url": "autocomplete/grouping",
        "title": {
          "aspnet-core": "Grouping in $FRAMEWORK Autocomplete control"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CustomerViewModel.cs",
              "url": "~/Models/CustomerViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo of ASP.NET Core Autocomplete control shows how load grouped data in the autocomplete widget"
        }
      },
      {
        "text": "Client filtering",
        "url": "autocomplete/clientfiltering",
        "packages": [ "!online", "!jsp", "!php" ],
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Customizing templates",
        "url": "autocomplete/template",
        "title": {
          "aspnet-core": "Templates customization in $FRAMEWORK AutoComplete"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CustomerViewModel.cs",
              "url": "~/Models/CustomerViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "With this $FRAMEWORK AutoComplete demo, you can learn how to customize the template of the control."
        }
      },
      {
        "text": "Custom data source",
        "url": "autocomplete/custom-datasource",
        "packages": [ "!online", "!jsp", "!php" ]
      },
      {
        "text": "Events",
        "url": "autocomplete/events",
        "title": {
          "aspnet-core": "Events in Core AutoComplete component | UI for $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "Take a look at this $FRAMEWORK AutoComplete example to find out how events are triggered in the AutoComplete control."
        }
      },
      {
        "text": "API",
        "url": "autocomplete/api",
        "title": {
          "aspnet-core": "Example of $FRAMEWORK Autocomplete component API"
        },
        "meta": {
          "aspnet-core": "The API Functions of $FRAMEWORK Autocomplete give you the option to set a specific value, attribute a value for the string, starting with a symbol or a digit."
        }
      },
      {
        "text": "RTL support",
        "url": "autocomplete/right-to-left-support",
        "title": {
          "aspnet-core": "Right-to-left support in $FRAMEWORK AutoComplete component"
        },
        "meta": {
          "aspnet-core": "We will demonstrate how the right-to-left typing feature is implemented in the text input field of the $FRAMEWORK AutoComplete control."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "autocomplete/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation in $FRAMEWORK AutoComplete control"
        },
        "meta": {
          "aspnet-core": "Look at this $FRAMEWORK demo which illustrates how the keyboard navigation feature is supported in Telerik AutoComplete."
        }
      }
    ],
    "category": "Editors"
  },
  {
    "text": "Badge",
    "name": "badge",
    "api": "web/badge",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/badge"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/badge"
    },
    "spriteCssClass": "badgeIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "badge/index",
        "title": {
          "aspnet-core": "$FRAMEWORK Badge HTMLHelper extension sample"
        },
        "meta": {
          "aspnet-core": "This demo illustrates how to configure Kendo UI jQuery-based badge in $FRAMEWORK."
        },
        "description": {
          "aspnet-core": "<p>This demo shows the basic usage of the $FRAMEWORK Badge widget. For more information about the $FRAMEWORK Badge widget refer to the <a href=\"https://docs.telerik.com/aspnet-core/html-helpers/layout/badge/overview\" target=\"_blank\">documentation</a>  and its <a href=\"https://docs.telerik.com/aspnet-core/api/badge\" target=\"_blank\">API</a>.</p>\n"
        }
      },
      {
        "text": "Labels",
        "url": "badge/labels",
        "title": {
          "aspnet-core": "Learn how to use the $FRAMEWORK Badge HTMLHelper as a label in the ListView component"
        },
        "meta": {
          "aspnet-core": "This demo illustrates how to use the $FRAMEWORK Badge HTMLHelper as a label in the ListView component"
        },
        "description": {
          "aspnet-core": "<p>This demo shows how to use the $FRAMEWORK Badge component as a label in the template of a $FRAMEWORK Listview.</p>\n"
        }
      },
      {
        "text": "Templates",
        "url": "badge/templates",
        "title": {
          "aspnet-core": "Learn how to use the $FRAMEWORK Badge HTMLHelper templates"
        },
        "meta": {
          "aspnet-core": "This demo illustrates how to use the $FRAMEWORK Badge HTMLHelper templates"
        },
        "description": {
          "aspnet-core": "<p>This demo shows how to customize the content of the $FRAMEWORK Badge using templates.</p>\n"
        }
      },
      {
        "text": "Tag Helper",
        "url": "badge/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Badge Tag Helper sample"
        }
      }
    ],
    "category": "Layout"
  },
  {
    "text": "Breadcrumb",
    "name": "breadcrumb",
    "api": "web/breadcrumb",
    "documentation": {
      "aspnet-core": "/html-helpers/navigation/breadcrumb/overview"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/breadcrumb"
    },
    "spriteCssClass": "breadcrumbIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "breadcrumb/index",
        "title": {
          "aspnet-core": "Demo and source code for  Telerik $FRAMEWORK Breadcrumb"
        },
        "meta": {
          "aspnet-core": "See how the Telerik $FRAMEWORK Breadcrumb control works and view the demo source code."
        },
        "description": {
          "aspnet-core": "<p>The <strong>Telerik $FRAMEWORK Breadcrumb</strong> is an intuitive UI component that allows navigation within a folder structure or web page. It provides an easy way to navigate backwards by one or multiple steps. </p><p><strong>Key Features</strong></p><ul style=\"list-style-type: disc;\"><li>Navigation</li><li>Icons</li><li>Editing</li><li>Accessibility, keyboard navigation and RTL Support</li></ul><p>Additional information about how to use the Telerik $FRAMEWORK Breadcrumb widget can be found in <a href=\"https://docs.telerik.com/aspnet-core/html-helpers/navigation/breadcrumb/overview\" target=\"_blank\">this section</a> of the product documentation.</p>\n"
        }
      },
      {
        "text": "Tag Helper",
        "url": "breadcrumb/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Breadcrumb Tag Helper sample"
        }
      },
      {
        "text": "Navigation",
        "url": "breadcrumb/navigation",
        "title": {
          "aspnet-core": "$FRAMEWORK Breadcrumb Navigation sample"
        },
        "meta": {
          "aspnet-core": "This demo show how to change icons of the items and the delimiters of the $FRAMEWORK Breadcrumb."
        }
      },
      {
        "text": "Icons",
        "url": "breadcrumb/icons",
        "title": {
          "aspnet-core": "$FRAMEWORK Breadcrumb Icons sample"
        }
      },
      {
        "text": "Editing",
        "url": "breadcrumb/editing",
        "title": {
          "aspnet-core": "$FRAMEWORK Breadcrumb Editing sample"
        },
        "meta": {
          "aspnet-core": "This demo show how to enable editing mode of the $FRAMEWORK Breadcrumb."
        }
      },
      {
        "text": "Events",
        "url": "breadcrumb/events",
        "title": {
          "aspnet-core": "$FRAMEWORK Breadcrumb Events sample"
        },
        "meta": {
          "aspnet-core": "This demo show how to bind to the event of the $FRAMEWORK Breadcrumb."
        }
      },
      {
        "text": "API",
        "url": "breadcrumb/api",
        "title": {
          "aspnet-core": "Example of $FRAMEWORK Breadcrumb component API"
        },
        "meta": {
          "aspnet-core": "The API Functions of $FRAMEWORK Breadcrumb give you the option to get, set and reset the value of the Breadcrumb."
        }
      },
      {
        "text": "RTL support",
        "url": "breadcrumb/right-to-left-support",
        "title": {
          "aspnet-core": "Right-to-left support in $FRAMEWORK Breadcrumb component"
        },
        "meta": {
          "aspnet-core": "We will demonstrate how the right-to-left typing feature is implemented in the text input field of the $FRAMEWORK Breadcrumb control."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "breadcrumb/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation in $FRAMEWORK Breadcrumb control"
        },
        "meta": {
          "aspnet-core": "Look at this $FRAMEWORK demo which illustrates how the keyboard navigation feature is supported in Telerik Breadcrumb."
        }
      }
    ],
    "category": "Navigation"
  },
  {
    "text": "Button",
    "name": "button",
    "api": "web/button",
    "updated": true,
    "documentation": {
      "aspnet-core": "helpers/html-helpers/button"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/button"
    },
    "spriteCssClass": "buttonIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "button/index",
        "title": {
          "aspnet-core": "$FRAMEWORK Button HTMLHelper extension sample"
        },
        "meta": {
          "aspnet-core": "This demo illustrates how to configure Kendo UI jQuery-based button in $FRAMEWORK."
        }
      },
      {
        "text": "Images",
        "url": "button/images",
        "title": {
          "aspnet-core": "Using $FRAMEWORK Buttons with images and icons"
        },
        "meta": {
          "aspnet-core": "This online demo will show you how to embed images and icons in your $FRAMEWORK Button."
        }
      },
      {
        "text": "Events",
        "url": "button/events",
        "title": {
          "aspnet-core": "$FRAMEWORK Button events demo"
        },
        "meta": {
          "aspnet-core": "Take a look at this $FRAMEWORK Button example to find out how events are triggered in the Button control."
        }
      },
      {
        "text": "API",
        "url": "button/api",
        "title": {
          "aspnet-core": "$FRAMEWORK Button component API"
        },
        "meta": {
          "aspnet-core": "See how the API functions of $FRAMEWORK Button give you the option to enable and disable it."
        }
      },
      {
        "text": "RTL support",
        "url": "button/right-to-left-support",
        "title": {
          "aspnet-core": "$FRAMEWORK Button Component RTL Support Demo"
        },
        "meta": {
          "aspnet-core": "We will demonstrate how the right-to-left feature is implemented in the $FRAMEWORK Button control."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "button/keyboard-navigation",
        "title": {
          "aspnet-core": "$FRAMEWORK Button Control Keyboard Navigation"
        },
        "meta": {
          "aspnet-core": "Look at this $FRAMEWORK demo which illustrates how the keyboard navigation feature is supported in Telerik Button."
        }
      },
      {
        "text": "Tag Helper",
        "url": "button/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Button Tag Helper sample"
        }
      },
      {
        "text": "Badges",
        "url": "button/badges",
        "new": true,
        "title": {
          "aspnet-core": "$FRAMEWORK Button Badges sample"
        }
      }
    ],
    "category": "Navigation"
  },
  {
    "text": "ButtonGroup",
    "name": "ButtonGroup",
    "api": "web/buttongroup",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/buttongroup"
    },
    "spriteCssClass": "mobileButtonGroupIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "buttongroup/index",
        "title": {
          "aspnet-core": "$FRAMEWORK ButtonGroup HTMLHelper extension sample"
        },
        "meta": {
          "aspnet-core": "This demo illustrates how to configure Kendo Ui jQuery-based ButtonGroup in $FRAMEWORK."
        }
      },
      {
        "text": "Badges",
        "url": "buttongroup/badges",
        "title": {
          "aspnet-core": "Using $FRAMEWORK ButtonGroup with badges"
        },
        "meta": {
          "aspnet-core": "This online demo will show you how to set badges in your $FRAMEWORK ButtonGroup."
        }
      },
      {
        "text": "Icons",
        "url": "buttongroup/icons",
        "title": {
          "aspnet-core": "Using $FRAMEWORK ButtonGroup with images and icons"
        },
        "meta": {
          "aspnet-core": "This online demo will show you how to embed images and icons in your $FRAMEWORK ButtonGroup."
        }
      },
      {
        "text": "Events",
        "url": "buttongroup/events",
        "title": {
          "aspnet-core": "$FRAMEWORK ButtonGroup events demo"
        },
        "meta": {
          "aspnet-core": "Take a look at this $FRAMEWORK ButtonGroup example to find out how events are triggered in the ButtonGroup control."
        }
      },
      {
        "text": "API",
        "url": "buttongroup/api",
        "title": {
          "kendo-ui": "ButtonGroup widget demo | ASP.NET Core Demos"
        },
        "meta": {
          "kendo-ui": "This example demonstrates the ButtonGroup API"
        }
      },
      {
        "text": "Selection",
        "url": "buttongroup/selection",
        "title": {
          "aspnet-core": "$FRAMEWORK ButtonGroup component API"
        },
        "meta": {
          "aspnet-core": "See how the API functions of $FRAMEWORK ButtonGroup give you the option to enable and disable it."
        }
      },
      {
        "text": "RTL support",
        "url": "buttongroup/right-to-left-support",
        "title": {
          "aspnet-core": "$FRAMEWORK ButtonGroup Component RTL Support Demo"
        },
        "meta": {
          "aspnet-core": "We will demonstrate how the right-to-left feature is implemented in the $FRAMEWORK ButtonGroup control."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "buttongroup/keyboard-navigation",
        "title": {
          "aspnet-core": "$FRAMEWORK ButtonGroup Component Keyboard Navigation Demo"
        },
        "meta": {
          "aspnet-core": "We will demonstrate how the keyboard navigation feature is implemented in the $FRAMEWORK ButtonGroup control."
        }
      },
      {
        "text": "Tag Helper",
        "url": "buttongroup/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK ButtonGroup Tag Helper sample"
        }
      }
    ],
    "category": "Navigation"
  },
  {
    "text": "Calendar",
    "name": "calendar",
    "api": "web/calendar",
    "spriteCssClass": "calendarIcon",
    "updated": true,
    "documentation": {
      "aspnet-core": "html-helpers/scheduling/calendar/overview"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/calendar"
    },
    "items": [
      {
        "text": "Basic usage",
        "url": "calendar/index",
        "title": {
          "aspnet-core": "Example of $FRAMEWORK Calendar"
        },
        "meta": {
          "aspnet-core": "Explore the example of $FRAMEWORK calendar control to find how easy it is to add a calendar to your website or web app."
        }
      },
      {
        "text": "Component Type",
        "url": "calendar/component-type",
        "new": true,
        "title": {
          "kendo-ui": "Example of $FRAMEWORK Calendar control"
        },
        "meta": {
          "kendo-ui": "This demo shows how to change the appearance of the $FRAMEWORK Calendar."
        }
      },
      {
        "text": "Tag Helper",
        "url": "calendar/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Calendar Tag Helper sample"
        }
      },
      {
        "text": "Customizing templates",
        "url": "calendar/template",
        "title": {
          "aspnet-core": "Custom templates for $FRAMEWORK Calendar | $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "This demo shows how $FRAMEWORK Calendar allows you to customize the content in your template."
        }
      },
      {
        "text": "Disable dates",
        "url": "calendar/disable-dates",
        "title": {
          "aspnet-core": "Disable dates in the $FRAMEWORK Calendar | $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "This demo shows how $FRAMEWORK Calendar allows you to disable dates"
        }
      },
      {
        "text": "Week Column",
        "url": "calendar/week-column",
        "title": {
          "aspnet-core": "Week column in the $FRAMEWORK Calendar | $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "This demo shows how $FRAMEWORK Calendar allows you to show a week number column in the month view"
        }
      },
      {
        "text": "Multiple Selection",
        "url": "calendar/selection",
        "title": {
          "aspnet-core": "Multiple Date Selection in the ASP.NET Core Calendar | ASP.NET Core demos"
        },
        "meta": {
          "aspnet-core": "This demo shows how ASP.NET Core Calendar allows you to select more than one date."
        },
        "description": {
          "aspnet-core": "<p>Starting from ASP.NET Core 2017 R3 release calendar allows multiple selection to be performed by using the <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/ui/calendar#configuration-selectable\" target=\"_blank\">selectable</a> configuration property.</p><p>The multiple selection functionality of the calendar widget can be summarized in several key points:</p><ol><li>Multiple Selection - Ctrl key is used while selecting dates.</li><li>Range Selection - Shift key is used to select range of dates.</li><li>Week Selection - Range selection for a specific week.</li></ol><br/><p>The Ctrl key allows user to perform multiple selection:</p><ul><li>Ctrl + Mouse Click on specific date will mark the date as selected and other previously selected dates will remain selected as well.</li><li>Selecting a date from a specific view without using Ctrl key will deselect all previously selected dates (including previously selected dates from other views/months) and select the date of the clicked cell.</li><li>Selecting a date that is already selected while holding the Ctrl key will remove the date from the selection.</li></ul><p>The Shift key allows user to select a range of dates in the same month or between different months:</p><ul><li>Shift + Mouse Click selects all dates between the last selected one (with SPACE or Mouse Click) and the clicked cell.</li><li>Shift + Mouse Click when there is no previous selection will select all dates from the beginning to the clicked cell.</li></ul><p>When user clicks on a specific week number the calendar selects the entire week. It can be considered as a special case of range selection - starting from first day of the week and selects all dates to the end of the week. </p><p>The Multiple Selection functionality introduces some new key combinations. Those are demonstrated in <a href=\"https://demos.telerik.com/aspnet-core/calendar/keyboard-navigation\">Keyboard Navigation</a> demo.</p>"
        }
      },

      {
        "text": "Events",
        "url": "calendar/events",
        "title": {
          "aspnet-core": "Events, triggered in $FRAMEWORK Calendar | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example of $FRAMEWORK Calendar control shows events which are available in the component."
        }
      },
      {
        "text": "API",
        "url": "calendar/api",
        "title": {
          "aspnet-core": "Demo for $FRAMEWORK Calendar Control API"
        },
        "meta": {
          "aspnet-core": "This demo shows how the $FRAMEWORK Calendar API works and what kind of functions it supports."
        }
      },
      {
        "text": "Globalization",
        "url": "calendar/globalization",
        "packages": [ "!online", "!jsp", "!php" ]
      },
      {
        "text": "RTL support",
        "url": "calendar/right-to-left-support",
        "title": {
          "aspnet-core": "Right-to-left functionality, enabled in $FRAMEWORK Calendar"
        },
        "meta": {
          "aspnet-core": "$FRAMEWORK Calendar component supports RTL functionality. Look at the demo to see how to easily apply RTL support to the control."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "calendar/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation demo for $FRAMEWORK Calendar"
        },
        "meta": {
          "aspnet-core": "You can easily navigate in $FRAMEWORK Calendar by using the keyboard. This demo shows the functionality, just look at the notes and play with the example."
        }
      }
    ],
    "category": "Scheduling"
  },
  {
    "text": "Checkbox",
    "name": "checkbox",
    "api": "web/checkbox",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/checkbox"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/checkbox"
    },
    "spriteCssClass": "checkboxIcon",
    "items": [
      {
        "text": "Basic Usage",
        "url": "checkbox/index",
        "title": {
          "aspnet-core": "$FRAMEWORK CheckBox demo"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the basic usage of the $FRAMEWORK CheckBox."
        }
      }
    ],
    "category": "Editors"
  },
  {
    "text": "ColorPicker",
    "name": "colorpicker",
    "api": "web/colorpicker",
    "forum": {
      "aspnet-core": "aspnet-core-ui/colorpicker"
    },
    "spriteCssClass": "colorPickerIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "colorpicker/index",
        "title": {
          "aspnet-core": "$FRAMEWORK Color Picker extension demo"
        },
        "meta": {
          "aspnet-core": "This demo illustrates the basic functionality of $FRAMEWORK HTML Helper for ASP.NET Core ColorPicker widget."
        }
      },
      {
        "text": "Tag Helper",
        "url": "colorpicker/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK ColorPicker Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK ColorPicker component."
        }
      },
      {
        "text": "Flat color picker",
        "url": "colorpicker/flatcolorpicker",
        "title": {
          "aspnet-core": "Flat color picker demo for $FRAMEWORK ColorPicker extension"
        },
        "meta": {
          "aspnet-core": "This sample demonstrates how Telerik $FRAMEWORK helper could be used for your flat color picker scenario."
        }
      },
      {
        "text": "Standalone Palette",
        "url": "colorpicker/palette",
        "title": {
          "aspnet-core": "Standalone Palette Demo in $FRAMEWORK ColorPicker control"
        },
        "meta": {
          "aspnet-core": "In this demo you will take a look at the rich standalone palette of $FRAMEWORK ColorPicker component. Grab the source code and play with the demo!"
        }
      },
      {
        "text": "Palette presets",
        "url": "colorpicker/palette-presets",
        "title": {
          "aspnet-core": "Palette presets in $FRAMEWORK ColorPicker"
        },
        "meta": {
          "aspnet-core": "This example shows how to easily use  palette presents of Telerik $FRAMEWORK ColorPicker extension. Look at the code and implement it for  user scenario."
        }
      },
      {
        "text": "Keyboard support",
        "url": "colorpicker/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard support of $FRAMEWORK ColorPicker extension"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the keyboard support functionality of Telerik $FRAMEWORK ColorPicker control."
        }
      },
      {
        "text": "Events",
        "url": "colorpicker/events",
        "title": {
          "aspnet-core": "Events in $FRAMEWORK ColorPicker control"
        },
        "meta": {
          "aspnet-core": "In this example we will examine the events that are fired in $FRAMEWORK ColorPicker component."
        }
      },
      {
        "text": "API",
        "url": "colorpicker/api",
        "title": {
          "aspnet-core": "API for $FRAMEWORK ColorPicker | UI for $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "This example for using Kendo UI ColorPicker widget in $FRAMEWORK shows how you can set values, enable/disable, open/close them by using ColorPicker API."
        }
      }
    ],
    "category": "Editors"
  },
  {
    "text": "ComboBox",
    "name": "combobox",
    "api": "web/combobox",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/combobox"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/combobox"
    },
    "spriteCssClass": "comboBoxIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "combobox/index",
        "title": {
          "aspnet-core": "$FRAMEWORK Combobox control Demo | UI for $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This $FRAMEWORK Combobox UI demo shows how to easily apply an editable text box with flexible auto-searchable functionality of the dropdown list into your web app."
        }
      },
      {
        "text": "Tag Helper",
        "url": "combobox/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Combobox Tag Helper sample"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "OrderViewModel.cs",
              "url": "~/Models/OrderViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Server filtering",
        "url": "combobox/serverfiltering",
        "title": {
          "aspnet-core": "Server filtering in $FRAMEWORK ComboBox"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "Check out this demo to see how the server filtering functionality works in $FRAMEWORK ComboBox."
        }
      },
      {
        "text": "Virtualization",
        "url": "combobox/virtualization",
        "title": {
          "aspnet-core": "Virtualization in $FRAMEWORK ComboBox"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "OrderViewModel.cs",
              "url": "~/Models/OrderViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "Check out this demo to see how the virtualization functionality works in $FRAMEWORK ComboBox."
        }
      },
      {
        "text": "Grouping",
        "url": "combobox/grouping",
        "title": {
          "aspnet-core": "Grouping in $FRAMEWORK ComboBox"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CustomerViewModel.cs",
              "url": "~/Models/CustomerViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "Check out this demo to see how the grouping functionality works in $FRAMEWORK ComboBox."
        }
      },
      {
        "text": "Client filtering",
        "url": "combobox/clientfiltering",
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "packages": [ "!online", "!jsp", "!php" ]
      },
      {
        "text": "Customizing templates",
        "url": "combobox/template",
        "title": {
          "aspnet-core": "Demo for customizing $FRAMEWORK ComboBox Templates"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CustomerViewModel.cs",
              "url": "~/Models/CustomerViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This $FRAMEWORK ComboBox demo shows how the template of the control can be customized to change the appearance of items in the auto-searchable list."
        }
      },
      {
        "text": "Cascading ComboBox",
        "url": "combobox/cascadingcombobox",
        "title": {
          "aspnet-core": "Cascading $FRAMEWORK ComboBox sample | UI for $FRAMEWORK demos"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CategoryViewModel.cs",
              "url": "~/Models/CategoryViewModel.cs"
            },
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            },
            {
              "name": "OrderViewModel.cs",
              "url": "~/Models/OrderViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how the cascading $FRAMEWORK ComboBox control would fit any web application or website."
        }
      },
      {
        "text": "Custom data source",
        "url": "combobox/custom-datasource",
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "packages": [ "!online", "!jsp", "!php" ]
      },
      {
        "text": "Events",
        "url": "combobox/events",
        "title": {
          "aspnet-core": "Examples of events in $FRAMEWORK ComboBox component"
        },
        "meta": {
          "aspnet-core": "This demo demonstrates useful events which are triggered in $FRAMEWORK ComboBox upon user's selection of an item from the drop-down list."
        }
      },
      {
        "text": "API",
        "url": "combobox/api",
        "title": {
          "aspnet-core": "Demo for $FRAMEWORK ComboBox control API"
        },
        "meta": {
          "aspnet-core": "This sample shows all API functions for Telerik $FRAMEWORK ComboBox control."
        }
      },
      {
        "text": "RTL support",
        "url": "combobox/right-to-left-support",
        "title": {
          "aspnet-core": "Right-to-left support in $FRAMEWORK ComboBox control"
        },
        "meta": {
          "aspnet-core": "Build your app with $FRAMEWORK ComboBox. This demo shows how RTL feature is supported in the component."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "combobox/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard nagivation in $FRAMEWORK ComboBox | $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "$FRAMEWORK ComboBox control for web app development supports easy keyboard navigation. Play with the demo to explore the functionality."
        }
      }
    ],
    "category": "Editors"
  },
  {
    "text": "DateInput",
    "name": "dateinput",
    "api": "web/dateinput",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/dateinput"
    },
    "spriteCssClass": "dateInputIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "dateinput/index",
        "title": {
          "aspnet-core": "$FRAMEWORK DateInput sample"
        },
        "meta": {
          "aspnet-core": "This example shows Telerik DateInput basic features to select dates and times in $FRAMEWORK application."
        },
        "description": {
          "aspnet-core": "The DateInput helper enables you to enter date/time via direct input. It provides separate sections for day, month, year, hours and minutes. Furthermore, you can customize the date and time format."
        }
      },
      {
        "text": "Events",
        "url": "dateinput/events",
        "title": {
          "aspnet-core": "Attach an event to $FRAMEWORK DateInput | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This sample shows how to access the events, attached to a date, as well as use $FRAMEWORK Date Input to pick a date or change it manually from a dropdown calendar."
        },
        "description": {
          "aspnet-core": "<p>Telerik $FRAMEWORK Dateinput provides API that enables you to customize it and enable/disable specific features of the component.</p><p>The example shows the usage of the <strong>change</strong> event. Note that the event is triggered after focus is removed from the component.</p><p>You can find more information on client-side API of DateInput <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/ui/dateinput#events\">here</a>.</p>"
        }
      },
      {
        "text": "API",
        "url": "dateinput/api",
        "title": {
          "aspnet-core": "API $FRAMEWORK Dateinput example"
        },
        "meta": {
          "aspnet-core": "This example demonstrates how the API of Telerik $FRAMEWORK Dateinput can be configured to modify the features of the extension."
        },
        "description": {
          "aspnet-core": "<p>Telerik $FRAMEWORK Dateinput provides API that enables you to customize it and enable/disable specific features of the component.</p><p>The example shows the usage of <strong>value</strong>, <strong>enable</strong> and <strong>readonly</strong> methods.</p><p>You can find more information on client-side API of DateInput <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/ui/dateinput#methods\">here</a>.</p>"
        }
      },
      {
        "text": "Globalization",
        "url": "dateinput/globalization",
        "description": {
          "aspnet-core": "<p>This example shows Globalization supported by $FRAMEWORK DateInput.</p><p>Globalization is responsible for defining the format of the dates. Thus, the format in which the date is displayed will depend on the selected culture.</p>"
        },
        "packages": [ "!online", "!jsp", "!php" ]
      },
      {
        "text": "RTL support",
        "url": "dateinput/right-to-left-support",
        "title": {
          "aspnet-core": "RTL support in $FRAMEWORK DateInput control | $FRAMEWORK Demo"
        },
        "meta": {
          "aspnet-core": "See how $FRAMEWORK DateInput component supports RTL functionality."
        },
        "description": {
          "aspnet-core": "This example shows how RTL functionality is supported in the $FRAMEWORK DateInput component ."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "dateinput/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation in $FRAMEWORK DateInput"
        },
        "meta": {
          "aspnet-core": "This example shows how the keyboard navigation functionality is supported in $FRAMEWORK DateInput control."
        },
        "description": {
          "aspnet-core": "This example shows how the keyboard navigation functionality is supported in $FRAMEWORK DateInput component."
        }
      },
      {
        "text": "Tag Helper",
        "url": "dateinput/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK DateInput Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK DateInput component."
        }
      }
    ],
    "category": "Editors"
  },
  {
    "text": "DatePicker",
    "name": "datepicker",
    "api": "web/datepicker",
    "updated": true,
    "documentation": {
      "aspnet-core": "helpers/html-helpers/datepicker"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/datetimepickers"
    },
    "spriteCssClass": "datePickerIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "datepicker/index",
        "title": {
          "aspnet-core": "$FRAMEWORK DatePicker sample"
        },
        "meta": {
          "aspnet-core": "This example shows Telerik DatePicker basic features to select dates and times in $FRAMEWORK application."
        },
        "description": {
          "aspnet-core": "<p>This example shows Telerik DatePicker basic features to select dates and times in ASP.NET Core application.</p><p>Since <strong>R2 2017</strong> the DatePicker can use <a href=\"https://demos.telerik.com/aspnet-core/dateinput/index\">DateInput</a> as a default input. The second DatePicker in the example is configured to use DateInput.</p>"
        }
      },
      {
        "text": "Component Type",
        "url": "datepicker/component-type",
        "new": true,
        "title": {
          "kendo-ui": "Example of $FRAMEWORK DatePicker control"
        },
        "meta": {
          "kendo-ui": "This demo shows how to change the appearance of the $FRAMEWORK DatePicker."
        }
      },
      {
        "text": "Range selection",
        "url": "datepicker/rangeselection",
        "title": {
          "aspnet-core": "Range selection in $FRAMEWORK DatePicker | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This demo shows how the $FRAMEWORK Datepicker component works for range selections. You can easily enable users to select a date range in a handy manner."
        }
      },
      {
        "text": "Customizing templates",
        "url": "datepicker/template",
        "title": {
          "aspnet-core": "Demo for customizing the template of $FRAMEWORK DatePicker"
        },
        "meta": {
          "aspnet-core": "This example demonstrates how you can use a custom template for your $FRAMEWORK DatePicker control in your web app. Easily apply a special style for your template."
        }
      },
      {
        "text": "Events",
        "url": "datepicker/events",
        "title": {
          "aspnet-core": "Attach an event to $FRAMEWORK DatePicker | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This sample shows how to access the events, attached to a date, as well as use $FRAMEWORK Date Picker to pick a date or change it manually from a dropdown calendar."
        }
      },
      {
        "text": "Disable dates",
        "url": "datepicker/disable-dates",
        "title": {
          "aspnet-core": "Disable dates in the $FRAMEWORK DatePicker | $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "This demo shows how $FRAMEWORK DatePicker allows you to disable dates"
        }
      },
      {
        "text": "Week Column",
        "url": "datepicker/week-column",
        "title": {
          "aspnet-core": "Week column in the $FRAMEWORK DatePicker | $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "This demo shows how $FRAMEWORK DatePicker allows you to show a week number column in the month view"
        }
      },
      {
        "text": "API",
        "url": "datepicker/api",
        "title": {
          "aspnet-core": "API $FRAMEWORK Datepicker example"
        },
        "meta": {
          "aspnet-core": "This example demonstrates how the API of Telerik $FRAMEWORK Datepicker can be configured to modify the features of the extension."
        }
      },
      {
        "text": "Globalization",
        "url": "datepicker/globalization",
        "packages": [ "!online", "!jsp", "!php" ]
      },
      {
        "text": "RTL support",
        "url": "datepicker/right-to-left-support",
        "title": {
          "aspnet-core": "RTL support in $FRAMEWORK DatePicker control | $FRAMEWORK Demo"
        },
        "meta": {
          "aspnet-core": "See how $FRAMEWORK DatePicker component supports RTL functionality."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "datepicker/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation in $FRAMEWORK DatePicker"
        },
        "meta": {
          "aspnet-core": "This example shows how the keyboard navigation functionality is supported in $FRAMEWORK DatePicker control."
        }
      },
      {
        "text": "Tag Helper",
        "url": "datepicker/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK DatePicker Tag Helper sample"
        }
      }
    ],
    "category": "Editors"
  },
  {
    "text": "DateRangePicker",
    "name": "daterangepicker",
    "api": "web/daterangepicker",
    "documentation": {
      "aspnet-core": "html-helpers/editors/daterangepicker/overview"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/datetimepickers"
    },
    "spriteCssClass": "dateRangePickerIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "daterangepicker/index",
        "title": {
          "aspnet-core": "$FRAMEWORK DateRangePicker sample"
        },
        "meta": {
          "aspnet-core": "This example shows Telerik DateRangePicker basic features to select dates range in $FRAMEWORK application."
        },
        "description": {
          "aspnet-core": "<p>This example shows Telerik DateRangePicker basic features to select dates range in ASP.NET MVC application.</p><p>The DateRangePicker uses <a href=\"https://demos.telerik.com/aspnet-mvc/dateinput/index\">DateInput</a> as a default input for the Start and End date.</p>"
        }
      },
      {
        "text": "Date Range",
        "url": "daterangepicker/date-range",
        "title": {
          "aspnet-core": "Select a range of dates using the $FRAMEWORK DateRangePicker | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This sample shows how to show pre-selected dates range with $FRAMEWORK DateRangePicker. The range can be changed manually from the dropdown calendar or inputs."
        },
        "description": {
          "aspnet-core": "This sample shows how to show pre-selected dates range with $FRAMEWORK DateRangePicker. The range can be changed manually from the dropdown calendar or inputs."
        }
      },
      {
        "text": "Events",
        "url": "daterangepicker/events",
        "title": {
          "aspnet-core": "Attach an event to $FRAMEWORK DateRangePicker | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This sample shows how to access the events, as well as use $FRAMEWORK Date Range Picker to pick a range of dates or change it manually from a dropdown calendar."
        },
        "description": {
          "aspnet-core": "This sample shows how to access the events, as well as use $FRAMEWORK Date Range Picker to pick a range of dates or change it manually from a dropdown calendar."
        }
      },
      {
        "text": "API",
        "url": "daterangepicker/api",
        "title": {
          "aspnet-core": "API $FRAMEWORK DateRangePicker example"
        },
        "meta": {
          "aspnet-core": "This example demonstrates how the Telerik $FRAMEWORK DateRangePicker API can be used to apply enable/disable functionality to jQuery-powered date range picker control or open/close the calendar."
        },
        "description": {
          "aspnet-core": "This example demonstrates how the Telerik $FRAMEWORK DateRangePicker API can be used to apply enable/disable functionality to jQuery-powered date range picker control or open/close the calendar."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "daterangepicker/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation in $FRAMEWORK DateRangePicker"
        },
        "meta": {
          "aspnet-core": "This example shows how the keyboard navigation functionality is supported in $FRAMEWORK DateRangePicker control."
        },
        "description": {
          "aspnet-core": "This example shows how the keyboard navigation functionality is supported in $FRAMEWORK DateRangePicker control."
        }
      },
      {
        "text": "Tag Helper",
        "url": "daterangepicker/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK DateRangePicker Tag Helper sample"
        }
      }
    ],
    "category": "Editors"
  },
  {
    "text": "DateTimePicker",
    "name": "datetimepicker",
    "api": "web/datetimepicker",
    "updated": true,
    "documentation": {
      "aspnet-core": "helpers/html-helpers/datetimepicker"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/datetimepickers"
    },
    "spriteCssClass": "dateTimePickerIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "datetimepicker/index",
        "title": {
          "aspnet-core": "$FRAMEWORK Date and Time picker example"
        },
        "meta": {
          "aspnet-core": "$FRAMEWORK DateTimePicker control handles both dates and times. Learn more about the time/date selection functionality by playing with this demo."
        }
      },
      {
        "text": "Component Type",
        "url": "datetimepicker/component-type",
        "new": true,
        "title": {
          "kendo-ui": "Example of $FRAMEWORK DateTimePicker control"
        },
        "meta": {
          "kendo-ui": "This demo shows how to change the appearance of the $FRAMEWORK DateTimePicker."
        }
      },
      {
        "text": "Range selection",
        "url": "datetimepicker/rangeselection",
        "title": {
          "aspnet-core": "Date range selection functionality in $FRAMEWORK DateTimePicker"
        },
        "meta": {
          "aspnet-core": "In $FRAMEWORK DateTimePicker control, dates and times are handled in two different input boxes so that the user can easily select different date ranges."
        }
      },
      {
        "text": "Customizing templates",
        "url": "datetimepicker/template",
        "title": {
          "aspnet-core": "Templates customization example | $FRAMEWORK DateTimePicker demo"
        },
        "meta": {
          "aspnet-core": "This example shows how templates of $FRAMEWORK DateTimePicker control can be customized to fit your application."
        }
      },
      {
        "text": "Events",
        "url": "datetimepicker/events",
        "title": {
          "aspnet-core": "Events in $FRAMEWORK Date and Timepicker component"
        },
        "meta": {
          "aspnet-core": "This example shows which events are triggered when you change the date and time in $FRAMEWORK DateTimePicker component."
        }
      },
      {
        "text": "Disable dates",
        "url": "datetimepicker/disable-dates",
        "title": {
          "aspnet-core": "Disable dates in the $FRAMEWORK DateTimePicker | $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "This demo shows how $FRAMEWORK DateTImePicker allows you to disable dates"
        }
      },
      {
        "text": "Week Column",
        "url": "datetimepicker/week-column",
        "title": {
          "aspnet-core": "Week column in the $FRAMEWORK DateTimePicker | $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "This demo shows how $FRAMEWORK DateTimePicker allows you to show a week number column in the month view"
        }
      },
      {
        "text": "API",
        "url": "datetimepicker/api",
        "title": {
          "aspnet-core": "$FRAMEWORK DateTimePicker API Demo"
        },
        "meta": {
          "aspnet-core": "Play with the demo to explore $FRAMEWORK DateTimePicker API and all API functions."
        }
      },
      {
        "text": "Globalization",
        "url": "datetimepicker/globalization",
        "packages": [ "!online", "!jsp", "!php" ]
      },
      {
        "text": "RTL support",
        "url": "datetimepicker/right-to-left-support",
        "title": {
          "aspnet-core": "Right-to-left support in $FRAMEWORK DateTimePicker control"
        },
        "meta": {
          "aspnet-core": "Choose a date and see how the date and the time are displayed from right to left in $FRAMEWORK DateTimePicker component."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "datetimepicker/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation in $FRAMEWORK DateTimePicker component"
        },
        "meta": {
          "aspnet-core": "By using the keyboard, you can easily select date and time in $FRAMEWORK DateTimePicker, trigger an event or highlight a specific day."
        }
      },
      {
        "text": "Tag Helper",
        "url": "datetimepicker/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK DateTimePicker Tag Helper sample"
        }
      }
    ],
    "category": "Editors"
  },
  {
    "text": "Drag and Drop",
    "name": "dragdrop",
    "api": "web/dragdrop",
    "packages": [ "aspnet-core", "online" ],
    "spriteCssClass": "dragdropIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "dragdrop/index",
        "title": {
          "aspnet-core": "Demo for Drag and Drop Component in $FRAMEWORK"
        },
        "meta": {
          "aspnet-core": "See the basic functionality of $FRAMEWORK Drag and Drop component which provides a cross-browser, touch-friendly way to reorder HTML elements via drag and drop."
        }
      }
    ],
    "category": "Interactivity & UX"
  },
  {
    "text": "DropDownList",
    "name": "dropdownlist",
    "updated": true,
    "api": "web/dropdownlist",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/dropdownlist"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/dropdownlist"
    },
    "spriteCssClass": "dropDownListIcon",
    "items": [
      {
        "text": "Overview",
        "url": "dropdownlist/index",
        "new": true,
        "title": {
          "aspnet-core": "Overview demo for $FRAMEWORK DropDownList control"
        },
        "meta": {
          "aspnet-core": "How to easily implement an interactive DropDownlist with user-friendly UI - look at the demo and play with $FRAMEWORK DropDownList."
        },
        "description": {
          "aspnet-core": "<p>The Telerik UI for ASP.NET Core DropDownList lets the user choose one option from a list of choices. It provides flexible data binding, virtualization, cascading lists, appearance customization through templates, events, validation, accessibility, RTL support and keyboard navigation.</p>The current demo of the UI for $FRAMEWORK DropDownList demonstrates an implementation of the most common scenarios in which the component is used.<ul><li><a href=\"https://demos.telerik.com/aspnet-core/dropdownlist/cascadingdropdownlist\">DropDownList Cascading</a></li><li><a href=\"https://demos.telerik.com/aspnet-core/dropdownlist/virtualization\">DropDownList Virtualization</a></li><li><a href=\"https://demos.telerik.com/aspnet-core/dropdownlist/template\">DropDownList Templates modification</li></ul>"
        }
      },
      {
        "text": "Basic usage",
        "url": "dropdownlist/basic-usage",
        "title": {
          "aspnet-core": "Basic usage demo for $FRAMEWORK DropDownList control"
        },
        "meta": {
          "aspnet-core": "How to easily implement an interactive DropDownlist with user-friendly UI - look at the demo and play with $FRAMEWORK DropDownList."
        }
      },
      {
        "text": "Tag Helper",
        "url": "dropdownlist/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK DropDownList Tag Helper sample"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "OrderViewModel.cs",
              "url": "~/Models/OrderViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Binding to remote data",
        "url": "dropdownlist/remotedatasource",
        "title": {
          "aspnet-core": "Remote Data binding demo | $FRAMEWORK DropDownList control"
        },
        "meta": {
          "aspnet-core": "The dropdown list of $FRAMEWORK drop down list control can load data from a remote source. This example shows binding to remote data functionality of the component."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Server filtering",
        "url": "dropdownlist/serverfiltering",
        "title": {
          "aspnet-core": "Example of Server filtering in ASP.NET Core DropDownList widget"
        },
        "meta": {
          "aspnet-core": "See how the auto-searchable dropdown list of ASP.NET Core DropDownList is filtered on the the server based on the input."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Virtualization",
        "url": "dropdownlist/virtualization",
        "title": {
          "aspnet-core": "Example of virtualization in ASP.NET Core DropDownList widget"
        },
        "meta": {
          "aspnet-core": "See how the virtual dropdown list of ASP.NET Core DropDownList is filtered on the the server based on the input."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "OrderViewModel.cs",
              "url": "~/Models/OrderViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Grouping",
        "url": "dropdownlist/grouping",
        "title": {
          "aspnet-core": "Example of grouping in ASP.NET Core DropDownList widget"
        },
        "meta": {
          "aspnet-core": "See how the virtual dropdown list of ASP.NET Core DropDownList is grouped."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CustomerViewModel.cs",
              "url": "~/Models/CustomerViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Client filtering",
        "url": "dropdownlist/clientfiltering",
        "packages": [ "!online", "!jsp", "!php" ],
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            },
            {
              "name": "CategoryViewModel .cs",
              "url": "~/Models/CategoryViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Customizing templates",
        "url": "dropdownlist/template",
        "title": {
          "aspnet-core": "Customize items in $FRAMEWORK DropDownList component"
        },
        "meta": {
          "aspnet-core": "This example shows how you can customize the appearance of the items and easily customize templates in $FRAMEWORK DropDownList control."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CustomerViewModel.cs",
              "url": "~/Models/CustomerViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Cascading DropDownList",
        "url": "dropdownlist/cascadingdropdownlist",
        "title": {
          "aspnet-core": "Example of cascading DropDownList | $FRAMEWORK Dropdownlist Demo"
        },
        "meta": {
          "aspnet-core": "This demo shows how the cascading $FRAMEWORK dropdown works in UI for $FRAMEWORK DropDownList control."
        }
      },
      {
        "text": "Custom data source",
        "url": "dropdownlist/custom-datasource",
        "packages": [ "!online", "!jsp", "!php" ]
      },
      {
        "text": "Events",
        "url": "dropdownlist/events",
        "title": {
          "aspnet-core": "Demo for events in $FRAMEWORK DropDownList component"
        },
        "meta": {
          "aspnet-core": "Take a look at this $FRAMEWORK DropDownList example to find out how events are triggered in the drop down listcontrol."
        }
      },
      {
        "text": "API",
        "url": "dropdownlist/api",
        "title": {
          "aspnet-core": "Example of $FRAMEWORK DropDownList API"
        },
        "meta": {
          "aspnet-core": "Explore API functions of $FRAMEWORK DropDownList to find how to enable or disable the dropdown list, open and close it or just manipulate the items."
        }
      },
      {
        "text": "RTL support",
        "url": "dropdownlist/right-to-left-support",
        "title": {
          "aspnet-core": "RTL feature in $FRAMEWORK DropDownList"
        },
        "meta": {
          "aspnet-core": "In this $FRAMEWORK demo, we illustrate how the RTL support is enabled in $FRAMEWORK DropDownList component."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "dropdownlist/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation in $FRAMEWORK DropDownList control"
        },
        "meta": {
          "aspnet-core": "Look at this $FRAMEWORK demo which illustrates how the keyboard navigation feature is supported in $FRAMEWORK DropDownList component."
        }
      }
    ],
    "category": "Editors"
  },
  {
    "text": "DropDownTree",
    "name": "dropdowntree",
    "api": "web/dropdowntree",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/dropdowntree"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/dropdowntree"
    },
    "spriteCssClass": "dropDownTreeIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "dropdowntree/index",
        "title": {
          "aspnet-core": "Demo for $FRAMEWORK DropDownTree control"
        },
        "meta": {
          "aspnet-core": "How to easily implement an interactive DropDownTree with user-friendly UI - look at the demo and play with $FRAMEWORK DropDownTree."
        }
      },
      {
        "text": "Images",
        "url": "dropdowntree/images",
        "title": {
          "aspnet-core": "Example of images in DropDownTree widget"
        },
        "packages": [ "!online", "!jsp", "!php" ],
        "meta": {
          "aspnet-core": "This $FRAMEWORK DropDownTree example shows the feature that allows you to use the widget with images."
        }
      },
      {
        "text": "Checkboxes",
        "url": "dropdowntree/checkboxes",
        "title": {
          "aspnet-core": "Example of DropDownTree with checkboxes"
        },
        "meta": {
          "aspnet-core": "This sample illustrates how you can easily create dropdowntree with multiple selection from a treeview with checkboxes by simply setting checkboxes to true."
        }
      },
      {
        "text": "Templates",
        "url": "dropdowntree/templates",
        "title": {
          "aspnet-core": "Example of templates in $FRAMEWORK DropDownTree widget"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "TreeViewItemViewModel.cs",
              "url": "~/Models/TreeView/TreeViewItemModel.cs"
            },
            {
              "name": "TreeViewRepository.cs",
              "url": "~/Models/TreeView/TreeViewRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo illustrates how tree nodes in $FRAMEWORK DropDownTree component can be further customized by using templates."
        }
      },
      {
        "text": "Client Filtering",
        "url": "dropdowntree/client-filtering",
        "title": {
          "aspnet-core": "Client filtering demo | $FRAMEWORK DropDownTree control"
        },
        "meta": {
          "aspnet-core": "See how the data of $FRAMEWORK DropDownTree is filtered on the the client based on the input."
        }
      },
      {
        "text": "Binding to local data",
        "url": "dropdowntree/local-data-binding",
        "title": {
          "aspnet-core": "Example of binding $FRAMEWORK DropDownTree widget to local data"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "Local_Data_Binding.cs",
              "url": "~/Controllers/DropDownTree/Local_Data_Binding.cs"
            },
            {
              "name": "CategoryItem.cs",
              "url": "~/Models/TreeView/CategoryItem.cs"
            },
            {
              "name": "SubCategoryItem.cs",
              "url": "~/Models/TreeView/SubCategoryItem.cs"
            }
          ]
        },
        "packages": [ "!online", "!jsp", "!php" ],
        "meta": {
          "aspnet-core": "This sample demonstrates how we can bind the $FRAMEWORK DropDownTree control to local data."
        },
        "group": "Data Binding"
      },
      {
        "text": "Binding to remote data",
        "url": "dropdowntree/remote-data-binding",
        "title": {
          "aspnet-core": "Example of binding $FRAMEWORK DropDownTree widget to remote data"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeViewModel.cs",
              "url": "~/Models/EmployeeViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This sample demonstrates how we can bind the $FRAMEWORK DropDownTree control to remote data."
        }
      },
      {
        "text": "Events",
        "url": "dropdowntree/events",
        "title": {
          "aspnet-core": "Demo for events in $FRAMEWORK DropDownTree component"
        },
        "meta": {
          "aspnet-core": "Take a look at this $FRAMEWORK DropDownTree example to find out how events are triggered in the drop down listcontrol."
        },
        "group": "API"
      },
      {
        "text": "API",
        "url": "dropdowntree/api",
        "title": {
          "aspnet-core": "Example of $FRAMEWORK DropDownTree API"
        },
        "meta": {
          "aspnet-core": "This demo shows the specific API functions, which control the behaviour of $FRAMEWORK DropDownTree."
        }
      },
      {
        "text": "RTL support",
        "url": "dropdowntree/right-to-left-support",
        "title": {
          "aspnet-core": "RTL feature in $FRAMEWORK DropDownTree"
        },
        "meta": {
          "aspnet-core": "In this $FRAMEWORK demo, we illustrate how the RTL support is enabled in $FRAMEWORK DropDownTree component."
        },
        "group": "Accessibility and Internationalization"
      },
      {
        "text": "Keyboard navigation",
        "url": "dropdowntree/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation in $FRAMEWORK DropDownTree control"
        },
        "meta": {
          "aspnet-core": "Look at this $FRAMEWORK demo which illustrates how the keyboard navigation feature is supported in $FRAMEWORK DropDownTree component."
        }
      },
      {
        "text": "Tag Helper",
        "url": "dropdowntree/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK DropDownTree Tag Helper sample"
        }
      }
    ],
    "category": "Editors"
  },
  {
    "text": "Cards",
    "name": "cards",
    "updated": true,
    "documentation": {
      "aspnet-core": "styles-and-layout/cards"
    },
    "category": "Layout",
    "spriteCssClass": "cardsIcon",
    "items": [
      {
        "text": "Basic Usage",
        "url": "cards/index",
        "updated": true,
        "title": {
          "aspnet-core": "Basic usage of $FRAMEWORK UI Cards Demo| UI for $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the Cards basic usage."
        },
        "description": {
          "aspnet-core": "<p>The $FRAMEWORK Card is a set of classes that provide a way of defining flexible content containers. A card can consist of a header, body and actions and can also accommodate images, lists, groups, separators and more.</p><p>Additional information about how to use the $FRAMEWORK UI Cards classes can be found in <a href=\"https://docs.telerik.com/aspnet-core/styles-and-layout/cards\" target=\"_blank\">this section</a> of the product documentation.</p>\n"
        }
      },
      {
        "text": "Orientation",
        "url": "cards/orientation",
        "new": true,
        "title": {
          "aspnet-core": "$FRAMEWORK UI Cards Orientation Demo | UI for $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the Cards Orientation"
        },
        "description": {
          "aspnet-core": "<p>The $FRAMEWORK UI Cards enable you to arrange the content either vertically or horizontally.</p>\n"
        }
      },
      {
        "text": "Action Buttons",
        "url": "cards/action-buttons",
        "new": true,
        "title": {
          "aspnet-core": "$FRAMEWORK UI Cards Action Buttons Demo | UI for $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the Cards Action Buttons"
        },
        "description": {
          "aspnet-core": "<p>The action buttons in the $FRAMEWORK UI Cards can be arranged horizontally or vertically as well as aligned to the left or right, centered or stretched.</p>\n"
        }
      },
      {
        "text": "Types",
        "url": "cards/types",
        "updated": true,
        "title": {
          "aspnet-core": "$FRAMEWORK UI Cards Types Demo | UI for $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the Cards types"
        }
      },
      {
        "text": "Layout",
        "url": "cards/layout",
        "title": {
          "aspnet-core": "$FRAMEWORK UI Cards Layout Demo | UI for $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the Cards layout modes"
        },
        "description": {
          "aspnet-core": "<p>Cards have three additional classes that are useful for laying out series of cards: <ul style=\"list-style-type: disc;\"><li><strong>Card list</strong> - rendering cards detached from one another in a column through the `.k-card-list` class</li><li><strong>Card Group</strong> - rendering cards attached to one another on a single row through the `.k-card-group` class</li><li><strong>Card Deck</strong> - rendering cards detached from one another on a single row through the `.k-card-deck` class</li></ul></p><p>Additional information about how to use the $FRAMEWORK UI Cards classes can be found in <a href=\"https://docs.telerik.com/kendo-ui/styles-and-layout/cards\" target=\"_blank\">this section</a> of the product documentation.</p>\n"
        }
      },
      {
        "text": "Media",
        "url": "cards/media",
        "new": true,
        "title": {
          "aspnet-core": "$FRAMEWORK UI Cards Action Buttons Demo | UI for $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the Cards Media"
        },
        "description": {
          "aspnet-core": "<p>The Card allows you to display an image or a video within its content.</p>\n"
        }
      },
      {
        "text": "Drag and Drop",
        "url": "cards/drag-and-drop",
        "title": {
          "aspnet-core": "$FRAMEWORK UI Cards drag and drop Demo | UI for $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates drag and drop of Cards"
        }
      },
      {
        "text": "RTL support",
        "url": "cards/right-to-left-support",
        "new": true,
        "title": {
          "aspnet-core": "$FRAMEWORK UI Cards RTL support | UI for $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates right-to-left support of Cards"
        }
      }
    ]
  },
  {
    "text": "Dialog",
    "name": "dialog",
    "api": "web/dialog",
    "forum": {
      "aspnet-core": "aspnet-core-ui/dialog"
    },
    "spriteCssClass": "dialogIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "dialog/index",
        "title": {
          "aspnet-core": "Basic usage demo for $FRAMEWORK Dialog | UI for $FRAMEWORK Demos"
        },
        "description": {
          "aspnet-core": "<p>The <strong>Telerik Dialog for $FRAMEWORK</strong> is a modal popup that brings information to the user. It also provides actions through the action buttons to prompt the user for input or to ask for a decision. The component can also contain more complex UI elements that require the focus of the user. The Dialog control is a subset of the <a href=\"https://www.telerik.com/kendo-ui/window\" target=\"_blank\">Window</a> one where the most prominent difference is the added functionality for actions.</p><br /><p><strong>Key Features</strong></p> <ul style=\"list-style-type: disc;\"><li>Fully customizable visual appearance of the dialog title and body</li><li>Support for rich text content</li><li>Predefined Alert, Confirm, and Prompt Dialogs</li><li>Built-in modality and animations</li><li>Ability to create and add custom actions (buttons) at the bottom of the dialog</li><li>Rich API for maximum flexibility</li><li>Built-in themes</li><li>Accessibility, keyboard navigation and RTL Support</li><li>Rich cross-browser and mobile support</li></ul>"
        }
      },
      {
        "text": "Tag Helper",
        "url": "dialog/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Dialog Tag Helper sample"
        }
      },
      {
        "text": "Events",
        "url": "dialog/events",
        "title": {
          "aspnet-core": "Events in $FRAMEWORK Dialog demo"
        },
        "meta": {
          "aspnet-core": "This demo shows how to fire events in $FRAMEWORK dialog control. Open and close are some of the events which you can trigger."
        },
        "requiresServer": "true"
      },
      {
        "text": "API",
        "url": "dialog/api",
        "title": {
          "aspnet-core": "Example of $FRAMEWORK Dialog API"
        },
        "meta": {
          "kendo-ui": "This sample shows how you can use the API of kendoDialog widget to refresh the content of the dialog, open and close it.",
          "aspnet-core": "This sample shows how you can use the API of $FRAMEWORK Dialog control to refresh the content of the dialog, open and close it."
        },
        "requiresServer": "true"
      },
      {
        "text": "RTL support",
        "url": "dialog/right-to-left-support",
        "title": {
          "aspnet-core": "Right-to-Left dialog position of $FRAMEWORK Dialog control"
        },
        "meta": {
          "aspnet-core": "This demo shows how $FRAMEWORK Dialog control supports right-to-left direction of the dialog to provide best end-user experience."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "dialog/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation support | $FRAMEWORK Dialog Demo"
        },
        "meta": {
          "aspnet-core": "The sample demonstrates how the keyboard navigation feature is integrated in the $FRAMEWORK Dialog control."
        }
      }
    ],
    "category": "Layout"
  },
  {
    "text": "Diagram",
    "name": "diagram",
    "api": "dataviz/diagram",
    "forum": {
      "aspnet-core": "aspnet-core-ui/diagram"
    },
    "spriteCssClass": "diagramIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "diagram/index",
        "title": {
          "aspnet-core": "Example of $FRAMEWORK Diagram with a simple layout"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "DiagramDataRepository.cs",
              "url": "~/Models/Diagram/DiagramDataRepository.cs"
            }
          ]
        },
        "description": {
          "aspnet-core": "With this demo built with $FRAMEWORK, you will be able to find out how $FRAMEWORK Diagram control can be implemented for hierarchical diagrams."
        }
      },
      {
        "text": "Built-in Layouts",
        "url": "diagram/layout",
        "title": {
          "aspnet-core": "Example of $FRAMEWORK Diagram with different layouts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "DiagramDataRepository.cs",
              "url": "~/Models/Diagram/DiagramDataRepository.cs"
            }
          ]
        },
        "description": {
          "aspnet-core": "This sample demonstrates the built-in layouts which are specific to $FRAMEWORK Diagram component."
        }
      },
      {
        "text": "Editing",
        "url": "diagram/editing",
        "title": {
          "aspnet-core": "Example of $FRAMEWORK Diagram with editing"
        },
        "description": {
          "aspnet-core": "In this example you will learn how you can easily use editing operations in $FRAMEWORK Diagram."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "DiagramDataController.cs",
              "url": "~/Controllers/Diagram/DiagramDataController.cs"
            },
            {
              "name": "OrgChartShape.cs",
              "url": "~/Models/SamplesEntities/OrgChartShape.cs"
            },
            {
              "name": "OrgChartConnection.cs",
              "url": "~/Models/SamplesEntities/OrgChartConnection.cs"
            }
          ]
        }
      },
      {
        "text": "PDF Export",
        "url": "diagram/pdf-export",
        "title": {
          "aspnet-core": "Example of $FRAMEWORK Diagram saveAsPDF API method"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "DiagramDataRepository.cs",
              "url": "~/Models/Diagram/DiagramDataRepository.cs"
            }
          ]
        },
        "description": {
          "aspnet-core": "This demo shows how to save the diagram as PDF directly in the browser."
        }
      },
      {
        "text": "Advanced Export",
        "url": "diagram/export",
        "title": {
          "aspnet-core": "Example of $FRAMEWORK Diagram Export API methods"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "DiagramDataRepository.cs",
              "url": "~/Models/Diagram/DiagramDataRepository.cs"
            }
          ]
        },
        "description": {
          "aspnet-core": "This demo shows how to export diagrams to PDF, PNG Images or SVG and save them directly in the browser."
        }
      },
      {
        "text": "Events",
        "url": "diagram/events",
        "title": {
          "aspnet-core": "Example of using events in $FRAMEWORK Diagram control"
        },
        "description": {
          "aspnet-core": "This example demonstrates all the different events available in Telerik $FRAMEWORK Diagram control."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "DiagramDataController.cs",
              "url": "~/Controllers/Diagram/DiagramDataController.cs"
            },
            {
              "name": "OrgChartShape.cs",
              "url": "~/Models/SamplesEntities/OrgChartShape.cs"
            },
            {
              "name": "OrgChartConnection.cs",
              "url": "~/Models/SamplesEntities/OrgChartConnection.cs"
            }
          ]
        }
      },
      {
        "text": "API",
        "url": "diagram/api",
        "title": {
          "aspnet-core": "Example of $FRAMEWORK Diagram API"
        },
        "description": {
          "aspnet-core": "The API Functions of $FRAMEWORK Diagram control give you the option to add/remove shapes and connections, set the current pan and zoom, select elements."
        }
      }
    ],
    "category": "Diagrams & Maps"
  },
  {
    "text": "Editor",
    "name": "editor",
    "api": "web/editor",
    "updated": true,
    "documentation": {
      "aspnet-core": "helpers/html-helpers/editor"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/editor"
    },
    "spriteCssClass": "editorIcon",
    "items": [
      {
        "text": "Overview",
        "url": "editor/index",
        "new": true,
        "title": {
          "aspnet-core": "Overview demo for $FRAMEWORK Editor"
        },
        "description": {
          "aspnet-core": "<p>The Telerik UI for $FRAMEWORK Editor is a powerful WYSIWYG component, which allows you and your users to create rich text content in a familiar and user-friendly way. It provides a variety of tools for creating, editing, styling and formatting text, paragraphs, lists, images, tables, hyperlinks and other HTML elements. The component outputs identical HTML across all major browsers, follows accessibility standards and provides API for content manipulation and export to PDF.</p><p><strong>Key Features</strong></p><ul> <li>Intuitive UI for rich text editing, formatting and styling</li> <li>Handles with ease lists, tables, images and hyperlinks creation and formatting</li> <li>File attachment support</li> <li>Fully customizable toolbar and buttons</li> <li>Inline editing of different content areas</li> <li>Format painter tool that lets to copy and paste text formatting</li> <li>Table editing options for columns and rows merge</li> <li>Support for predefined HTML code snippets and non-editable elements</li> <li>Export to PDF</li> <li>Built-in customizable themes such as Default (our own), Bootstrap and Material and more</li> <li>Rich API for maximum flexibility</li> <li>High performance</li> <li>Accessibility, globalization, keyboard navigation and RTL Support</li> <li>Rich cross-browser and mobile support</li> <li>Responsive HTML 5 Rendering</li> </ul> <p>You can find additional information on how to use the Telerik UI for $FRAMEWORK Editor in <a href=\"https://docs.telerik.com/aspnet-core/helpers/html-helpers/editor\">this section</a> of the product documentation."
        },
        "meta": {
          "aspnet-core": "This demo shows how you can use Telerik editor extension in $FRAMEWORK."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ImageBrowserController.cs",
              "url": "~/Controllers/Editor/ImageBrowserController.cs"
            }
          ]
        }
      },
      {
        "text": "Basic usage",
        "url": "editor/basic-usage",
        "packages": [
          "!jsp",
          "!php"
        ],
        "title": {
          "aspnet-core": "Basic usage demo for $FRAMEWORK Editor"
        },
        "description": {
          "aspnet-core": "<p>The Telerik UI for $FRAMEWORK Editor component allows users to edit HTML in a familiar, user-friendly way. In this demo scenario you can interact with the Editor and try yourself the basics of text formatting such as – changing font type, size and color, highlighting areas, managing hyperlinks, bulleted and numbered lists, defining headings and paragraphs, and indenting text accordingly.</p> <p>You can see or explore the Kendo UI Editor features in our various demo sections or check out the component documentation <a href=\"https://docs.telerik.com/aspnet-core/html-helpers/editors/editor/overview\" target=\"_blank\">here</a></p>"
        },
        "meta": {
          "aspnet-core": "This demo shows how you can use Telerik editor extension in $FRAMEWORK."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ImageBrowserController.cs",
              "url": "~/Controllers/Editor/ImageBrowserController.cs"
            }
          ]
        }
      },
      {
        "text": "Tag Helper",
        "url": "editor/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Editor Tag Helper sample"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ImageBrowserController.cs",
              "url": "~/Controllers/Editor/ImageBrowserController.cs"
            },
            {
              "name": "FileBrowserController.cs",
              "url": "~/Controllers/Editor/FileBrowserController.cs"
            }
          ]
        }
      },
      {
        "text": "Inline editing",
        "url": "editor/inline-editing",
        "title": {
          "aspnet-core": "Inline editing functionality of $FRAMEWORK WYSIWYG Editor"
        },
        "group": "Functionality",
        "description": {
          "aspnet-core": "<p>This example shows how you can use the Core Editor to edit parts of the page inline and at the same time to have an overview of the real layout and appearance.</p> <p>All you need to do to enable the inline editing is to set the .Tag(\"param\") setting, where the \"param\" parameter should be a valid <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_Editable\">contentEditable element</a> as the \"div\" used in this demo. If the Tag attribute is not set, the WYSIWYG editor will be rendered in its default TextArea mode.</p>"
        },
        "meta": {
          "aspnet-core": "This example shows how to use the $FRAMEWORK Editor to edit parts of the page inline, allowing authors to see the page in its final state."
        }
      },
      {
        "text": "Custom tools",
        "url": "editor/custom-tools",
        "title": {
          "aspnet-core": "Custom tools for $FRAMEWORK WYSIWYG Editor"
        },
        "meta": {
          "aspnet-core": "This example shows how you can easily customize some of $FRAMEWORK Editor native tools. You can also create completely custom tools for the component."
        },
        "description": {
          "aspnet-core": "<p>This example shows how to customize some of the native Editor tools (font size, font name and block format) by modifying the tools' item collections, as well as how to create completely custom tools (Content Area Background Color and Insert a Horizontal Ruler).</p> <p>You can use the Add method of the FontName, FontSize and Formatting settings to modify the default font size, font name and formatblock options set.</p> <p>To add a new custom button on the toolbar: set the Tools -&gt; CustomButton:</p> <p>.CustomButton(cb =&gt; cb.Name(\"custom\").ToolTip(\"horizontal rule\").Exec(\"execFunction\"))</p> <p>Where the Exec param should be the name of a JavaScript function that will be fired when the custom button is clicked.</p> <p>If you want to create a custom dropdown with a label next to it, you can set the Tools -&gt; CustomTemplate and specify the HTML markup that will be rendered on the toolbar.</p>"
        }
      },
      {
        "text": "File and image browser",
        "url": "editor/imagebrowser",
        "title": {
          "aspnet-core": "Image browser in $FRAMEWORK Editor | $FRAMEWORK demo"
        },
        "meta": {
          "aspnet-core": "In this demo we will see how the sleek image browser is nicely implemented in $FRAMEWORK Editor control."
        },
        "description": {
          "aspnet-core": "<p>You can use the Insert Image and Insert File Browser managers to upload and insert Image and Hyperlink objects into the content area of the Core Editor. Both dialogs consist of Address and Search fields, File Browser panel which shows the available files, File Upload, Create a New Folder and Delete features. In addition there is a file properties section with fields suitable for images: web address, alternate text, width and height as well as for hyperlinks: web address and title.</p> <p>You can configure the Image browser tool through the ImageBrowser configuration option and the Insert File browser through the FileBrowser one. You can find more information about the Image dialog in this documentation article: <a href=\"https://docs.telerik.com/kendo-ui/web/editor/imagebrowser\">Image Browser</a>.</p>"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "FileBrowserController.cs",
              "url": "~/Controllers/Editor/FileBrowserController.cs"
            },
            {
              "name": "FileImageBrowserController.cs",
              "url": "~/Controllers/Editor/FileImageBrowserController.cs"
            }
          ]
        }
      },
      {
        "text": "All tools",
        "url": "editor/all-tools",
        "title": {
          "aspnet-core": "All tools demo in $FRAMEWORK Editor control"
        },
        "meta": {
          "aspnet-core": "This example shows the core editing engine in $FRAMEWORK Editor control. Get familiar with all features of the component for any $FRAMEWORK website or web app."
        },
        "description": {
          "aspnet-core": "<p>You can see in this demo the whole set of tools supported by the Telerik Core Editor. You can easily add or hide each of them through the Tools collection option of the component:</p> <p>.Tools(tools =&gt; tools. Clear().Bold().Italic().Underline().Strikethrough()...FontName().FontSize().FontColor().BackColor().Print())</p> <p>If you remove the Clear() option, the default toolbar will be shown along with the specified by you buttons.</p>"
        }
      },
      {
        "text": "Format Painter",
        "url": "editor/format-painter",
        "title": {
          "aspnet-core": "Format Painter demo in $FRAMEWORK Editor"
        },
        "meta": {
          "aspnet-core": "This example illustrates how the Editor Format painter could be used. Get familiar with all features of the component for any $FRAMEWORK website or web app."
        },
        "description": {
          "aspnet-core": "<p>You can use the <strong>Format Painter</strong> tool to copy formatting from piece of text and apply it to others in the content area of the Kendo UI Editor. The tool is very similar to the FormatPainter of MS Word®, and is quite useful and time saving when needed to apply identical formatting to multiple sections of the edited content.</p><h3>How it Works</h3><p>Format a section with the desired bold, italic, underline, font size and font family and other formatting and press the <strong>Copy Format button</strong>. This operation will save the formatting of the selected content in the clipboard. If the selection includes sections with different formatting, the tool will copy the styles from the section where the start of the selection is placed.</p><p>To apply the saved formatting, select the text that you want to format and click the <strong>Apply Format button.</strong></p><h3>Supported formatting</h3><p>The tool will copy and apply all inline styles. Also, any classes and attributes present in the source will be copied to the target.</p><p>The tool will also transfer the dom structure from the source to the target, clearing the previous DOM structure. The exceptions are the following targets:</p><ul><li><strong>li</strong> target elements will not be modified. Instead, the copied structure will be applied within them.</li><li><strong>th</strong> and <strong>td</strong> target elements will not be modified. The copied structure will also be applied within them.</li></ul>"
        }
      },
      {
        "text": "Table Editing",
        "url": "editor/table-editing",
        "title": {
          "aspnet-core": "Table editing tools demo in $FRAMEWORK Editor control"
        },
        "meta": {
          "aspnet-core": "This example shows the table editing engine in $FRAMEWORK Editor control. Get familiar with all features of the component for any $FRAMEWORK website or web app."
        },
        "description": {
          "aspnet-core": "<p>This demo presents the the table edtiting tools supported:</p><ul>    <li><strong>Table a wizard</strong> enables you to create a new table with different table and cell settings or modify the selected one;</li>    <li><strong>Create table</strong> enables you to easily create a simple table by selecting the rows and columns in the dropdown;</li>    <li><strong>Add row above/below</strong> adds a new row;</li>    <li><strong>Add column left/right</strong> adds a new column;</li>    <li><strong>Delete row/column</strong> deletes the selected row or column;</li>    <li><strong>Merge cells horizontally</strong> merges the selected cell with the one on the left;</li>    <li><strong>Merge cells vertically</strong> merges the selected cell with the one below;</li>    <li><strong>Split cell horizontally/vertically</strong> splits a cell that has <code>colspan</code> or <code>rowspan</code> attribute (as a result of Merge cells command) and adds a new empty cell.</li></ul>"
        }
      },
      {
        "text": "Snippets",
        "url": "editor/snippets",
        "title": {
          "aspnet-core": "Demo for snippets feature of $FRAMEWORK Editor control"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the snippet feature of $FRAMEWORK Editor. See how you can quickly insert HTML code snippet into web-based editor in your app."
        },
        "description": {
          "aspnet-core": "<p>The snippets feature of the Core Editor allows you to quickly insert predefined HTML code snippets in the content area.</p> <p>The snippet tool can insert plain text or HTML content which you can configure using the Tools -&gt; Snippets -&gt; Add(\"Snippet Item Name\", \"&lt;b&gt;My Snippet Content&lt;/b&gt;\") method.</p>"
        }
      },
      {
        "text": "Styles",
        "url": "editor/styles",
        "title": {
          "aspnet-core": "Style tool demo for $FRAMEWORK web editor | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example shows how you can use the $FRAMEWORK Editor style tool to customize the content of the control with CSS classes."
        },
        "description": {
          "aspnet-core": "<p>The demo presents you how to use the Editor's style tool, which provides the ability to customize the widget content by means of custom CSS classes and styling, and a CSS file registered in the Editor iframe document.</p> <p>You can register and import your own CSS file into the content area through the StyleSheets option:<br /> .StyleSheets(css =&gt; css.Add(Url.Content(\"~/PATH_TO_CSS_FILE/CSS_FILE.css\"))) </p> <p > Use the Tools -&gt; Formatting -&gt; Add(\"Dropdown Item Name\",\".CSS Class Name\") method to populate the Format dropdown with options. Note that the specified CSS class should exist in the CSS file imported in the content area through the StyleSheets -&gt; Add method.</p>"
        }
      },
      {
        "text": "PDF Export",
        "url": "editor/pdf-export",
        "title": {
          "aspnet-core": "PDF export support in $FRAMEWORK Editor"
        },
        "meta": {
          "aspnet-core": "With $FRAMEWORK Editor you can allow end users to edit HTML5 in a user-friendly way. Check out this demo to learn more about the PDF export support in the component."
        },
        "description": {
          "aspnet-core": "<p>Nowadays, the PDF format is very popular and widely used to present documents in a manner independent of application software, hardware and operating systems. This demo demonstrates how to export the Telerik Core Editor contents to PDF.</p> <p>The approach is very straight-forward - to export the content to PDF include the corresponding command to the editor&rsquo;s toolbar&nbsp;.Tools(tools =&gt; tools.Pdf()) and configure the export settings through the Pdf attribute. For instance, you can specify the file name and whether to export all pages, margins, paper size, font, etc.</p>"
        }
      },
      {
        "text": "Immutable Elements",
        "url": "editor/immutable-elements",
        "title": {
          "aspnet-core": "Immutable Elements demo demo for $FRAMEWORK web editor | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example shows how you can use immutable elements in $FRAMEWORK Editor"
        },
        "description": {
          "aspnet-core": "<p>The $FRAMEWORK web editor and its <strong>Immutable Elements</strong> feature enables you to predefine elements in the content area that cannot be edited by the end user.&nbsp;</p><p>This demo shows a use case where a mail form is to be edited. You can see also:</p><ol><li>How to enable the Immutable Elements—by using the&nbsp;<a href='https://docs.telerik.com/kendo-ui/api/javascript/ui/editor#configuration-immutables'>immutables option</a>;</li><li>How to define the HTML elements that cannot be edited—by adding the <strong>contenteditable='false'</strong> attribute;</li><li>How to use the <a href='https://docs.telerik.com/kendo-ui/api/javascript/ui/editor#configuration-immutables.serialization'>immutables.serialization</a>&nbsp;and&nbsp;<a href='https://docs.telerik.com/kendo-ui/api/javascript/ui/editor#configuration-immutables.deserialization'>immutables.deserialization</a>&nbsp;option to change the data shown in the&nbsp;<strong>viewHtml</strong> dialog and enable end user to control the CSS text-align property from there;</li><li>How to define default styles for the immutable elements;</li><li>And how to define styles when an immutable element is selected to improve UX.</li></ol>"
        }
      },
      {
        "text": "Events",
        "url": "editor/events",
        "title": {
          "aspnet-core": "Example for events in $FRAMEWORK Editor component"
        },
        "meta": {
          "aspnet-core": "This demo illustrates which events are fired when the $FRAMEWORK editor is blurred, its content is changed or a command is executed."
        },
        "group": "API",
        "description": {
          "aspnet-core": "<p>Telerik Core Editor exposes rich API and events which provide easy configuration or extension points for customization on top of its built-in features.</p> <p>This particular demo shows how you can intercept the <strong>Change</strong>, <strong>Execute, Select </strong>and <strong>Paste </strong>events of the editor to output messages in the console when these events are raised. You can use these events for customizations or to execute custom logic, if necessary.</p>"
        }
      },
      {
        "text": "Globalization",
        "url": "editor/globalization",
        "packages": [ "!online", "!jsp", "!php" ]
      },
      {
        "text": "API",
        "url": "editor/api",
        "title": {
          "aspnet-core": "API demo for $FRAMEWORK Editor component"
        },
        "meta": {
          "aspnet-core": "This examples show how the API of $FRAMEWORK Editor works in action and how the content in the editor can be easily manipulated via the API."
        },
        "description": {
          "aspnet-core": "<p>Telerik Core Editor exposes rich client-side API and events, which provide easy configuration or extension points for custom functionality on top of the built-in features.</p> <p>The example shows how you can get a reference to the editor&rsquo;s client-side object and obtain/replace its content using the provided <a href=\"https://docs.telerik.com/KENDO-UI/api/javascript/ui/editor#methods-value\">editor.value()</a> method.</p> <p>You can find more information about the available editor&rsquo;s client-side API <a href=\"https://docs.telerik.com/KENDO-UI/api/javascript/ui/editor\">here</a>.</p>"
        }
      },
      {
        "text": "RTL support",
        "url": "editor/right-to-left-support",
        "title": {
          "aspnet-core": "RTL support in $FRAMEWORK Editor"
        },
        "meta": {
          "aspnet-core": "With $FRAMEWORK Editor you can allow end users to edit HTML5 in a user-friendly way. Check out this demo to learn more about the RTL support in the component."
        },
        "group": "Accessibility and Internationalization",
        "description": {
          "aspnet-core": "<p>The Telerik Core Editor supports right-to-left languages and rendering. All you have to do is to register the <strong>kendo.rtl.min.css</strong> file (located at Kendo.Mvc.Examples\\Content\\web installation folder) and wrap the editor in a container element with <strong>k-rtl </strong>class set for it, as demonstrated in this example.</p> <p>More information on the right-to-left support of the components can be found in <a href=\"https://docs.telerik.com/kendo-ui/accessibility/supporting-rtl-languages\" target=\"_blank\">this topic</a>.</p>"
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "editor/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation in $FRAMEWORK Editor"
        },
        "meta": {
          "aspnet-core": "$FRAMEWORK Editor is another control that supports keyboard navigation. Check out the demo to learn how to implement it in your app."
        },
        "description": {
          "aspnet-core": "<p>This demo illustrates the keyboard support of Telerik Editor for ASP.NET Core, which provides access to the available editor&rsquo;s toolbar buttons without the need of using a mouse.</p> <p>Once the focus goes on the first toolbar button, you can focus the next one by pressing the Tab key. You can go back onto the previous tool by pressing Shift+Tab. To execute the command of the selected tool press the Enter key.</p> <p>Further details about the Keyboard, Section 508 and WAI-ARIA support of Telerik UI for $FRAMEWORK extensions can be found in the <a href=\"https://docs.telerik.com/kendo-ui/accessibility/accessibility-overview\">Accessibility Overview section</a> of the documentation.</p>"
        }
      }
    ],
    "category": "Editors"
  },
  {
    "text": "FileManager",
    "name": "filemanager",
    "api": "web/filemanager",
    "documentation": {
      "aspnet-core": "/html-helpers/data-management/filemanager"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/filemanager"
    },
    "spriteCssClass": "fileManagerIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "filemanager/index",
        "title": {
          "aspnet-core": "Demo and source code for  Telerik $FRAMEWORK FileManager"
        },
        "meta": {
          "aspnet-core": "See how the Telerik $FRAMEWORK FileManager control works and view the demo source code."
        },
        "description": {
          "aspnet-core": "<p>The <strong>Telerik $FRAMEWORK FileManager</strong> is a component, which allows you to manage the file system and to perform the most common folder/file operations. </p><p><strong>Key Features</strong></p><ul style=\"list-style-type: disc;\"><li>ContextMenu</li><li>Drag and Drop</li><li>Views</li><li>Navigation</li><li>PreviewPane</li><li>Search</li><li>Sort</li><li>Toolbar Commands</li><li>Accessibility</li></ul><p>Additional information about how to use the Telerik $FRAMEWORK FileManager widget can be found in <a href=\"https://docs.telerik.com/aspnet-core/html-helpers/data-management/filemanager/overview\" target=\"_blank\">this section</a> of the product documentation.</p>\n"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "FileManagerDataController.cs",
              "url": "~/Controllers/FileManager/FileManagerDataController.cs"
            }
          ]
        }
      },
      {
        "text": "Tag Helper",
        "url": "filemanager/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK FileManager Tag Helper sample"
        },
        "description": {
          "aspnet-core": "<p>This example shows how you can use the tag-helper for $FRAMEWORK FileManager.</p><p>Check the documentation to find out more about the syntax and common use cases - <a href=\"https://docs.telerik.com/aspnet-core/tag-helpers/data-management/filemanager/overview\" target=\"_blank\">Tag Helper of the Telerik FileManager for $FRAMEWORK</a></p>"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "FileManagerDataController.cs",
              "url": "~/Controllers/FileManager/FileManagerDataController.cs"
            }
          ]
        }
      },
      {
        "text": "Image Preview",
        "url": "filemanager/image-preview",
        "packages": [ "!online", "!jsp", "!php" ],
        "title": {
          "aspnet-core": "Teleik $FRAMEWORK FileManager Image Preview Demo | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates how images can be previewed with the FileManager widget"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "FileManagerDataController.cs",
              "url": "~/Controllers/FileManager/FileManagerDataController.cs"
            }
          ]
        }
      },
      {
        "text": "Templates",
        "url": "filemanager/templates",
        "title": {
          "aspnet-core": "Telerik $FRAMEWORK FileManager Templates Demo | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the FileManager templates functionality"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "FileManagerDataController.cs",
              "url": "~/Controllers/FileManager/FileManagerDataController.cs"
            }
          ]
        }
      },
      {
        "text": "Events",
        "url": "filemanager/events",
        "title": {
          "aspnet-core": "Teleik $FRAMEWORK FileManager Events Demo | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the FileManager events"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "FileManagerDataController.cs",
              "url": "~/Controllers/FileManager/FileManagerDataController.cs"
            }
          ]
        }
      },
      {
        "text": "API",
        "url": "filemanager/api",
        "title": {
          "aspnet-core": "Teleik $FRAMEWORK FileManager API methods Demo | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the API methods of the FileManager widget"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "FileManagerDataController.cs",
              "url": "~/Controllers/FileManager/FileManagerDataController.cs"
            }
          ]
        }
      },
      {
        "text": "RTL Support",
        "url": "filemanager/right-to-left-support",
        "title": {
          "aspnet-core": "Teleik $FRAMEWORK FileManager Right-to-left-support Demo | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the Right-to-left-support of the FileManager widget"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "FileManagerDataController.cs",
              "url": "~/Controllers/FileManager/FileManagerDataController.cs"
            }
          ]
        }
      },
      {
        "text": "Keyboard Navigation",
        "url": "filemanager/keyboard-navigation",
        "title": {
          "aspnet-core": "Teleik $FRAMEWORK FileManager Keyboard Navigation Demo | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the Keyboard navigation of the FileManager widget"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "FileManagerDataController.cs",
              "url": "~/Controllers/FileManager/FileManagerDataController.cs"
            }
          ]
        }
      }
    ],
    "category": "Data Management"
  },
  {
    "text": "Filter",
    "name": "filter",
    "api": "web/filter",
    "updated": true,
    "documentation": {
      "aspnet-core": "/html-helpers/data-management/filter"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/filter"
    },
    "spriteCssClass": "filterIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "filter/index",
        "title": {
          "aspnet-core": "Demo and source code for  Telerik $FRAMEWORK Filter"
        },
        "meta": {
          "aspnet-core": "See how the Telerik $FRAMEWORK Filter control works and view the demo source code."
        },
        "description": {
          "aspnet-core": "<p>The <strong>Kendo UI Filter</strong> control is a powerful component, which allows you to create a filter that can be used by the <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/data/datasource.html\" target=\"_blank\">Kendo DataSource</a>. It provides an intuitive UI and a variety of options about how to create the underlying filter expression. You can apply the filter to the datasource by clicking the built-in apply button or manually using the <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/ui/filter.html#methods-applyFilter\" target=\"_blank\">applyFilter</a> client-side method. The Filter supports editors customization in the form of templates. Each time the expression is changed you are notified by the <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/ui/filter.html#events-change\" target=\"_blank\">change</a> event thus allowing you to reapply it if needed. In order to better understand the structure of the filter expression the Filter has a preview functionality that visualizes the filter to be applied. </p>"
        }
      },
      {
        "text": "Tag Helper",
        "url": "filter/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Filter Tag Helper sample"
        },
        "description": {
          "aspnet-core": "<p>This example shows how you can use the tag-helper for $FRAMEWORK Filter.</p><p>Check the documentation to find out more about the syntax and common use cases - <a href=\"https://docs.telerik.com/aspnet-core/tag-helpers/data-management/filter/overview\" target=\"_blank\">Tag Helper of the Telerik Filter for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Custom Editors",
        "url": "filter/custom-editors",
        "title": {
          "aspnet-core": "$FRAMEWORK Filter control - Custom Editors"
        },
        "meta": {
          "aspnet-core": "In this demo you will see how to use custom editors for the $FRAMEWORK Filter."
        },
        "description": {
          "aspnet-core": "<p>In numerous scenarios there's a requirement to use a specific editor for a certain type of data across the entire application. Using a specific editor inside the Filter is possible by utilizing an editor template as showcased in this demo."
        }
      },
      {
        "text": "Persist state",
        "url": "filter/persist-state",
        "title": {
          "aspnet-core": "$FRAMEWORK Filter Persist State Demo"
        },
        "meta": {
          "aspnet-core": "This demo shows how setOptions and getOptions methods can manipulate the state of $FRAMEWORK Filter."
        },
        "description": {
          "aspnet-core": "<p>A common scenario is to save the user customization and settings when interacting with your app, and then restore them once he/she logs back at some point in the future.</p> <p>The Kendo UI Filter provides the ability to save and restore changes that were previously applied to its structure, using its <strong>getOptions</strong> and <strong>setOptions</strong> client-side methods. You can use these methods to store settings and when needed to restore them. To demonstrate this functionality, we use <strong>localStorage</strong> key/value pair to save and load the filter state.</p>"
        }
      },
      {
        "text": "Operators",
        "url": "filter/operators",
        "new": true,
        "title": {
          "aspnet-core": "$FRAMEWORK Filter Operators Demo"
        },
        "meta": {
          "aspnet-core": "This demo shows how to set operators per field or type and how to create a custom operator"
        },
        "description": {
          "aspnet-core": "<p>This example shows how to configure:</p><p>Custom operators per field. Customizing the operators is available via the <a href=\"https://docs.telerik.com/aspnet-core/api//Kendo.Mvc.UI.Fluent/FilterFieldBuilder#operatorssystemactionkendomvcuifluentfilteroperatorssettingsbuildert\" target=\"_blank\">fields.operators property.</a></p><p>Custom filter function so custom filter operations can be perfomed on the data.</p><p>For more information on the Filter widget refer to its <a href=\"https://docs.telerik.com/aspnet-core/html-helpers/data-management/filter/operators\" target=\"_blank\">documentation</a>.</p>"
        }
      }
    ],
    "category": "Data Management"
  },
  {
    "text": "Form",
    "name": "form",
    "api": "web/form",
    "new": true,
    "documentation": {
      "aspnet-core": "html-helpers/layout/form/overview"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/form"
    },
    "category": "Layout",
    "spriteCssClass": "dialogIcon",
    "items": [
      {
        "text": "Basic Usage",
        "url": "form/index",
        "title": {
          "aspnet-core": "Basic usage of the Telerik $FRAMEWORK Form Demo | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the basic usage of the $FRAMEWORK Form control"
        },
        "description": {
          "aspnet-core": "<p>The <strong>Telerik $FRAMEWORK Form</strong> is a component, which allows you to generate and manage forms.</p><p><strong>Key Features</strong></p><ul style=\"list-style-type: disc;\"><li>Build Custom Forms</li><li>Layout</li><li>Groups</li><li>Orientation</li><li>Validation</li><li>MVVM</li><li>Accessibility</li></ul><p>Additional information about how to use the $FRAMEWORK Form can be found in <a href=\"https://docs.telerik.com/aspnet-core/html-helpers/layout/form/overview\" target=\"_blank\">this section</a> of the product documentation.</p>\n"
        }
      },
      {
        "text": "Items",
        "url": "form/items",
        "title": {
          "aspnet-core": "Teleik $FRAMEWORK Form Items Demo | $FRAMEWORK Demos"
        },
        "packages": [ "!jsp", "!php" ],
        "meta": {
          "aspnet-core": "This example demonstrates how to define a collection of editor fields and build a custom form with the $FRAMEWORK Form."
        }
      },
      {
        "text": "Layout",
        "url": "form/layout",
        "title": {
          "aspnet-core": "Teleik $FRAMEWORK Form Layout Demo | $FRAMEWORK Demos"
        },
        "packages": [ "!jsp", "!php" ],
        "meta": {
          "aspnet-core": "This example demonstrates the Form layout options."
        }
      },
      {
        "text": "Groups",
        "url": "form/groups",
        "title": {
          "aspnet-core": "Teleik $FRAMEWORK Form Groups Demo | $FRAMEWORK Demos"
        },
        "packages": [ "!jsp", "!php" ],
        "meta": {
          "aspnet-core": "This example demonstrates the Form grouping capabilities."
        }
      },
      {
        "text": "Orientation",
        "url": "form/orientation",
        "title": {
          "aspnet-core": "Teleik $FRAMEWORK Form Orientation Demo | $FRAMEWORK Demos"
        },
        "packages": [ "!jsp", "!php" ],
        "meta": {
          "aspnet-core": "This example demonstrates the Form orientation options."
        }
      },
      {
        "text": "Validation",
        "url": "form/validation",
        "title": {
          "aspnet-core": "Teleik $FRAMEWORK Form Validation Demo | $FRAMEWORK Demos"
        },
        "packages": [ "!jsp", "!php" ],
        "meta": {
          "aspnet-core": "This example demonstrates validation of the Form."
        }
      },
      {
        "text": "API",
        "url": "form/api",
        "title": {
          "aspnet-core": "Teleik $FRAMEWORK Form API Demo | $FRAMEWORK Demos"
        },
        "packages": [ "!jsp", "!php" ],
        "meta": {
          "aspnet-core": "This example demonstrates the API methods of the Form."
        }
      }
    ]
  },
  {
    "text": "Grid",
    "name": "grid",
    "api": "web/grid",
    "updated": "true",
    "documentation": {
      "aspnet-core": "/html-helpers/data-management/grid/"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/grid"
    },
    "spriteCssClass": "gridIcon",
    "items": [
      {
        "text": "Overview",
        "url": "grid/index",
        "new":  true,
        "title": {
          "aspnet-core": " $FRAMEWORK Grid by Telerik control example | $FRAMEWORK Grid Overview"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "DetailProductViewModel.cs",
              "url": "~/Models/DetailProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "Try the $FRAMEWORK Grid by Telerik UI with 100+ ready-to-use features including everything from filtering and sorting data to pagination and hierarchy. In this demo for Kendo UI jQuery-powered Grid in you will see a mix of functionalities of the extension."
        },
        "description": {
          "aspnet-core": "<p>The <strong>Telerik Grid for $FRAMEWORK</strong> is a powerful data visualization and editing component, that exposes a plethora of functionalities and events that could be combined altogether. The Grid can be bound to various data sources and comes with built-in common features such as paging, sorting, filtering, or grouping and more advanced one such as hierarchy with aggregates, frozen columns, virtualization and endless scrolling, state management, binding to SignalR Hub and more!</p><p>In this demo, you can see the Grid with enabled paging, sorting, filtering, grouping, export to Excel, export to PDF, search panel, checkbox selection, aggregates, frozen columns, column menu, and using the template engine to customize the Grid appearance and incorporate external components such as Badge, Chart, Rating, and DropDownList.</p><strong>Telerik Grid Key Features</strong><ul style=\"list-style-type: disc;\"> <li>Responsive and Adaptive HTML 5 Rendering</li> <li>HTML and Tag Helper options</li> <li>Built-in options for paging, sorting, filtering and grouping functionalities</li> <li>Insert, update and delete of date from various data sources such as WebAPI, AJAX, GraphQL, SignalR etc.</li> <liUltimate performance with column and row virtual scrolling</li> <li>Column menu, resizing, reordering and show/hide Interactions</li> <li>Search panel</li> <li>Hierarchical grid and aggregates</li> <li>Selecting cells, rows, checkbox selection</li> <li>Full control over the layout presentations through the Grid templates (toolbar, row and detail templates)</li> <li>Frozen columns and multi-column headers</li> <li>Export to PDF and MS Excel</li> <li>Accessibility, Keyboard Navigation, Globalization and RTL Support</li><li>Server-Side and Client-Side API for Max Flexibility</li><li>Scaffolding in Visual Studio</li> </ul> <p>You can find additional information on how to use the $FRAMEWORK Grid <a href=\"https://www.telerik.com/aspnet-core/grid\">this section</a> of the product documentation.</p>"
        }
      },
      {
        "text": "Basic usage",
        "url": "grid/basic-usage",
        "title": {
          "aspnet-core": " $FRAMEWORK Grid by Telerik control example | $FRAMEWORK DataGrid Ajax binding"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ClientCategoryEditor.cshtml",
              "url": "~/Views/Shared/EditorTemplates/ClientCategoryEditor.cshtml"
            },
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "Try the $FRAMEWORK Grid by Telerik UI with 100+ ready-to-use features including everything from filtering and sorting data to pagination and hierarchy. In this demo for Kendo UI jQuery-powered Grid in you will see all basic functionalities of the extension."
        },
        "description": {
          "aspnet-core": "<p>The <strong>Telerik Grid for $FRAMEWORK</strong> is a powerful component, which allows you to visualize and edit data via its table representation. The DataGrid provides a variety of options about how to present and perform operations over the underlying data, such as paging, sorting, filtering, grouping, editing, exporting and many more. <br /> <br /> You can provide the data to the widget via the following built-in options or configure a custom data source if desired: <ul><li>View Model Binding (Local Binding)</li><li>AJAX binding - by setting a model type and performing AJAX requests to retrieve or update data</li><li>Web API</li><li>ASP.NET Core SignalR for push updates</li><br /> In this demo you can see how you can easily configure the grid to display data and perform sorting, paging and grouping operations via its built-in settings. </p> <p>You can find additional information on how to use the $FRAMEWORK Grid in <a href=\"https://docs.telerik.com/aspnet-core/html-helpers/data-management/grid/overview\" target=\"_blank\"> this section</a> of the product documentation.<br/></p>"
        }
      },
      {
        "text": "Tag Helper",
        "url": "grid/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Grid Tag Helper sample | $FRAMEWORK DataGrid by Telerik Tag Helper"
        },
        "description": {
          "aspnet-core": "<p>This example shows how you can use the tag-helper for $FRAMEWORK Grid by Telerik.</p><p>Check the documentation to find out more about the syntax and common use cases - <a href=\"https://docs.telerik.com/aspnet-core/tag-helpers/data-management/grid/overview\" target=\"_blank\">Tag Helper of the Telerik Grid for $FRAMEWORK</a></p> <p>To see all the available features of the gridview at a glance check the <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a> article.</p>"
        }
      },
      {
        "text": "Adaptive Rendering",
        "url": "grid/adaptive-rendering",
        "title": {
          "aspnet-core": " $FRAMEWORK Grid - Adaptive Rendering"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModelGridPopUp.cs",
              "url": "~/Models/ProductViewModelGridPopUp.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "In this demo you will see the adaptive rendering for ASP.NET Core jQuery-powered Grid in $FRAMEWORK."
        },
        "description": {
          "aspnet-core": "<p>You can enable the Adaptive Mobile Rendering for the Grid via a simple configuration setting. All you have to do is set its <b><a target=\"_blank\" href=\"https://docs.telerik.com/aspnet-core/api/Kendo.Mvc.UI.Fluent/GridBuilder#mobile\">mobile</a></b> attribute to <b>true</b>. This will make the column menu, filter menu and popup edit form slide in a new screen for the user. To force the mobile rendering, regardless of browser type, set the configuration to <b>phone</b>.</p><p>The column resizing feature on touch screen devices is triggered when the user holds a finger on the respective column header. When the resizing icon appears, the user can resize the column by dragging.</p><p>More information regarding Grid Adaptive Rendering can be found in the documentation <a target=\"_blank\" href=\"https://docs.telerik.com/aspnet-core/html-helpers/data-management/grid/appearance/adaptive\">here</a>.</p>\n"
        }
      },
      {
        "text": "Binding to local data",
        "url": "grid/local-data-binding",
        "title": {
          "aspnet-core": "Binding to local data in Telerik $FRAMEWORK Grid | DataGrid by Telerik for $FRAMEWORK - local binding"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This sample demonstrates how we can bind the Telerik for $FRAMEWORK Grid control to local JSON Data by using $FRAMEWORK DataSource component."
        },
        "group": "Data Binding",
        "description": {
          "aspnet-core": "<p>The Telerik Grid for $FRAMEWORK offers two ways of data-binding:</p><ul style=\"list-style-type: disc;\"><li>Ajax - the widget performs server-side requests when doing paging, sorting and filtering. In this mode the grid retrieves only the data (in JSON format) representing the current page. As a result only the grid is updated.</li><li>Client operations - set the DataSource <code><strong>ServerOperations(false)</strong></code> and allow the grid to perform all data operations on the client or pass the model via the view.</li></ul><p>In this demo you can see how to bind the DataGrid for $FRAMEWORK through a model passed by the View and perform all data operations on the client side.</p><p>To see all the available features of the gridview at a glance check the <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a> article.</p>"
        }
      },
      {
        "text": "Binding to remote data",
        "url": "grid/remote-data-binding",
        "title": {
          "aspnet-core": "Remote data binding example in the Telerik $FRAMEWORK Grid | AJAX binding example in the Telerik $FRAMEWORK GridView"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "GridController.cs",
              "url": "~/Controllers/Grid/IndexController.cs"
            },
            {
              "name": "OrderViewModel.cs",
              "url": "~/Models/OrderViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example and demo source code illustrate how the Telerik $FRAMEWORK Grid can be bound to remote data using the DataSource component."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Grid for $FRAMEWORK offers two general ways of data-binding:</p> <ul style=\"list-style-type: disc;\"><li>Ajax - the widget performs server-side requests when doing paging, sorting and filtering. In this mode the grid retrieves only the data (in JSON format) representing the current page. As a result only the grid is updated.</li><li>Client operations - set the DataSource <code><strong>ServerOperations(false)</strong></code> and allow the grid to perform all data operations on the client or pass the model via the view.</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP, OData or XML format, and utilize the DataSource as a mediator between the grid and the underlying data.</p><p>In this example the grid fetches its data from an MVC controller assigned via the DataSource read configuration. In addition to the visualization, the grid also provides built-in support for operations over data such as sorting, filtering and paging.</p><p>More about the <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Binding to Kinvey Backend Services",
        "url": "grid/kinvey",
        "title": {
          "aspnet-core": "Binding $FRAMEWORK Grid by Telerik to Kinvey Backend Services"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "Product.cs",
              "url": "~/Models/SamplesEntities/Product.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "In this sample you will see in action how Telerik $FRAMEWORK DataGrid is bound to Kinvey cloud-based services."
        },
        "description": {
          "aspnet-core": "<h4>What are the Kinvey Backend Services?</h4><p>Kinvey Backend Services are a set of cloud-based services that enable developers to build and manage mobile apps significantly faster, easier and in a more scalable way. Kinvey Backend Services can significantly speed-up development by providing your app with data storage, user management and server-code execution.</p><p style=\"padding-top: 1em;\">&raquo; <a class=\"hyperlink\" href=\"https://www.kinvey.com/\" title=\"Getting started with Kinvey Backend Services\">What are Kinvey Backend Services</a></p><p>&raquo; <a class=\"hyperlink\" href=\"https://devcenter.kinvey.com/html5/guides/getting-started\">Kinvey Backend Services HTML5 SDK</a></p><p>&raquo; <a class=\"hyperlink\" href=\"https://github.com/Kinvey/kinvey-kendo-data-source\" title=\"Introduction to Kendo UI and Kinvey Backend Services JavaScript integration\">Integration with Kendo UI</a></p><p class=\"demo-hint\" style=\"padding-top: 1em;\">Note: The Kinvey Backend Services data source is not supported on IE11 and below yet, because it relies on <a class=\"hyperlink\" href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\">cross-origin resource sharing</a>.</p><p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        },
        "packages": [ "!jsp", "!php" ]
      },
      {
        "text": "Binding to GraphQL Service",
        "url": "grid/graphql",
        "title": {
          "aspnet-core": "Binding the $FRAMEWORK Grid by Telerik to GraphQL Service"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "In this sample you will see in action how the Telerik $FRAMEWORK DataGrid is bound to a GraphQL service."
        },
        "description": {
          "aspnet-core": "<h4>What are the benefits of using a GraphQL service?</h4><p>A GraphQL service is served over HTTP through a single endpoint that responds using JSON and expresses the full set of capabilities of the API. The current example consumes data from an $FRAMEWORK GraphQL Service that is available for review in the below linked repository.</p> <p class=\"demo-hint\" style=\"padding-top: 1em;\"><a class=\"hyperlink\" href=\"https://github.com/telerik/kendo-ui-demos-service/tree/master/graphql/graphql-aspnet-core\">GraphQL Service Repository</a>.</p><p>More about the <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Binding to SignalR",
        "url": "grid/signalr",
        "title": {
          "aspnet-core": "Real-time Binding to $FRAMEWORK Grid by Telerik to a SignalR Hub | $FRAMEWORK Grid by Telerik with SignalR binding"
        },
        "meta": {
          "aspnet-core": "This example shows how the Telerik for $FRAMEWORK DataGrid can be bound to $FRAMEWORK SignalR Hub for real-time push notifications."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "SignalR_Chart.cshtml",
              "url": "~/Views/Grid/SignalR_Chart.cshtml"
            },
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "packages": [ "!jsp", "!php" ],
        "description": {
          "aspnet-core": "<p>This demo shows how the Telerik for $FRAMEWORK Grid can be bound to a <a href=\"https://docs.microsoft.com/en-us/aspnet/core/signalr/?view=aspnetcore-2.1\">SignalR</a> Hub for real-time push notifications. This is useful for web applications (chat, gaming and other apps) which require high-frequency updates where you usually want to perform grid updates in real-time on all connected clients.</p> <p>To configure the SignalR binding, set the <strong>SignalR</strong> and <strong>Transport</strong> settings in the Grid&rsquo;s DataSource configuration.&nbsp; In this way you instruct the data source to use SignalR protocol for transmitting and operating with data in real time.</p><p>More about the SignalR binding check the documentation for the Html Helper of the <a href=\"https://docs.telerik.com/aspnet-core/html-helpers/data-management/grid/binding/signalr-binding\">Telerik Grid for $FRAMEWORK</a><p>More about the <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p><p>The SignalR Hub service is available in this repository <a href=\"https://github.com/telerik/kendo-ui-demos-service/tree/master/signalr-hubs\">Kendo UI Demos Service</p>"
        }
      },
      {
        "text": "Custom ajax binding",
        "url": "grid/customajaxbinding",
        "packages": [ "!online", "!jsp", "!php" ],
        "description": {
          "aspnet-core": "<p>This demo shows how the Telerik for $FRAMEWORK Grid can retrieve a custom response when the use of the server-side extensions is not desired. The requests are sent in the expected format by the controller but the response is processed programmatically and the custom result data set is passed to grid. <p>More about the <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "Order.cs",
              "url": "~/Models/SamplesEntities/Order.cs"
            }
          ]
        }
      },
      {
        "text": "Custom data source",
        "url": "grid/custom-datasource",
        "packages": [ "!online", "!jsp", "!php" ],
        "description": {
          "aspnet-core": "<p>This demo shows how the Telerik for $FRAMEWORK Grid can be bound to a custom data source when none of the built-in types are suitable. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response. <p>More about the <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p><p>The service is available in this repository <a href=\"https://github.com/telerik/kendo-ui-demos-service\">Kendo UI Demos Service</p>"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "OData binding",
        "url": "grid/odata",
        "packages": [ "!online", "!jsp", "!php" ],
        "description": {
          "aspnet-core": "<p>This demo shows how the Telerik for $FRAMEWORK Grid can be bound to an oData service. By specifying the <code> .Type(\"odata\")</code> the requests will be sent to the oData endpoint in the expected format out of the box. <p>More about the <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "OrderViewModel.cs",
              "url": "~/Models/OrderViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Web API binding",
        "url": "grid/webapi",
        "packages": [ "!online", "!jsp", "!php" ],
        "description": {
          "aspnet-core": "<p>This demo shows how the Telerik for $FRAMEWORK Grid can be bound in Web API. By specifying the DataSource type as <code> .WebApi()</code> the requests will be sent to the Web API endpoints in the expected format out of the box. <p>More about the <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Export to Excel",
        "url": "grid/excel-export",
        "title": {
          "aspnet-core": "Exporting to MS Excel"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "Export the $FRAMEWORK Grid by Telerik as a Microsoft Excel file | Export to Excel - GridView for $FRAMEWORK by Telerik"
        },
        "group": "Exporting",
        "description": {
          "aspnet-core": "<p>This example shows how to enable the Export to Excel functionality of the Telerik for $FRAMEWORK Grid.<br/> You have to include the Excel toolbar command <code>.ToolBar(tools =&gt; <strong>tools.Excel()</strong>)</code> as well as specify the <strong>FileName</strong> export setting.</p><p>Alternatively, you could force the Excel export by invoking the <code><a href=\"https://docs.telerik.com/kendo-ui/api/javascript/ui/grid/methods/saveasexcel\" target=\"_blank\">saveAsExcel()</a></code> method from the Client-side API of the component. <br /> <br /> Yet another useful option is the ability to customize the grid&rsquo;s rows/columns and cells of the exported file by intercepting the <code><a href=\"https://docs.telerik.com/kendo-ui/api/javascript/ui/grid/events/excelexport\" target=\"_blank\">excelExport</a></code> event.</p><p>More about the <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Export to PDF",
        "url": "grid/pdf-export",
        "title": {
          "aspnet-core": "Exporting to PDF"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "Customer.cs",
              "url": "~/Models/SamplesEntities/Customer.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "Export the $FRAMEWORK DataGrid by Telerik to a PDF file | PDF Export of the $FRAMEWORK GridView by Telerik"
        },
        "description": {
          "aspnet-core": "<p>Nowadays, the PDF format is very popular and widely used to present documents in a manner independent of application software, hardware and operating systems. This demo shows how to export the Telerik for $FRAMEWORK Grid contents to PDF.</p> <p>The approach is very straight-forward - to export the grid content to PDF include the corresponding command to the toolbar of the grid <code>.ToolBar(tools =&gt; <strong>tools.Pdf()</strong>)</code>. For greater control over the output configure the PDF export setting. For instance, you can specify the file name and whether to export all pages, margins, paper size, font, etc. To initiate export programmatically, you can call the <code><a href=\"https://docs.telerik.com/kendo-ui/api/javascript/ui/grid/methods/saveaspdf\" target=\"_blank\">saveAsPdf()</a></code> method from the client-side API. <br /> <br /> Additionally, you can customize the appearance of the exported grid table by providing a template via the <code>.Pdf(pdf => pdf.TemplateId(\"page-template\"))</code> method. <p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Copy to Excel",
        "url": "grid/copy-to-excel",
        "title": {
          "aspnet-core": "Copy to Excel in $FRAMEWORK Grid | $FRAMEWORK DataGrid Copy to Excel"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "OrderViewModel.cs",
              "url": "~/Models/OrderViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "In this example we will learn how to enable the allowCopy option of $FRAMEWORK Grid by Telerik to allow copying data to Excel."
        },
        "description": {
          "aspnet-core": "<p>Being used to the copy-paste functionality available in MS Excel many users would want to copy grid cell content from web apps and paste them to MS Excel or some other file.</p> <p>With the Telerik for $FRAMEWORK Grid Html Helper this built-in functionality is supported by setting two configuration options:</p><p><code><strong>Selectable</strong> =&gt; Mode(GridSelectionMode.Multiple)</code> and <code><strong>AllowCopy</strong>(true)</code>.</p> As simple as that, your users will be able to utilize copy and paste between the browser and their apps.</p><p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Batch editing",
        "url": "grid/editing",
        "title": {
          "aspnet-core": "Batch editing functionality in Telerik $FRAMEWORK DataGrid | Batch editing in $FRAMEWORK GridView by Telerik"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "In this sample you can see the batch editing functionality of the Telerik $FRAMEWORK Grid."
        },
        "group": "Data Editing",
        "description": {
          "aspnet-core": "<p>A common scenario is to switch grid cells to edit mode by simply clicking on them, update the data on the client and then process all changes on the server in a single batch update.<br/><br/>This demo shows how this can be accomplished using the built-in batch create, update and destroy commands of the Telerik for $FRAMEWORK Grid.<br/><br/> To enable the batch data editing functionality:</p> <ul style=\"list-style-type: disc;\"> <li>Turn on the in-cell editing by setting:<code>.Editable(editable =&gt; editable.Mode(GridEditMode.InCell))</code></li><li>Add the Create, Cancel and SaveChanges buttons to the toolbar by setting: <code>.ToolBar(toolbar =&gt; { toolbar.Create(); toolbar.Save(); }</code></li><li>To enable the Delete command on each row insert a new column: <code>columns.Command(command =&gt; { command.Destroy(); });</code></li> <li>Set <code>.<strong>Batch</strong>(<strong>true</strong>)</code> and <code>.<strong>ServerOperation</strong>(<strong>false</strong>)</code> properties in the DataSource declaration to enable batch updates and perform the paging, sorting, filtering and grouping operations on the client.</li><li>Declare the <strong>Create</strong>, <strong>Read</strong>, <strong>Update</strong> and <strong>Destroy</strong> action methods in the DataSource. These methods are responsible for the data items manipulation.</li><li>Specify a unique field in the Model as the DataSource <strong>Model Id</strong></li></ul> <p>Once the cells are edited you have the option to process the changes or discard them. Click on a cell to place it in edit mode. Use the <strong>Save changes</strong> or <strong>Cancel changes</strong> buttons to process/discard all changes at once.</p><p>Check the documentation for step by step instructions on the<a href=\"https://docs.telerik.com/aspnet-core/html-helpers/data-management/grid/editing/batch\" target=\"_blank\">Telerik Grid for $FRAMEWORK Batch Editing</a></p><p>More about the<a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Batch editing OData-v4",
        "url": "grid/odatav4",
        "title": {
          "aspnet-core": "Batch editing functionality using OData-v4 service in Telerik for $FRAMEWORK Grid"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewODataModel.cs",
              "url": "~/Models/ProductViewODataModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This sample demonstrates the batch editing functionality of the Telerik for $FRAMEWORK Grid using an oData v-4 service."
        },
        "description": {
          "aspnet-core": "<p>A common scenario is to switch grid cells in edit mode by simply clicking on them, update the data on the client and then process all changes on the server in a single batch update.<br/><br/> This demo shows how this can be accomplished using the built-in batch create, update and destroy commands of the Telerik for $FRAMEWORK Grid.<br/> <br/> To enable the batch data editing functionality:</p> <ul style=\"list-style-type: disc;\"> <li>Turn on the in-cell editing by setting:<code>.Editable(editable =&gt; editable.Mode(GridEditMode.InCell))</code></li><li>Add the Create, Cancel and SaveChanges buttons to the toolbar by setting: <code>.ToolBar(toolbar =&gt; { toolbar.Create(); toolbar.Save(); }</code></li><li>To enable the Delete command on each row insert a new column: <code>columns.Command(command =&gt; { command.Destroy(); });</code></li> <li>Set <code>.<strong>Batch</strong>(<strong>true</strong>)</code> and <code>.<strong>ServerOperation</strong>(<strong>false</strong>)</code> properties in the DataSource declaration to enable batch updates and perform the paging, sorting, filtering and grouping operations on the client.</li><li>Declare the <strong>Create</strong>, <strong>Read</strong>, <strong>Update</strong> and <strong>Destroy</strong> action methods in the DataSource. These methods are responsible for the data items manipulation.</li><li>Specify a unique field in the Model as the DataSource <strong>Model Id</strong></li></ul> <p>Once the cells are edited you have the option to process the changes or discard them. Click on a cell to place it in edit mode. Use the <strong>Save changes</strong> or <strong>Cancel changes</strong> buttons to process/discard all changes at once.</p><p>Check out the Kendo UI <a class=\"hyperlink\" href=\"https://github.com/telerik/kendo-ui-demos-service/tree/master/odata-v4\" target=\"_blank\">oData-v4 Service Repository</a></p><p>More about the<a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Inline editing",
        "url": "grid/editing-inline",
        "title": {
          "aspnet-core": "Applying inline editing in Telerik $FRAMEWORK Grid | Enable inline editin in the $FRAMEWORK DataGrid by Telerik"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "See how the values in the cells of Telerik $FRAMEWORK Grid can be easily changed. Try the demo source code to find how inline data grid can be deleted and modified."
        },
        "description": {
          "aspnet-core": "<p>A common scenario is to toggle a grid cell into edit mode by simply clicking on the Edit row button, update the data inside the cell and save/discard the changes using the Update/Cancel buttons.<br /><br /> This demo shows how inline editing can be achieved using the data operations (create, update and destroy) of the Telerik fro $FRAMEWORK Grid.<br /><br /> All you have to do to enable the inline editing capabilities of the $FRAMEWORK Grid is:</p> <ul> <li>Set: <code>.Editable(editable =&gt; editable.Mode(GridEditMode.InLine))</code></li><li>To enable insertion of new records add the New Record button on the toolbar by adding: <code>.ToolBar(toolbar =&gt; toolbar.Create())</code></li> <li>To enable the Edit and Delete commands on each row, insert a new column: <code>columns.Command(command =&gt; { command.Edit(); command.Destroy(); });</code></li> <li>Define the <strong>Create</strong>, <strong>Read</strong>, <strong>Update</strong> and <strong>Destroy</strong> action methods to the DataSource declaration. These methods are responsible for the data items manipulation.</li><li>Specify a unique field in the Model as the <strong>DataSource Model Id</strong></li> </ul><p>More about the <a href=\"https://docs.telerik.com/aspnet-core/html-helpers/data-management/grid/editing/inline\">Telerik Grid for $FRAMEWORK Inline Editing</a></p><p>More about the <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Popup editing",
        "url": "grid/editing-popup",
        "title": {
          "aspnet-core": "Popup data editing example for Telerik $FRAMEWORK Grid"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModelGridPopUp.cs",
              "url": "~/Models/ProductViewModelGridPopUp.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "In this sample you can see the popup editing functionality of Telerik for $FRAMEWORK Grid in action | Enable popup editing in the $FRAMEWORK Grid by Telerik"
        },
        "description": {
          "aspnet-core": "<p>In various scenarios there is a requirement to not only visualize tabular data, but also allow the ability to the edit the rows content in a popup edit form. In this demo you can edit or insert new items via a popup window by configuring the Telerik for $FRAMEWORK Grid as follows:</p> <ul> <li>Activate the popup editing by setting: <code>.Editable(editable =&gt; editable.Mode(GridEditMode.PopUp))</code></li> <li>To enable insertion of new records add the New Record button on the toolbar: <code> .ToolBar(toolbar =&gt; toolbar.Create())</code></li> <li>To enable the Edit and Delete commands on each row insert a new column: <code>columns.Command(command =&gt; { command.Edit(); command.Destroy(); });</code></li> <li>Declare the <strong>Create</strong>, <strong>Read</strong>, <strong>Update</strong> and <strong>Destroy</strong> action methods in the DataSource. These methods are responsible for the data items manipulation.</li><li>Specify a unique field in the Model as the DataSource.Model.Id</li> </ul><p>More about the <a href=\"https://docs.telerik.com/aspnet-core/html-helpers/data-management/grid/editing/popup\">Telerik Grid for $FRAMEWORK Popup Editing</a></p><p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Editing custom editor",
        "url": "grid/editing-custom",
        "sources": {
          "aspnet-core": [
            {
              "name": "ClientCategory.cshtml",
              "url": "~/Views/Shared/EditorTemplates/ClientCategory.cshtml"
            },
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "title": {
          "aspnet-core": "$FRAMEWORK Grid by Telerik Custom Editing | UI for $FRAMEWORK DataGerid Custom editors"
        },
        "meta": {
          "aspnet-core": "This example illustrates how editing in Telerik $FRAMEWORK Grid can be further customized with the custom editor."
        },
        "description": {
          "aspnet-core": "<p>In numerous scenarios there is a requirement to not only visualize data in a table structure, but also to have the ability to manipulate it and save the changes.</p> <p>The Core Grid wrapper supports CRUD data editing operations via a simple configuration of its data source. All you have to do to enable its data editing capabilities is to:</p> <ul><li>Set the grid's <strong>editable </strong>configuration option: <code>.Editable(editable =&gt; editable.Mode(GridEditMode.InCell))</code></li><li>Specify a unique field in the Model as the DataSource Model Id</li><li>Configure the DataSource for performing CRUD data operations defining its <strong>Read, Create, Update and Destroy</strong> actions</li> <li>To enable insertion of new records add the New Record button on the toolbar: <code> .ToolBar(toolbar =&gt; toolbar.Create())</code></li> <li>To enable the Delete command on each row insert a new column: <code>columns.Command(command =&gt; { command.Destroy(); });</code></li></ul><p> In this demo you can see how to further customize the editor for the Category field which is an object(a complex type). To make sure the $FRAMEWORK Grid uses the custom editor, add in the <strong>~Views\\Shared\\EditorTemplates</strong> folder. <p> Sample declaration: <code>@(Html.Kendo().DropDownListFor(m => m)</code> <p> So the grid invokes the editor, decorate the model property with the <strong>UIHint</strong> attribute </p><div><code>[UIHint(\"ClientCategory\")]</code></div><div><code> public CategoryViewModel Category { get; set;}</code></div> <p> <p>  Specify a default value that will be used initially when creating an item: <div><code>model.Field(p => p.Category).DefaultValue(ViewData[\"defaultCategory\"] as Kendo.Mvc.Examples.Models.CategoryViewModel);</code></div></br></br><p>More about the Custom Editors in the <a href=\"https://docs.telerik.com/aspnet-core/html-helpers/data-management/grid/templates/editor-templates\">Telerik Grid for $FRAMEWORK</a></p><p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Custom validator editing",
        "url": "grid/editing-custom-validation",
        "title": {
          "aspnet-core": "Custom Validation example for the Telerik $FRAMEWORK Grid"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CustomValidationProductViewModel.cs",
              "url": "~/Models/CustomValidationProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example demonstrates how to implement a custom validation rule in a Telerik $FRAMEWORK Grid."
        },
        "description": {
          "aspnet-core": "<p>In numerous scenarios there is a requirement to not only visualize data in a table structure, but also to edit and validate it before save changes.</p> <p>The Telerik for $FRAMEWORK DataGrid helper supports CRUD data editing operations via a simple configuration of its data source. All you have to do to enable its data editing capabilities is to:</p> <ul><li>Set the grid's <strong>editable </strong>configuration option: <code>.Editable(editable =&gt; editable.Mode(GridEditMode.InLine))</code></li><li>Specify a unique field in the Model as the DataSource Model Id</li><li>Configure the DataSource for performing CRUD data operations defining its <strong>Read, Create, Update and Destroy</strong> actions</li><li>To enable the Edit command on each row insert a new column: <code>columns.Command(command =&gt; { command.Edit(); });</code></li></ul><p>When the $FRAMEWORK Grid is put in edit mode, a Kendo UI Validator is automatically enabled and ready to apply rules to the currently edited model or field in accordance with the HTML attributes in the form. The validation rules which are part of $FRAMEWORK will be automatically inserted as attributes from the CustomValidationProductViewModel - such as the <strong>[Required]</strong> attribute. However, when a special rule is required, use the approach as shown in the script below.</p><p> In this demo you can see how to extend the built-in Kendo UI Validator with a custom rule. <p>The sample demonstrates a check for the first capital letter for the ProductName column, when you edit the value in it.</p><br/><br/><p>More about the <a href=\"https://docs.telerik.com/kendo-ui/controls/editors/validator/overview\" target=\"_blank\"> client-side Kendo UI Validator</a></p><p>More about the<a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Virtualization of remote data",
        "url": "grid/virtualization-remote-data",
        "title": {
          "aspnet-core": "Virtualization of remote data in the $FRAMEWORK Grid"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "OrderViewModel.cs",
              "url": "~/Models/OrderViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo illustrates the virtualization of remote data in the $FRAMEWORK Grid."
        },
        "group": "Scrolling",
        "description": {
          "aspnet-core": "<p>The virtualization feature of the Telerik for $FRAMEWORK Grid allows you to handle large amount of data without negatively impacting the user experience and the browser performance.<br/><br/>You can enable the virtual scrolling via the <strong><code>.Scrollable(scrollable =&gt; scrollable.Virtual(true))</code></strong> configuration setting, which shows a vertical scrollbar for the grid content and renders only the number of items set via the <strong><code>PageSize()</code></strong> setting of the gridview data source. After you drag the scrollbar and the <strong>PageSize</strong> parameter value is exceeded, it makes automatic requests to retrieve and render the next set of grid rows.</p></br><p>More about the scrolling feature of the <a href=\"https://docs.telerik.com/aspnet-core/html-helpers/data-management/grid/scrolling/overview\" target=\"_blank\">Telerik Grid for $FRAMEWORK</a></p><p>More about the <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Column virtualization",
        "url": "grid/column-virtualization",
        "title": {
          "aspnet-core": "Column virtualization in the $FRAMEWORK Grid"
        },
        "meta": {
          "aspnet-core": "This demo illustrates the column virtualization capabilities of the $FRAMEWORK Grid."
        },
        "description": {
          "aspnet-core": "<p>There are cases when you may need to operate with large amount of columns in the grid, and displaying them at once would impose a performance penalty due to limited browser resources. </p> <p>Luckily, the $FRAMEWORK Grid has a solution called column virtualization that alleviates any slowdowns when operating with huge volumes of columns. When enabled via the <strong><code>.Scrollable(scrollable =&gt; scrollable.Virtual(GridVirtualizationMode.Columns))</code></strong> configuration option, it displays only a number of all the columns. When scrolling is performed the visual subset of columns is changed accordingly. </p> <p>The column virtualization can be used with the row virtualization thus increasing the performance substantially</p> <p>&nbsp;</p><p>More about the <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Endless scrolling of remote data",
        "url": "grid/endless-scrolling-remote",
        "title": {
          "aspnet-core": "Endless Scrolling of remote data in the $FRAMEWORK Grid by Telerik"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "Remote Data Endless Scrolling in the $FRAMEWORK GridView by Telerik"
        },
        "description": {
          "aspnet-core": "<p>The endless scrolling functionality enables the DataGrid for $FRAMEWORK to display large amounts of data by appending additional pages of data on demand. Loading of new items happens when the scrollbar of the Grid reaches its end. When the data is returned, only the new items will be rendered and appended to the old ones.</p><p>Grid infinite scrolling works with local and remote data. This demo presents binding Grid to remote data. In this scenario only the first page of data is serialized and rendered on the client. When the user reaches the end of the list, an Ajax request is made to fetch the next portion of data.</p><p>The endless scroll is compatible with <strong>Grouping</strong>, <strong>Hierarchy</strong> and <strong>Editing</strong>.</p></br><p>More about the scrolling feature of the <a href=\"https://docs.telerik.com/aspnet-core/html-helpers/data-management/grid/scrolling/overview\" target=\"_blank\">Telerik Grid for $FRAMEWORK</a></p><p>More about the <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Group paging of remote data",
        "new": true,
        "url": "grid/grouppaging",
        "title": {
          "aspnet-core": "Group paging of remote data in the $FRAMEWORK Grid"
        },
        "meta": {
          "aspnet-core": "This demo illustrates the group paging feater of the $FRAMEWORK Grid."
        },
        "group": "Functionality",
        "description": {
          "aspnet-core": "<p>The group paging feature of the Telerik for $FRAMEWORK Grid allows you to page through groups and load the group items on demand. Loading of the group items happens when a group is expanded. Group paging works with both local and remote data. This demo presents a remotly bound Grid with virtualization and enabled GroupPaging.</p>"
        }
      },
      {
        "text": "Frozen columns",
        "url": "grid/frozen-columns",
        "title": {
          "aspnet-core": "Frozen columns demo in Telerik $FRAMEWORK Grid "
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "Order.cs",
              "url": "~/Models/SamplesEntities/Order.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "Frozen columns functionality of the Telerik $FRAMEWORK Grid. | Locked columns of the Telerik $FRAMEWORK DataGrid."
        },
        "description": {
          "aspnet-core": "<p>There are scenarios in which you might be required to display a large number of grid columns on limited screen space, and making a small subset of them static when scrolling the rest horizontally to bring them in the viewable area. The concept of frozen columns is well known from MS Excel, and many users would like to utilize it in a web environment, too.</p><p>The Telerik for $FRAMEWORK GridView supports locked/frozen columns by a single configuration setting. Simply set the <strong><code>.Locked(true)</code></strong> boolean setting of the corresponding column and this will bring the column in the locked columns group positioned on the left in the $FRAMEWORK grid. Here the locked columns are Order ID and Ship Name, while the rest of the columns can be scrolled horizontally.</p><p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Filter row",
        "url": "grid/filter-row",
        "title": {
          "aspnet-core": "Filter row in the $FRAMEWORK Grid by Telerik | $FRAMEWORK Web GridView Filter Row Demo"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "OrderViewModel.cs",
              "url": "~/Models/OrderViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "In this example we will learn how to enable the filter row of the $FRAMEWORK Grid by Telerik."
        },
        "group": "Filtering",
        "description": {
          "aspnet-core": "<p>You can see in this demo how you can enable filter row in the header by setting the grid's <strong>Filterable</strong>-&gt;<strong>Mode</strong> property to <strong>Row</strong>: <pre>.Filterable(ftb =&gt; ftb.Mode(GridFilterMode.Row))</pre>Therefore, based on the data type of the underlying columns data, the grid will render textboxes for string values, numeric text boxes or date pickers for filtering in the column headers.</p> <p>Additionally, you can specify a default filter operator to be applied when the user enters some value in the filter textbox and presses <span class=\"key-button\">Tab</span> or <span class=\"key-button\">Enter</span>. This can be done using the <code>.Filterable(ftb => ftb.Cell(cell => cell.Operator(\"contains\")</code> attribute of the corresponding column, as shown for the Ship Name and Freight columns.</p><br><p>More about the filterable feature of the <a href=\"https://docs.telerik.com/aspnet-core/html-helpers/data-management/grid/filtering\" target=\"_blank\">Telerik Grid for $FRAMEWORK</a></p><p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Filter Multi Checkboxes",
        "url": "grid/filter-multi-checkboxes",
        "title": {
          "aspnet-core": "Filter multi-check in the $FRAMEWORK Grid | $FRAMEWORK DataGrid by Telerik multi-filter checkbox Demo"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "In this example we will learn how to enable the filter multi-check of the $FRAMEWORK GridView by Telerik."
        },
        "description": {
          "aspnet-core": "<p>You can enable the filter multi-check in the filter menu of the $FRAMEWORK Grid HtmlHelper by specifying <code>Filterable(ftb =&gt; ftb.Multi(true)</code> setting for the relevant grid columns.</p> <p>In addition, you could customize the checkbox filter menu by combining the filter with an <code>ItemTemplate(\"itemTemplate\")</code> definition as it is done with the Country column in the bottom grid.</p><p>The <code>.Filterable.Search(true);</code> setting renders a searchbox in the filter multi-check menu so the checkboxes data source can be filtered.</p><p>More about the filterable feature of the <a href=\"https://docs.telerik.com/aspnet-core/html-helpers/data-management/grid/filtering\" target=\"_blank\">Telerik Grid for $FRAMEWORK</a></p><p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Filter menu customization",
        "url": "grid/filter-menu-customization",
        "title": {
          "aspnet-core": "Filter menu customization in the $FRAMEWORK Grid by Telerik | Telerik for $FRAMEWORK Grid Filter Menu Demo"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeViewModel.cs",
              "url": "~/Models/EmployeeViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "In this example you will learn how to customize the filter menu of the Telerik for $FRAMEWORK DataGrid."
        },
        "description": {
          "aspnet-core": "<p>You can see in this demo how to apply common settings for the Telerik $FRAMEWORK Grid filter menu configuration, and customize its user interface.</p>To begin we should specify a single filter criterion using the <code>Filterable=&gt;Extra(false)</code> setting, and limit the filter operators for string columns to &ldquo;Starts with&rdquo;, &ldquo;Is equal to&rdquo; and &ldquo;Is not equal to&rdquo;. After that we provide the custom filterable UI by referencing the name of the JavaScript function which initializes it. A Kendo UI AutoComplete and a DropDownList for the Title and City columns, respectively.<pre>.Filterable(filterable => filterable.UI(\"cityFilter\"))</pre><p>More about the filterable feature of the <a href=\"https://docs.telerik.com/aspnet-core/html-helpers/data-management/grid/filtering\" target=\"_blank\">Telerik Grid for $FRAMEWORK</a></p><p>More about the <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Sorting",
        "url": "grid/sorting",
        "title": {
          "aspnet-core": "Sorting in the Telerik for $FRAMEWORK Grid"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "OrderViewModel.cs",
              "url": "~/Models/OrderViewModel.cs"
            }
          ]
        },
        "group": "Functionality",
        "meta": {
          "aspnet-core": "This demo shows how to sort data in the Telerik for $FRAMEWORK Grid. Use the demo source code to look into the logic of grid sorting and easily implement it in your app."
        },
        "description": {
          "aspnet-core": "You can learn in this sample how to enable sorting for the Telerik for $FRAMEWORK Grid. Since this functionality is built-in, all you have to do is to set the sorting configuration via the <strong><code>.Sortable()</code></strong>method. The supported sorting modes are single and multiple and can be specified through the <strong>SortMode</strong> method by passing a <code>GridSortMode</code> - <code>SingleColumn</code> or <code>MultipleColumn</code>.<pre>.Sortable(sortable => sortable.SortMode(GridSortMode.MultipleColumn)</pre>More about the sorable feature of the <a href=\"https://docs.telerik.com/aspnet-core/html-helpers/data-management/grid/sorting\" target=\"_blank\">Telerik Grid for $FRAMEWORK</a></p><p>More about the <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a>"
        }
      },
      {
        "text": "Search Panel",
        "url": "grid/search-panel",
        "title": {
          "aspnet-core": "Telerik Grid for $FRAMEWORK - Search Panel Demo"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "Customer.cs",
              "url": "~/Models/SamplesEntities/Customer.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "Get started with the Telerik Grid for $FRAMEWORK supporting searching inside the grid data."
        },
        "description": {
          "aspnet-core": "<p>There are situations when you would like to enable the end user to search inside the grid cells for a given value. The Kendo UI grid supports such searching by adding a <strong>search</strong> command inside the grid toolbar. Additionally one can configure which fields will be included in the searching using the Search builder as shown below: <p>.ToolBar(t => t.Search())</br>.Search(search=> { search.Field(f => f.CompanyName); })</p> More information about the <a href=\"https://docs.telerik.com/aspnet-core/html-helpers/data-management/grid/search-panel\" target=\"_blank\">search</a> functionality of the grid."
        }
      },
      {
        "text": "Selection",
        "url": "grid/selection",
        "title": {
          "aspnet-core": "Multiple row and cell selection in the Telerik Grid for $FRAMEWORK"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "OrderViewModel.cs",
              "url": "~/Models/OrderViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo illustrates how you can use Telerik for $FRAMEWORK DataGrid with multiple row or cell selection enabled."
        },
        "description": {
          "aspnet-core": "There are situations when you&rsquo;d like to enable your users to select rows or cells in the grid table, and process data from them or make calculations based on this selection. The Telerik for $FRAMEWORK Grid supports selection by specifying its configuration through its Selectable Configurator: <pre>.Selectable(selectable =&gt; selectable.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Cell))</pre> <p>The accepted values for Mode are <strong>Single</strong><strong> </strong>and<strong> Multiple</strong> while these for Type are <strong>Cell</strong> and <strong>Row</strong>.</p><p>Additionally, you can persist the row selection after data operations by using the <code>PersistSelection(true)</code> method.</p><p>More about the selectable feature of the <a href=\"https://docs.telerik.com/aspnet-core/html-helpers/data-management/grid/selection\" target=\"_blank\">Telerik Grid for $FRAMEWORK</a></p><p>More about the <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Checkbox selection",
        "url": "grid/checkbox-selection",
        "title": {
          "aspnet-core": "Checkbox selection in the Telerik for $FRAMEWORK GridView"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "In this example we will learn how to enable the built-in checkbox column and selection persistence of the $FRAMEWORK Grid by Telerik."
        },
        "description": {
          "aspnet-core": "<p> To enable the checkbox selection functionality you should define a select column as shown below:</p> <p><code>.Columns(columns => { columns.Select(); })</code></p><p>This column allows you to select grid rows automatically after changing the status of the checkbox to checked. A checkbox is also displayed in the column header to toggle the checked/selected state of all rows in the current page.</p> <p>Additionally in the demo you can see how to persist selected items across pages. This is achieved by using the <code>PersistSelection(true)</code> method.</p></br><p>More about the selectable feature of the <a href=\"https://docs.telerik.com/aspnet-core/html-helpers/data-management/grid/selection\" target=\"_blank\">Telerik Grid for $FRAMEWORK</a></p><p>More about the <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Aggregates",
        "url": "grid/aggregates",
        "title": {
          "aspnet-core": "Aggregating option demo for the Telerik for $FRAMEWORK Grid"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example demonstrates the aggregate option of the Telerik for $FRAMEWORK Grid. Use the demo source code to enable the $FRAMEWORK GridView to calculate aggregated values."
        },
        "description": {
          "aspnet-core": "<p>In some situations when displaying numbers in the grid, users would like to be able to see the results from aggregate calculations at the bottom of the grid groups or columns.</p>This is a easy with the $FRAMEWORK Grid since it offers built-in support for the most popular aggregate functions: <strong>Average</strong>, <strong>Count</strong>, <strong>Sum</strong>, <strong>Min</strong>, <strong>Max</strong> and <strong>Count</strong>. All you need to do is define the aggregates via the <strong>Group</strong> and <strong>Aggregates</strong> fields of its DataSource instance and access them in the client templates. <pre>Columns.ClientGroupHeaderColumnTemplate().ClientFooterTemplate().ClientGroupFooterTemplate()</pre>Please check the <a href=\"https://docs.telerik.com/aspnet-core/html-helpers/data-management/grid/templates/group-templates\" target=\"_blank\">Group Templates</a> article to learn more about different types of group templates available for the Telerik $FRAMEWORK Grid.<p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Paging",
        "url": "grid/paging",
        "packages": [ "!online", "!jsp", "!php" ],
        "title": {
          "aspnet-core": "Paging options demo for the Telerik for $FRAMEWORK Grid"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "OrderViewModel.cs",
              "url": "~/Models/OrderViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example demonstrates most of the pageable configurable options of the Telerik for $FRAMEWORK Grid. Use the demo source code to enable the $FRAMEWORK GridView pager options of your preference."
        },
        "description": {
          "aspnet-core": "<p>To see the different paging options in action, select the desired checkboxes and press the <strong>Apply</strong> button. The $FRAMEWORK Grid pager features:</p><ul><li>Page sizes drop down list</li><li>Input for the pager so the users can enter the desired page to navigate to</li><li>Numeric pages - buttons with numbers which represent each page</li><li>Previous and next buttons</li><li>A refresh button</li><li>Templates for the selected and number page links</li><li>HTML attributes necessary for accessible usage.</li></br><p>Please check the <a href=\"https://docs.telerik.com/aspnet-core/html-helpers/data-management/grid/paging\" target=\"_blank\">Paging</a> article to learn more about the different paging settings available for the Telerik $FRAMEWORK Grid.</p><p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Pager Visibility",
        "url": "grid/pager-visibility",
        "title": {
          "aspnet-core": "$FRAMEWORK Grid by Telerik Pager Visibility Demo"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how to configure the $FRAMEWORK Grid to hide the pager when total amount of items are less than the pageSize."
        },
        "description": {
          "aspnet-core": "<p>It often turns out that all items in the $FRAMEWORK Grid can fit into a single page and then showing the pager might not be necessary.</p><p>The Telerik for $FRAMEWORK DataGrid toggles the pager visibility using the <code>.Pageable(pager=&gt;pager.AlwaysVisible(true))</code> method. By default the gridview will show the pager even when the total amount of items in the DataSource is less than the PageSize.</p><p> If value is set to <strong>false</strong> the behavior will be as follows:</p><ul><li>When the total amount of items initially set in the DataSource is less than the PageSize number the pager will be hidden.</li><li>When the total amount of items initially set in the DataSource is greater than or equal to the PageSize number the pager will be shown.</li><li>When the total amount of items in the DataSource becomes less than the PageSize number (after delete, filter operation or PageSize change) the pager will be hidden.</li><li>When the total amount of items in the DataSource becomes greater than or equal to the PageSize number (after an insert, filter operation or PageSize change) the pager will be shown.</li></ul><p>In the demo alwaysVisible checkbox enables/disables the pageable.alwaysVisible option for the grid.</p><p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Hierarchy",
        "url": "grid/hierarchy",
        "title": {
          "aspnet-core": "Hierarchical $FRAMEWORK Grid | UI for $FRAMEWORK Demo - DataGrid Hierarchy"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeViewModel.cs",
              "url": "~/Models/EmployeeViewModel.cs"
            },
            {
              "name": "OrderViewModel.cs",
              "url": "~/Models/OrderViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo illustrates the hierarchical DataGrid feature of the Telerik $FRAMEWORK Grid component. Try the demo source code with the grid in your web app."
        },
        "description": {
          "aspnet-core": "<p>There are projects which require to display table data in hierarchical-like fashion, in order to visualize relations between parent and child records.<br/><br/> This is where the Telerik $FRAMEWORK DataGrid hierarchy feature comes in handy. To implement hierarchy with the Telerik for $FRAMEWORK DataGrid, you need to:</p> <ul> <li>Set the <code>ClientDetailTemplateId</code> which specifies the id of the script element containing the client-side detail template of the $FRAMEWORK Grid by Telerik</li><li>Define the script tag content that will be shown when the user expands the datagrid rows</li> </ul></br><p>More about the hierarchy templates of the <a href=\"https://docs.telerik.com/aspnet-core/html-helpers/data-management/grid/templates/client-detail-template\" target=\"_blank\">Telerik Grid for $FRAMEWORK</a></p><p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Persist state",
        "url": "grid/persist-state",
        "title": {
          "aspnet-core": "$FRAMEWORK Grid Persist State Demo"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CustomerViewModel.cs",
              "url": "~/Models/CustomerViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how setOptions and getOptions methods can manipulate the state of $FRAMEWORK Grid widget."
        },
        "description": {
          "aspnet-core": "<p>A common scenario is to save the user customization and settings when interacting with your app and then restore them once he/she logs back at some point in the future.</p> <p>The Telerik for $FRAMEWORK GridView provides the ability to save and restore changes that were previously applied to its settings, using its <code><a href=\"https://docs.telerik.com/kendo-ui/api/javascript/ui/grid/methods/getoptions\" target=\"_blank\">getOptions()</a></code> and <code><a href=\"https://docs.telerik.com/kendo-ui/api/javascript/ui/grid/methods/setoptions\" target=\"_blank\">setOptions()</a></code> client-side methods. You can use these methods to store settings like grouping, paging, sorting, filtering and when needed to restore them. To demonstrate this functionality, we use <code>localStorage</code> key/value pair to save and load the grid state.</p></br><p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Responsive Columns",
        "url": "grid/responsive-columns",
        "title": {
          "aspnet-core": "$FRAMEWORK Grid Responsive Columns Demo"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "Customer.cs",
              "url": "~/Models/SamplesEntities/Customer.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how to configure the $FRAMEWORK Grid to control the visibility of the columns by using their media property."
        },
        "description": {
          "aspnet-core": "<p>To control the visibility of the columns, use their <a target=\"_blank\" href=\"https://docs.telerik.com/kendo-ui/api/javascript/ui/grid/configuration/columns.media\">media</a> property. The property accepts valid strings for the <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia\">matchMedia</a> browser API and toggles the visibility of the columns based on the media queries.</p><p>More about the <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Toolbar template",
        "url": "grid/toolbar-template",
        "group": "Templates",
        "title": {
          "aspnet-core": "Toolbar templates for Telerik $FRAMEWORK Grid"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This Telerik for $FRAMEWORK Grid example shows how you can add custom toolbars to the grid and create toolbar templates."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK Grid component exposes an option to define a content template for its toolbar.</p> <p>Here you can see a sample implementation of a toolbar template incorporating a dropdownlist HtmlHelper to list the records in the $FRAMEWORK Grid by category. The dropdownlist is populated with the list of categories and the filter is applied on its change event by invoking the <code><a href=\"https://docs.telerik.com/kendo-ui/api/javascript/data/datasource/methods/filter\" target=\"_blank\">grid.dataSource.filter()</a></code> method from the data source client-side API.</p> <p>Note that the toolbar template is instantiated by the <code>.ToolBar(toolbar => { toolbar.ClientTemplateId(\"GridToolbarTemplate\");}) </code> method. The method expects the id of the script element which holds the client template as a string parameter.</br></p><p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Row template",
        "url": "grid/rowtemplate",
        "title": {
          "aspnet-core": "Row Template for the Telerik $FRAMEWORK Grid"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeViewModel.cs",
              "url": "~/Models/EmployeeViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This sample shows how to change the style of the rows with Telerik $FRAMEWORK Grid Row templates."
        },
        "description": {
          "aspnet-core": "The Telerik for $FRAMEWORK Grid allows flexible customization of its rows in terms of layout and appearance by exposing a row template feature for this purpose. <p>In this example we present how you can specify your own custom layout for the rows in the grid using images and property bindings from its underlying data source.<p/>To do that you need to define a <code>ClientRowTemplate</code> and a <code>ClientAltRowTemplate</code><em>(optional)</em>. Note that both templates should contain table row HTML elements.<p>More about the <a href=\"https://docs.telerik.com/kendo-ui/framework/templates/overview\" target=\"_blank\">Kendo UI Template Syntax</a></p><p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Detail template",
        "url": "grid/detailtemplate",
        "title": {
          "aspnet-core": "Detail Template for Telerik $FRAMEWORK Grid"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeViewModel.cs",
              "url": "~/Models/EmployeeViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example shows how records in the Telerik $FRAMEWORK Grid component can be presented with a detailed template."
        },
        "description": {
          "aspnet-core": "This example demonstrates how you can utilize the detail template feature of the $FRAMEWORK grid by Telerik. The key steps are the following:<ul> <li>Set the <strong>ClientDetailTemplateId</strong> - this is the id of the script element containing the client-side detail template of the gridview</li> <li>Define the script tag content that will be shown when the user expands the grid rows</li> </ul> <p>In this example we inject an $FRAMEWORK TabStrip HtmlHelper with two tabs in the detail template - the first contains the orders of the relevant employee, and the second one holds his/her contact information.</p>"
        }
      },
      {
        "text": "Multi-column headers",
        "url": "grid/multicolumnheaders",
        "group": "Columns",
        "title": {
          "aspnet-core": "Multiple column headers in the $FRAMEWORK Grid by Telerik | Telerik $FRAMEWORK GridView Multi-Column headers Web demo"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CustomerViewModel.cs",
              "url": "~/Models/CustomerViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows the multiple column headers feature of the Telerik for $FRAMEWORK DataGrid."
        },
        "description": {
          "aspnet-core": "<p>The Telerik for $FRAMEWORK DataGrid supports multi-column headers by specifying column groups which incorporate inner-column structures.</p>In this demo, you can see the <strong>Contact Info</strong> and <strong>Location</strong> columns have nested columns, defined trough the Column Builder: <pre>columns.Group(group =&gt; group.Title\"Contact Info\").Columns(col => { col.Bound(x => x.ContactTitle).Width(200);}));</pre>In addition, operations like sorting and filtering are supported on each column level, regardless of the chosen multi-header pattern.</p><p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Column reordering",
        "url": "grid/column-reordering",
        "title": {
          "aspnet-core": "Column Reordering in the Telerik for $FRAMEWORK Grid"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "OrderViewModel.cs",
              "url": "~/Models/OrderViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "In this demo you can see how simple it is to reorder columns in the Telerik for $FRAMEWORK Grid."
        },
        "description": {
          "aspnet-core": "<p>You can see in this demo how simple it is to reorder columns in Telerik $FRAMEWORK Grid. Just drag a column header over another header cell.</p> <p>You can enable this behavior by setting the <code>.Reorderable(true)</code> method of the $FRAMEWORK GridView.</p></br><p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Column resizing",
        "url": "grid/column-resizing",
        "title": {
          "aspnet-core": "Column resizing in the Telerik for $FRAMEWORK Grid"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "OrderViewModel.cs",
              "url": "~/Models/OrderViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo demonstrates how you can resize columns in the Telerik for $FRAMEWORK Grid."
        },
        "description": {
          "aspnet-core": "<p>This example demonstrates how you can enable the columns resizing feature of the $FRAMEWORK Grid by using the <code>Resizable(true)</code> method.</p> <p>Once it is set the users can resize columns by dragging the edges (resize handles) of their header cells. They can also auto-fit a column by double-clicking its resize handle as in Excel.</p><p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Column menu",
        "url": "grid/column-menu",
        "title": {
          "aspnet-core": "Column menu functionality of the Telerik for $FRAMEWORK Grid"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "Order.cs",
              "url": "~/Models/SamplesEntities/Order.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This $FRAMEWORK Grid by Telerik example shows the column menu functionality."
        },
        "description": {
          "aspnet-core": "<p>You can try in this example the column menu functionality of the $FRAMEWORK Grid by Telerik.</p> <p>If you use the grid <code>ColumnMenu(true)</code> method, the gridview will display the column menu represented by three dots in the $FRAMEWORK DataGrid header cells. The column menu allows the user to show and hide columns as well as filter and sort them (if filtering and sorting are enabled).</p><p>More about the <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Column Settings",
        "url": "grid/columnsettings",
        "packages": [ "!online", "!jsp", "!php" ],
        "title": {
          "aspnet-core": "Load column settings functionality of the Telerik for $FRAMEWORK Grid"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This $FRAMEWORK Grid by Telerik example shows how to load column settings from the server."
        },
        "description": {
          "aspnet-core": "You can try in this example to load the $FRAMEWORK Grid column settings from the server by using the LoadSettings method as follows: <pre>.Columns(columns => { columns.LoadSettings((IEnumerable<GridColumnSettings>)ViewData[\"Columns\"]);})</pre><p>More about the <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "ForeignKey column",
        "url": "grid/foreignkeycolumn",
        "title": {
          "aspnet-core": "Foreign Key Column demo in the Telerik for $FRAMEWORK Grid"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example shows the foreign key column functionality to cross-reference tables in the Telerik for $FRAMEWORK Grid."
        },
        "description": {
          "aspnet-core": "<p>In this example you can see how to implement foreign key column in the Telerik for $FRAMEWORK Grid, which generates an $FRAMEWORK DropDownList editor for the Category column. The ForeignKey column definition is shown below:<br/> <br/><code>columns.ForeignKey(p =&gt; p.CategoryID, (System.Collections.IEnumerable)ViewData[\"categories\"], \"CategoryID\", \"CategoryName\").Title(\"Category\").Width(150);</code></p> <p> When a column is defined as a ForeignKey colum the $FRAMEWORK Grid will look for the editor template in <strong>~Views\\Shared\\EditorTemplates</strong> named <code>GridForeignKey.cshtml</code> and populate it with the passed collection through the column declaration. Here is the definition of the editor template:</p> <p>@model object<br /> @(Html.Kendo().DropDownListFor(m => m)</span><br /> <span>&nbsp;&nbsp;&nbsp; </span>.BindTo((SelectList)ViewData[ViewData.TemplateInfo.GetFullHtmlFieldName(\"\") + \"_Data\"])<br />)</p><p>In addition to the Foreign Key editor template, populate a list which holds all the categories and pass it via the ViewData - you can see how this is done in the ForeignKeyColumnController.cs <code>PopulateCategories()</code> method.</p><p>If Create operations will be used provide a DefaultCategory in the DataSource Model Field.</p> <p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Custom command",
        "url": "grid/custom-command",
        "title": {
          "aspnet-core": "Custom command demo in the Telerik for $FRAMEWORK Grid"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeViewModel.cs",
              "url": "~/Models/EmployeeViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example illustrates the custom command of the Telerik for $FRAMEWORK DataGrid."
        },
        "description": {
          "aspnet-core": "The demonstrated solution in this example shows how to implement a custom command column in the $FRAMEWORK Grid by Telerik. </p> <p>To do it you need to include a command column in the grid which will render a button in the column cells that triggers the command. Through the column definition you can specify the text for the button and wire its click event to a JavaScript function: <pre>columns.Command(command => command.Custom(\"ViewDetails\").Click(\"showDetails\"));</pre>The generated button will be decorated with a class which follows the convention \"k-grid-[CommandName]\" and the click handler receives the corresponding grid as an argument.<p>In this demo we use a Kendo UI Window widget to display details about the chosen row in the $FRAMEWORK grid.<p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Events",
        "url": "grid/events",
        "title": {
          "aspnet-core": "Example of using events in the Telerik for $FRAMEWORK Grid"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example demonstrates the different events which are available in the Telerik for $FRAMEWORK Grid. The code explains how you can use them in your project."
        },
        "group": "API",
        "description": {
          "aspnet-core": "<p>The Telerik for $FRAMEWORK Grid exposes a rich API and events which provide easy configuration or extension points for customization on top of the built-in features.</p> <p>This particular demo shows how you can intercept the <strong><code>Change</code></strong>, <strong><code>DataBinding</code></strong> and <strong><code>DataBound</code></strong> events of the grid to output messages in the console when these events are raised. You can also use these events for customization or to execute custom logic, if necessary.</p><p>The $FRAMEWORK Grid triggers events for each user interaction as well - Filter, Group, Sort, BeforeEdit, Save, Cancel etc. To see all the client-side events that you can use, check the JavaScript API <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/ui/grid#events\" target=\"_blank\">Events</a></p><p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "API",
        "url": "grid/api",
        "title": {
          "aspnet-core": "API for the $FRAMEWORK Grid by Telerik | UI for $FRAMEWORK Grid API demo"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "See how the powerful and comprehensive API methods allow you to manipulate the contents and behavior of the Telerik for $FRAMEWORK Grid."
        },
        "description": {
          "aspnet-core": "<p>The Telerik for $FRAMEWORK Grid exposes rich client-side API and events, which provide easy configuration or extension points for custom functionality on top of the built-in features.</p> <p>The example shows how you can get a reference to the grid&rsquo;s client object, collect the numeric value entered by the user and use this value to select, expand/collapse grid rows or resize columns using the <strong><code>select()</code></strong>, <strong><code>expandGroup()</code></strong>/<strong><code>collapseGroup()</code></strong> and <strong><code>resizeColumn()</code></strong> client methods of the $FRAMEWORK Grid.</p> <p>You can find more information about the available grid&rsquo;s client-side API <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/ui/grid\" target=\"_blank\">here</a>.</p><p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Globalization",
        "url": "grid/globalization",
        "group": "Accessibility and Internationalization",
        "packages": [ "!online", "!jsp", "!php" ],
        "title": {
          "aspnet-core": "Globalization and Localization in the Telerik for $FRAMEWORK Grid"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "In this demo you will be able to learn how to change the culture and messages in the Telerik for $FRAMEWORK Grid."
        },
        "description": {
          "aspnet-core": "<p>This demo shows how to change the culture and language in which the messages of the Telerik for $FRAMEWORK Grid are displayed. <p>The <strong>Kendo UI culture</strong> defines specific information for the number formats, week and month names, date and time formats, etc. The Kendo UI culture scripts are generated from the Windows 10 and .NET 4.7 server-side culture definitions and match them by design. </p><p>The demo shows how the selected culture from the $FRAMEWORK DropDownList updates the server culture. This causes the $FRAMEWORK Grid to use the matching Resource file messages and localize them accordingly. The <code><a href=\"https://docs.telerik.com/kendo-ui/api/javascript/kendo/methods/culture\" target=\"_blank\">kendo.culture()</a></code> method is used to set the client cluture to force the grid to use the matching date, number, currency, week and month formats.</p><p>The <strong> Kendo UI messages</strong> are community sourced. In case a translation is missing from the Resource messages, the $FRAMEWORK GridView will use the default \"en-US\" messages.</p></br><p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "RTL support",
        "url": "grid/right-to-left-support",
        "title": {
          "aspnet-core": "Right to left support in the Telerik for $FRAMEWORK DataGrid"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "In this demo you will be able to learn more about the right to left support in the Telerik for $FRAMEWORK Grid."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK Grid supports right-to-left languages and rendering. All you have to do is to register the <strong><code>kendo.rtl.min.css</code></strong> file (located at Kendo.Mvc.Examples\\Content\\web\\ installation folder) and wrap the grid in a container element with <strong><code>k-rtl</code></strong> class set for it, as demonstrated in this example.</p> <p>More information on the right-to-left support of the components can be found in <a href=\"https://docs.telerik.com/kendo-ui/accessibility/supporting-rtl-languages\" target=\"_blank\">this topic</a>.</p><p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "grid/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation in the Telerik for $FRAMEWORK Grid"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeViewModel.cs",
              "url": "~/Models/EmployeeViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "Look at this Telerik for $FRAMEWORK Grid demo to learn how different keyboard combinations could be used to navigate in the component."
        },
        "description": {
          "aspnet-core": "<p>This demo illustrates the keyboard support of the $FRAMEWORK Grid by Telerik, which provides quick access to available grid&rsquo;s features without the need of using a mouse. This is very practical for apps that should cover the accessibility standards for people with disabilities.</p> <p>You can focus the grid using the <strong>ALT + W</strong> key combination, which will allow you to directly interact with the grid functionality through the provided keyboard shortcuts visualized above.</p> <p>Further details about the Keyboard, Section 508, WAI-ARIA and WCAG 2.0 support of the Telerik for $FRAMEWORK Grid and Kendo UI widgets in general can be found in the <a href=\"https://docs.telerik.com/kendo-ui/accessibility/accessibility-overview\" target=\"_blank\">Accessibility Overview section</a> of the documentation.</p><p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a></p>"
        }
      }
    ],
    "category": "Data Management"
  },
  {
    "text": "Spreadsheet",
    "name": "spreadsheet",
    "api": "web/spreadsheet",
    "updated": true,
    "documentation": {
      "aspnet-core": "helpers/html-helpers/spreadsheet"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/spreadsheet"
    },
    "spriteCssClass": "spreadsheetIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "spreadsheet/index",
        "title": {
          "aspnet-core": " $FRAMEWORK Spreadsheet control example"
        },
        "meta": {
          "aspnet-core": "In this demo for Kendo UI jQuery-powered Spreadsheet in $FRAMEWORK you will see all basic functionalities of the extension."
        }
      },
      {
        "text": "Tag Helper",
        "url": "spreadsheet/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK SpreadSheet Tag Helper sample"
        }
      },
      {
        "text": "Sorting and Filtering",
        "url": "spreadsheet/sorting-filtering",
        "title": {
          "aspnet-core": "Sorting and filtering"
        },
        "meta": {
          "aspnet-core": "This demo shows the sorting and filtering support that ASP.NET Core Spreadsheet provides"
        }
      },
      {
        "text": "DataSource binding",
        "url": "spreadsheet/datasource",
        "title": {
          "aspnet-core": "DataSource binding"
        },
        "meta": {
          "aspnet-core": "This demo shows the integration with the DataSource component that ASP.NET Core Spreadsheet provides"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "SpreadsheetProductViewModel.cs",
              "url": "~/Models/SpreadsheetProductViewModel.cs"
            },
            {
              "name": "SpreadsheetSubmitViewModel.cs",
              "url": "~/Models/SpreadsheetSubmitViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Disabled cells",
        "url": "spreadsheet/disabled-cells",
        "title": {
          "aspnet-core": "Disabled cells"
        },
        "meta": {
          "aspnet-core": "This demo shows how to disable/enable editing in ASP.NET Core Spreadsheet provides for particular range"
        }
      },
      {
        "text": "Custom cell editors",
        "url": "spreadsheet/custom-editors",
        "title": {
          "aspnet-core": "Custom editors"
        },
        "meta": {
          "aspnet-core": "This demo shows how to define your own custom cell editors"
        }
      },
      {
        "text": "Images",
        "url": "spreadsheet/images",
        "title": {
          "aspnet-core": "Insert Images in Telerik Spreadsheet"
        },
        "meta": {
          "aspnet-core": "This demo shows how to declarethe Telerik Spreadsheet with an Image already loaded in it"
        }
      },
      {
        "text": "Cell comments",
        "url": "spreadsheet/cell-comments",
        "title": {
          "aspnet-core": "Cell comments"
        },
        "meta": {
          "aspnet-core": "This demo shows how to define comment for a given cell in the Spreadsheet"
        }
      },
      {
        "text": "Events",
        "url": "spreadsheet/events",
        "title": {
          "aspnet-core": "Events in ASP.NET Core Spreadsheet widget"
        },
        "meta": {
          "aspnet-core": "This example shows events which are triggered in ASP.NET Core Spreadsheet widget."
        }
      },
      {
        "text": "Validation",
        "url": "spreadsheet/validation",
        "title": {
          "aspnet-core": "Data validation in ASP.NET Core Spreadsheet widget"
        },
        "meta": {
          "aspnet-core": "This example shows the data validation in ASP.NET Core Spreadsheet widget."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "spreadsheet/keyboard-navigation",
        "new": true,
        "title": {
          "aspnet-core": "Keyboard navigation in $FRAMEWORK Spreadsheet control"
        },
        "meta": {
          "aspnet-core": "Look at this $FRAMEWORK demo which illustrates how the keyboard navigation feature is supported in Telerik Spreadsheet."
        },
        "packages": [
          "!jsp",
          "!php"
        ]
      }
    ],
    "category": "Data Management"
  },
  {
    "text": "ListBox",
    "name": "listbox",
    "api": "web/listbox",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/listbox"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/listbox"
    },
    "spriteCssClass": "listBoxIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "listbox/index",
        "title": {
          "aspnet-core": "$FRAMEWORK ListBox demo | ASP.NET Core for $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "Play with this basic example of ASP.NET Core ListBox in $FRAMEWORK and find all features of the helper for ASP.NET Core ListBox."
        },
        "description": {
          "aspnet-core": "<p>The <strong>ListBox for $FRAMEWORK</strong> is a helper that displays a list of items. It allows for multiple selection of items, reorder and transfer between two listboxes. Drag and drop is fully supported as well. You can easily control the appearance by arranging the buttons in different layouts or changing their text.</p><br /><p><strong>Key Features</strong></p> <ul style=\"list-style-type: disc;\"><li>Single or Multiple selection</li><li>Reordering of selected items</li><li>Drag & Drop functionality</li><li>Item templates</li><li>Connecting multiple ListBox widgets</li><li>Built-in themes</li><li>Accessibility, keyboard navigation and RTL Support</li></ul>"
        }
      },
      {
        "text": "Tag Helper",
        "url": "listbox/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK ListBox Tag Helper sample"
        }
      },
      {
        "text": "Drag & Drop",
        "url": "listbox/drag-and-drop",
        "title": {
          "aspnet-core": "$FRAMEWORK ListBox Drag & Drop demo | ASP.NET Core for $FRAMEWORK demos"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example shows the Drag & Drop functionality of ListBox in $FRAMEWORK and find all features of the helper for ASP.NET Core ListBox."
        },
        "description": {
          "aspnet-core": "<p>The <strong>ListBox for $FRAMEWORK</strong> allows Drag & Drop between two ListBoxes (for transfer) or within a single one (for reordering). This example demonstrates how you could use the Drag & Drop functionality with two ListBox widgets and furthermore, update the underlying data by handling the <strong>Add</strong> and <strong>Remove</strong> events."
        }
      },
      {
        "text": "Templates",
        "url": "listbox/templates",
        "title": {
          "aspnet-core": "$FRAMEWORK ListBox templates demo | ASP.NET Core for $FRAMEWORK demos"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "IndexController.cs",
              "url": "~/Controllers/ListBox/IndexController.cs"
            },
            {
              "name": "CustomerViewModel.cs",
              "url": "~/Models/CustomerViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo for $FRAMEWORK ListBox component shows how you can customize the widget apperience."
        },
        "description": {
          "aspnet-core": "<p>This demo demonstrates how to configure a template for the <strong>ListBox for $FRAMEWORK</strong> items. It also demonstrates how to customize the draggable placeholder</p>"
        }
      },
      {
        "text": "Events",
        "url": "listbox/events",
        "title": {
          "aspnet-core": "$FRAMEWORK ListBox events demo | ASP.NET Core for $FRAMEWORK demos"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CustomerViewModel.cs",
              "url": "~/Models/CustomerViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example shows events which are triggered in $FRAMEWORK ListBox component."
        },
        "description": {
          "aspnet-core": "<p>The <strong>ListBox for $FRAMEWORK</strong> exposes rich API and events which provide easy configuration or extension points for custom functionality on top of the built-in features.</p><p>This particular example shows how to intercept the Change, DataBound, Reorder, DragStart, DragEnd, Drag, Drop, Add and Remove events of the ListBox to output messages in the console when these events are raised. They can also be hooked for customizations or to execute custom logic, if necessary.</p>"
        }
      },
      {
        "text": "API",
        "url": "listbox/api",
        "title": {
          "aspnet-core": "$FRAMEWORK ListBox API demo | ASP.NET Core for $FRAMEWORK demos"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example shows how to use the API of the $FRAMEWORK ListBox component."
        },
        "description": {
          "aspnet-core": "<p>This demo demonstrates how you could use the <strong>ListBox for $FRAMEWORK</strong> API for modify the its items and how to transfer items between two ListBox instances</p>"
        }
      },
      {
        "text": "RTL support",
        "url": "listbox/right-to-left-support",
        "title": {
          "aspnet-core": "RTL support in $FRAMEWORK ListBox"
        },
        "meta": {
          "aspnet-core": "This demo shows how the right-to-left feature is supported in $FRAMEWORK ListBox control."
        },
        "description": {
          "aspnet-core": "<p>This demo shows how the right-to-left feature is supported in $FRAMEWORK ListBox control.</p>"
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "listbox/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation in $FRAMEWORK ListBox"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "In this example we will look at the supported keys and user actions in $FRAMEWORK ListBox control."
        }
      }
    ],
    "category": "Editors"
  },
  {
    "text": "ListView",
    "name": "listview",
    "api": "web/listview",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/listview"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/listview"
    },
    "spriteCssClass": "listViewIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "listview/index",
        "title": {
          "aspnet-core": "$FRAMEWORK Listview demo | Telerik UI for $FRAMEWORK demos"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "Play with this basic example of Telerik Listview in $FRAMEWORK and find all features of the helper for ASP.NET Core Listview."
        }
      },
      {
        "text": "Binding to remote data",
        "url": "listview/remote-data-binding",
        "title": {
          "aspnet-core": "$FRAMEWORK Listview binding to remote data | Telerik UI for $FRAMEWORK demos"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example and demo source code illustrate how the Telerik $FRAMEWORK ListView component can be bound to remote data using the DataSource component."
        }
      },
      {
        "text": "Custom data source",
        "url": "listview/custom-datasource",
        "title": {
          "aspnet-core": "$FRAMEWORK Listview binding to custom data source | Telerik UI for $FRAMEWORK demos"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example and demo source code illustrate how the Telerik $FRAMEWORK ListView component can be bound to custom data source using the DataSource component."
        },
        "packages": [ "!online", "!jsp", "!php" ]
      },
      {
        "text": "Editing",
        "url": "listview/editing",
        "title": {
          "aspnet-core": "Editing records in $FRAMEWORK ListView control"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example demonstrates the option to easily edit records in $FRAMEWORK ListView component. Learn how to edit records and manipulate the behavior of the contents."
        }
      },
      {
        "text": "Selection",
        "url": "listview/selection",
        "title": {
          "aspnet-core": "Items selection demo for $FRAMEWORK ListView control"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how items in $FRAMEWORK ListView can be selected. Find how to select multiple items and configure the behavior of the control."
        }
      },
      {
        "text": "Endless Scrolling",
        "url": "listview/endless-scrolling",
        "title": {
          "aspnet-core": "Endless Scrolling demo for $FRAMEWORK ListView widget"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows $FRAMEWORK ListView Endless Scrolling functionality in action."
        }
      },
      {
        "text": "RTL support",
        "url": "listview/right-to-left-support",
        "title": {
          "aspnet-core": "RTL support in $FRAMEWORK ListView"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how the right-to-left feature is supported in $FRAMEWORK ListView component."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "listview/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation in $FRAMEWORK ListView"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "In this example we will look at the supported keys and user actions in $FRAMEWORK ListView control."
        }
      }
    ],
    "category": "Data Management"
  },
  {
    "text": "PivotGrid",
    "name": "pivotgrid",
    "api": "web/pivotgrid",
    "forum": {
      "aspnet-core": "aspnet-core-ui/pivotgrid"
    },
    "spriteCssClass": "pivotGridIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "pivotgrid/index",
        "title": {
          "aspnet-core": "PivotGrid control example | ASP.NET Core PivotGrid Demos"
        },
        "meta": {
          "aspnet-core": "This demo for ASP.NET Core PivotGrid component shows how you can make a data summarization tool."
        }
      },
      {
        "text": "Tag Helper",
        "url": "pivotgrid/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK PivotGrid Tag Helper sample"
        }
      },
      {
        "text": "KPI measures",
        "url": "pivotgrid/kpi",
        "title": {
          "aspnet-core": "Define KPI measures in ASP.NET Core PivotGrid"
        },
        "meta": {
          "aspnet-core": "This demo for ASP.NET Core PivotGrid component shows how you can define KPI measures."
        }
      },
      {
        "text": "Remote binding",
        "url": "pivotgrid/remote-flat-data-binding",
        "title": {
          "aspnet-core": "Binding Pivot Grid to flat remote data"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CustomerViewModel.cs",
              "url": "~/Models/CustomerViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo for ASP.NET Core PivotGrid component shows how you can poplate the widget with remote flat data."
        }
      },
      {
        "text": "Local binding",
        "url": "pivotgrid/local-flat-data-binding",
        "title": {
          "aspnet-core": "Binding Pivot Grid to local data"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo for ASP.NET Core PivotGrid component shows how you can poplate the widget with local flat data."
        }
      },
      {
        "text": "Templates",
        "url": "pivotgrid/templates",
        "title": {
          "aspnet-core": "Customizing Pivot Grid apperience"
        },
        "meta": {
          "aspnet-core": "This demo for ASP.NET Core PivotGrid component shows how you can customize the widget apperience."
        }
      },
      {
        "text": "Export to Excel",
        "url": "pivotgrid/excel-export",
        "title": {
          "aspnet-core": "Exporting to MS Excel"
        },
        "meta": {
          "aspnet-core": "Export ASP.NET Core PivotGrid as Microsoft Excel file"
        }
      },
      {
        "text": "Export to PDF",
        "url": "pivotgrid/pdf-export",
        "title": {
          "aspnet-core": "Exporting to PDF"
        },
        "meta": {
          "aspnet-core": "Export ASP.NET Core PivotGrid as PDF"
        }
      }
    ],
    "category": "Data Management"
  },
  {
    "text": "MaskedTextBox",
    "name": "maskedtextbox",
    "api": "web/maskedtextbox",
    "updated": true,
    "documentation": {
      "aspnet-core": "helpers/html-helpers/maskedtextbox"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/maskedtextbox"
    },
    "spriteCssClass": "maskedtextboxIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "maskedtextbox/index",
        "title": {
          "aspnet-core": "Primary features of $FRAMEWORK Mask Input | $FRAMEWORK demo"
        },
        "meta": {
          "aspnet-core": "This demo shows the core functionality of $FRAMEWORK MaskedTextBox component."
        }
      },
      {
        "text": "Tag Helper",
        "url": "maskedtextbox/tag-helper",
        "packages": [ "aspnet-core" ],
        "updated": true,
        "title": {
          "aspnet-core": "$FRAMEWORK MaskedTextBox Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK MaskedTextBox component."
        }
      },
      {
        "text": "Events",
        "url": "maskedtextbox/events",
        "title": {
          "aspnet-core": "Events in $FRAMEWORK MaskedTextBox control"
        },
        "meta": {
          "aspnet-core": "This example shows events which are triggered in $FRAMEWORK MaskedTextBox component."
        }
      },
      {
        "text": "Floating Label",
        "url": "maskedtextbox/floating-label",
        "new": true,
        "title": {
          "aspnet-core": "Floating Label in $FRAMEWORK MaskedTextBox widget"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the $FRAMEWORK MaskedTextBox Floating Label."
        },
        "description": {
          "aspnet-core": "This sample shows how to use the Floating Label of the $FRAMEWORK MaskedTextBox widget. The Floating Label displays the type of input a field requires."
        }
      },
      {
        "text": "API",
        "url": "maskedtextbox/api",
        "updated": true,
        "title": {
          "aspnet-core": "API Functions Demo for $FRAMEWORK MaskedTextBox"
        },
        "meta": {
          "aspnet-core": "This demo shows specific API functions for $FRAMEWORK MaskedTextBox component."
        }
      },
      {
        "text": "Globalization",
        "url": "maskedtextbox/globalization",
        "title": {
          "aspnet-core": "Globalization Demo for $FRAMEWORK MaskedTextBox"
        },
        "meta": {
          "aspnet-core": "This demo shows $FRAMEWORK MaskedTextBox globalization support for decimal point, thousand separator and currency symbol."
        }
      },
      {
        "text": "RTL support",
        "url": "maskedtextbox/right-to-left-support",
        "title": {
          "aspnet-core": "RTL support in $FRAMEWORK MaskedTextBox control"
        },
        "meta": {
          "aspnet-core": "This demo shows how right-to-left input is implemented in $FRAMEWORK MaskedTextBox component to ensure the satisfaction of RTL language users."
        }
      },
      {
        "text": "Validation",
        "url": "maskedtextbox/validation",
        "title": {
          "aspnet-core": "Validation Demo for $FRAMEWORK MaskedTextBox"
        },
        "meta": {
          "aspnet-core": "This demo shows how to validate an incomplete control value in $FRAMEWORK MaskedTextBox"
        }
      }
    ],
    "category": "Editors"
  },
  {
    "text": "MediaPlayer",
    "name": "mediaplayer",
    "api": "web/mediaplayer",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/mediaplayer"
    },
    "spriteCssClass": "mediaPlayerIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "mediaplayer/index",
        "title": {
          "aspnet-core": "$FRAMEWORK MediaPlayer demo | Telerik UI for $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "Play with this basic example of Telerik MediaPlayer in $FRAMEWORK and find all features of the helper for ASP.NET Core MediaPlayer."
        },
        "description": {
          "aspnet-core": "<p>The <strong>Telerik MediaPlayer for $FRAMEWORK</strong> component plays video files from static sources or streams online YouTube videos and enriches your website with dynamic content in a user-friendly interface. It provides a styled video UI functionality by using the HTML5 <code>&ltvideo&gt</code> element and brings powerful media capabilities to your applications.</p>"
        }
      },
      {
        "text": "Playlist",
        "url": "mediaplayer/playlist",
        "title": {
          "aspnet-core": "$FRAMEWORK MediaPlayer with ListView as Playlist | Telerik UI for $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "This example of KendoMediaPlayer demonstrates how to use ListView as playlist."
        },
        "description": {
          "aspnet-core": "<p>The <strong>MediaPlayer</strong> component provides convenient API to change its source dynamically and dictate the flow of the video. This sample uses a ListView component to create a practical Playlist which displays the available videos right next to the MediaPlayer element.</p>"
        }
      },
      {
        "text": "Events",
        "url": "mediaplayer/events",
        "title": {
          "aspnet-core": "$FRAMEWORK KendoMediaPlayer Events Sample | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This sample shows $FRAMEWORK KendoMediaPlayer events which are enabled and the demo source code guides you how you can handle the events in media player."
        }
      },
      {
        "text": "API",
        "url": "mediaplayer/api",
        "title": {
          "aspnet-core": "API functions demo for $FRAMEWORK KendoMediaPlayer"
        },
        "meta": {
          "aspnet-core": "This demo illustrates how API functions of KendoMediaPlayer control operate and how you can use them in your project."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "mediaplayer/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard Support demo for $FRAMEWORK KendoMediaPlayer"
        },
        "meta": {
          "aspnet-core": "This demo demonstrates the built-in Keyboard Shortcuts provided by the KendoMediaPlayer widget to ease the user navigation."
        }
      }
    ],
    "category": "Media"
  },
  {
    "text": "ScrollView",
    "name": "scrollview",
    "api": "web/scrollview",
    "documentation": {
      "aspnet-core": "/html-helpers/media/scrollview"
    },
    "spriteCssClass": "scrollviewIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "scrollview/index",
        "title": {
          "aspnet-core": "$FRAMEWORK scrollview demo | Telerik UI for $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "This $FRAMEWORK ScrollView example demonstrates the basic functionality of the widget. With the $FRAMEWORK ScrollView widget, you can specify custom layout for the items in the control."
        },
        "description": {
          "aspnet-core": "The <strong>ScrollView for ASP.NET Core</strong> widget displays а horizontal collection of images."
        }
      },
      {
        "text": "Binding to a DataSource",
        "url": "scrollview/databinding",
        "title": {
          "aspnet-core": "Example for $FRAMEWORK ScrollView binding to a Kendo UI DataSource | Telerik UI for $FRAMEWORK demos"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This $FRAMEWORK ScrollView demo shows how the control can be bound to a remote data using a Kendo UI DataSource component."
        },
        "description": {
          "aspnet-core": "The <strong>ScrollView for ASP.NET Core</strong> can be bound to both local data or remote data via the Kendo UI DataSource component. Local data binding is appropriate for small data sets, while remote data binding applies better to larger data sets."
        }
      },
      {
        "text": "Events",
        "url": "scrollview/events",
        "title": {
          "aspnet-core": "$FRAMEWORK ScrollView Events Sample | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This sample shows $FRAMEWORK ScrollView events which are enabled and the demo source code guides you how you can handle the events."
        },
        "description": {
          "aspnet-core": "<p>The <strong>ScrollView for ASP.NET Core</strong> exposes client-side API and events which provide easy configuration or extension points for custom functionality on top of the built-in features.</p><p>This particular example shows how you can intercept the <strong>change</strong> and <strong>refresh</strong> events of the ScrollView to output messages in the console when these events are raised. They can also be hooked for customizations or to execute custom logic, if necessary.</p>"
        }
      },
      {
        "text": "API",
        "url": "scrollview/api",
        "title": {
          "aspnet-core": "API functions demo for $FRAMEWORK ScrollView"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo illustrates how API functions of ScrollView control operate and how you can use them in your project."
        },
        "description": {
          "aspnet-core": "<p>The <strong>ScrollView for ASP.NET Core</strong> exposes client-side API and events which provide easy configuration or extension points for custom functionality on top of the built-in features.</p><p>This particular example shows how you can switch the images on a button click.</p>"
        }
      },
      {
        "text": "Tag Helper",
        "url": "scrollview/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK ScrollView Tag Helper sample"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo illustrates how the ScrollView can be declared via Tag Helper."
        },
        "description": {
          "aspnet-core": "<p>The <strong>ScrollView for ASP.NET Core</strong> displays a horizontal collection of content or image views with built-in navigation between them. It can be scrolled through dragging, gestures, arrow click or page click or tap.</p><p>This particular example shows how to declare the component via Tag Helper.</p>"
        }
      }
    ],
    "category": "Media"
  },
  {
    "text": "Reporting Integration",
    "name": "Reporting Integration",
    "spriteCssClass": "gridIcon",
    "api": "web/grid",
    "items": [
      {
        "text": "Drill-Down Grid Report",
        "url": "reporting/index",
        "packages": [ "!online", "!jsp", "!php" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Reporting Integration Drill-Down Demo"
        },
        "meta": {
          "aspnet-core": "This example illustrates the an implementational scenario with Telerik UI for Core Grid and the Telerik Reporting."
        }
      }
    ],
    "sources": {
      "aspnet-core": [
        {
          "name": "ReportingView",
          "url": "~/Views/Reporting/ReportingView.cshtml"
        },
        {
          "name": "GridView",
          "url": "~/Views/Reporting/GridView.cshtml"
        },
        {
          "name": "ReportsController.cs",
          "url": "~/Controllers/Reporting/ReportsController.cs"
        },
        {
          "name": "DataGridReport",
          "url": "~/Views/Reporting/DataGridExample.trdx"
        }
      ]
    },
    "description": {
      "aspnet-core": "<p>The example on this page demonstrates the integration between <strong>Telerik UI for ASP.NET Core</strong> suite and <strong>Telerik Reporting</strong>. The purpose of the demo is to show how the data from the <strong>Telerik UI for Core Grid</strong> is passed to a <strong>Telerik Report</strong> and displayed in a HTML5 Report Viewer. The demo covers the following main points: <br /> <ul><li>The components from both suites are loaded in a TabStrip component. The first tab shows the Grid, loaded and populated with sample data. The second one opens a report viewer displaying the data obtained from the Grid.</li><li>The Grid is configured with a Client Template to showcase nested Grids.</li><li>During the ReportViewer initialization, the data is gathered from the Grid and passed to a report definition in JSON format. The generated report provides interactivity features like sorting and collapsing, similarly to the Grid behavior.</li><br /><p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/grid\">Telerik Grid for $FRAMEWORK</a> and <a href=\"https://www.telerik.com/products/reporting.aspx\">Telerik Reporting</a></p>"
    },
    "category": "Reporting"
  },
  {
    "text": "Menu",
    "name": "menu",
    "api": "web/menu",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/menu"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/menu"
    },
    "spriteCssClass": "menuIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "menu/index",
        "title": {
          "aspnet-core": "Basic usage of $FRAMEWORK Menu Navigation | $FRAMEWORK demo"
        },
        "meta": {
          "aspnet-core": "In this $FRAMEWORK Menu demo we will demonstrates the rich features of the component and its basic usage for your app."
        }
      },
      {
        "text": "Tag Helper",
        "url": "menu/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Menu Tag Helper sample"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "Category.cs",
              "url": "~/Models/SamplesEntities/Category.cs"
            }
          ]
        }
      },
      {
        "text": "Context Menu Tag Helper",
        "url": "menu/contextmenu-tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Context Menu Tag Helper sample"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "WebMail.cs",
              "url": "~/Models/WebMail.cs"
            },
            {
              "name": "WebMailDataRepository.cs",
              "url": "~/Models/WebMailDataRepository.cs"
            }
          ]
        }
      },
      {
        "text": "Images",
        "url": "menu/images",
        "title": {
          "aspnet-core": "Images in $FRAMEWORK Menu control | $FRAMEWORK Demo"
        },
        "meta": {
          "aspnet-core": "This $FRAMEWORK Menu example shows the feature that allows you to use menu with images. They are loaded from a specific URL or arranged in image sprite CSS class."
        }
      },
      {
        "text": "Direction",
        "url": "menu/direction",
        "title": {
          "aspnet-core": "$FRAMEWORK Menu direction demo"
        },
        "meta": {
          "aspnet-core": "This demo shows how the pop-up direction of the items in $FRAMEWORK dropdown menu can be changed, depending on your web app development needs."
        }
      },
      {
        "text": "Orientation",
        "title": {
          "aspnet-core": "Orientation of dropdown menus in $FRAMEWORK Menu"
        },
        "url": "menu/orientation",
        "meta": {
          "aspnet-core": "In this example we will see how the orientation of the $FRAMEWORK Menu can be easily modified through the orientation settings."
        }
      },
      {
        "text": "Scrollable",
        "title": {
          "aspnet-core": "$FRAMEWORK Menu scrollable demo"
        },
        "url": "menu/scrollable",
        "meta": {
          "aspnet-core": "This $FRAMEWORK Menu example shows the feature that allows you to scroll the menu items."
        }
      },
      {
        "text": "ModelBinding",
        "url": "menu/modelbinding",
        "packages": [ "!online", "!jsp", "!php" ],
        "sources": {
          "aspnet-core": [
            {
              "name": "Category.cs",
              "url": "~/Models/SamplesEntities/Category.cs"
            }
          ]
        }
      },
      {
        "text": "Binding to remote data",
        "url": "menu/remote-data-binding",
        "packages": [ "!online", "!jsp", "!php" ],
        "sources": {
          "aspnet-core": [
            {
              "name": "Category.cs",
              "url": "~/Models/SamplesEntities/Category.cs"
            }
          ]
        }
      },
      {
        "text": "Bind Custom Attributes",
        "title": {
          "aspnet-core": "Bind Custom Attributes in $FRAMEWORK Menu"
        },
        "url": "menu/menu-bind-attributes",
        "meta": {
          "aspnet-core": "In this example you can see how you can bind custom attributes in the Menu items and populate them with data. Which can be later used for executing your own logic."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "Category.cs",
              "url": "~/Models/SamplesEntities/Category.cs"
            },
            {
              "name": "Product.cs",
              "url": "~/Models/SamplesEntities/Product.cs"
            }
          ]
        },
        "description": {
          "aspnet-core": "<p>The <strong>Telerik Menu for $FRAMEWORK</strong> enables you apply Model binding to populate items dynamically from the server.</p><p>This demo shows an advanced approach to bind the items' attributes to fields from the Model passed so that you can apply client-side logic on item selection.</p>"
        }
      },
      {
        "text": "Animation effects",
        "url": "menu/animation",
        "title": {
          "aspnet-core": "Animation effects example in $FRAMEWORK Menu"
        },
        "meta": {
          "aspnet-core": "This sample demonstrates how $FRAMEWORK Menu dropdown control supports animation effects which can be easily customized to change the desired animation effect."
        }
      },
      {
        "text": "Events",
        "url": "menu/events",
        "title": {
          "aspnet-core": "$FRAMEWORK Menu Events Sample | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This sample shows $FRAMEWORK Menu events which are enabled and the demo source code guides you how you can handle the events in your dropdown menu."
        }
      },
      {
        "text": "API",
        "url": "menu/api",
        "title": {
          "aspnet-core": "API functions demo for $FRAMEWORK Menu"
        },
        "meta": {
          "aspnet-core": "This demo illustrates how the API functions of $FRAMEWORK Menu control operate and how you can configure them for your web project."
        }
      },
      {
        "text": "Context Menu",
        "url": "menu/context-menu",
        "title": {
          "aspnet-core": "ASP.NET Core Context Menu example"
        },
        "meta": {
          "aspnet-core": "This example demonstrates how to use a ASP.NET Core ContextMenu widget."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "WebMail.cs",
              "url": "~/Models/WebMail.cs"
            },
            {
              "name": "WebMailDataRepository.cs",
              "url": "~/Models/WebMailDataRepository.cs"
            }
          ]
        }
      },
      {
        "text": "RTL support",
        "url": "menu/right-to-left-support",
        "title": {
          "aspnet-core": "Right-to-left support in $FRAMEWORK Menu | $FRAMEWORK Demo"
        },
        "meta": {
          "aspnet-core": "Review how the RTL feature is enabled for the dropdown items in $FRAMEWORK Menu and in the menu labels of the control."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "menu/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation in $FRAMEWORK Menu"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the keyboard navigation support feature in $FRAMEWORK Menu."
        }
      }
    ],
    "category": "Navigation"
  },
  {
    "text": "MultiColumnComboBox",
    "name": "multicolumncombobox",
    "api": "web/multicolumncombobox",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/multicolumncombobox"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/multicolumncombobox"
    },
    "spriteCssClass": "comboBoxIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "multicolumncombobox/index",
        "title": {
          "aspnet-core": "$FRAMEWORK Combobox control Demo | UI for $FRAMEWORK Demos"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CustomerViewModel.cs",
              "url": "~/Models/CustomerViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This $FRAMEWORK Combobox UI demo shows how to easily apply an editable text box with flexible auto-searchable functionality of the dropdown list into your web app."
        }
      },
      {
        "text": "Tag Helper",
        "url": "multicolumncombobox/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Combobox Tag Helper sample"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "OrderViewModel.cs",
              "url": "~/Models/OrderViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Server filtering",
        "url": "multicolumncombobox/serverfiltering",
        "title": {
          "aspnet-core": "Server filtering in $FRAMEWORK MultiColumnComboBox"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "Check out this demo to see how the server filtering functionality works in $FRAMEWORK MultiColumnComboBox."
        }
      },
      {
        "text": "Virtualization",
        "url": "multicolumncombobox/virtualization",
        "title": {
          "aspnet-core": "Virtualization in $FRAMEWORK MultiColumnComboBox"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "OrderViewModel.cs",
              "url": "~/Models/OrderViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "Check out this demo to see how the virtualization functionality works in $FRAMEWORK MultiColumnComboBox."
        }
      },
      {
        "text": "Grouping",
        "url": "multicolumncombobox/grouping",
        "title": {
          "aspnet-core": "Grouping in $FRAMEWORK MultiColumnComboBox"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CustomerViewModel.cs",
              "url": "~/Models/CustomerViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "Check out this demo to see how the grouping functionality works in $FRAMEWORK MultiColumnComboBox."
        }
      },
      {
        "text": "Client filtering",
        "url": "multicolumncombobox/clientfiltering",
        "packages": [ "!online", "!jsp", "!php" ],
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Templates",
        "url": "multicolumncombobox/template",
        "title": {
          "aspnet-core": "Demo for customizing $FRAMEWORK MultiColumnComboBox Templates"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CustomerViewModel.cs",
              "url": "~/Models/CustomerViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This $FRAMEWORK MultiColumnComboBox demo shows how the template of the control can be customized to change the appearance of items in the auto-searchable list."
        }
      },
      {
        "text": "Cascading MultiColumnComboBox",
        "url": "multicolumncombobox/cascadingmulticolumncombobox",
        "title": {
          "aspnet-core": "Cascading $FRAMEWORK MultiColumnComboBox sample | UI for $FRAMEWORK demos"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CategoryViewModel.cs",
              "url": "~/Models/CategoryViewModel.cs"
            },
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            },
            {
              "name": "OrderViewModel.cs",
              "url": "~/Models/OrderViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how the cascading $FRAMEWORK MultiColumnComboBox control would fit any web application or website."
        }
      },
      {
        "text": "Custom data source",
        "url": "multicolumncombobox/custom-datasource",
        "packages": [ "!online", "!jsp", "!php" ]
      },
      {
        "text": "Events",
        "url": "multicolumncombobox/events",
        "title": {
          "aspnet-core": "Examples of events in $FRAMEWORK MultiColumnComboBox component"
        },
        "meta": {
          "aspnet-core": "This demo demonstrates useful events which are triggered in $FRAMEWORK MultiColumnComboBox upon user's selection of an item from the drop-down list."
        }
      },
      {
        "text": "API",
        "url": "multicolumncombobox/api",
        "title": {
          "aspnet-core": "Demo for $FRAMEWORK MultiColumnComboBox control API"
        },
        "meta": {
          "aspnet-core": "This sample shows all API functions for Telerik $FRAMEWORK MultiColumnComboBox control."
        }
      },
      {
        "text": "RTL support",
        "url": "multicolumncombobox/right-to-left-support",
        "title": {
          "aspnet-core": "Right-to-left support in $FRAMEWORK MultiColumnComboBox control"
        },
        "meta": {
          "aspnet-core": "Build your app with $FRAMEWORK MultiColumnComboBox. This demo shows how RTL feature is supported in the component."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "multicolumncombobox/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard nagivation in $FRAMEWORK MultiColumnComboBox | $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "$FRAMEWORK MultiColumnComboBox control for web app development supports easy keyboard navigation. Play with the demo to explore the functionality."
        }
      }
    ],
    "category": "Editors"
  },
  {
    "text": "MultiSelect",
    "name": "multiselect",
    "api": "web/multiselect",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/multiselect"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/multiselect"
    },
    "spriteCssClass": "multiselectIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "multiselect/index",
        "title": {
          "aspnet-core": "$FRAMEWORK MultiSelect control demo | UI for $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "Play with this demo to see the core functionality of Telerik $FRAMEWORK MultiSelect control."
        }
      },
      {
        "text": "Tag Helper",
        "url": "multiselect/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK MultiSelect Tag Helper sample"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "OrderViewModel.cs",
              "url": "~/Models/OrderViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Server filtering",
        "url": "multiselect/serverfiltering",
        "title": {
          "aspnet-core": "Example of Server filtering in $FRAMEWORK MultiSelect control"
        },
        "meta": {
          "aspnet-core": "See how the auto-searchable dropdown list of $FRAMEWORK MultiSelect is filtered on the the server based on the input."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            },
            {
              "name": "CategoryViewModel.cs",
              "url": "~/Models/CategoryViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Virtualization",
        "url": "multiselect/virtualization",
        "title": {
          "aspnet-core": "Example of virtualization in $FRAMEWORK MultiSelect control"
        },
        "meta": {
          "aspnet-core": "See how the auto-searchable dropdown list of $FRAMEWORK MultiSelect is virtualized."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "OrderViewModel.cs",
              "url": "~/Models/OrderViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Grouping",
        "url": "multiselect/grouping",
        "title": {
          "aspnet-core": "Example of grouping in $FRAMEWORK MultiSelect control"
        },
        "meta": {
          "aspnet-core": "See how the auto-searchable dropdown list of $FRAMEWORK MultiSelect displays grouped data."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CustomerViewModel.cs",
              "url": "~/Models/CustomerViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Client filtering",
        "url": "multiselect/clientfiltering",
        "packages": [ "!online", "!jsp", "!php" ],
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            },
            {
              "name": "CategoryViewModel.cs",
              "url": "~/Models/CategoryViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Customizing templates",
        "url": "multiselect/template",
        "title": {
          "aspnet-core": "Templates customization of $FRAMEWORK MultiSelect control"
        },
        "meta": {
          "aspnet-core": "This $FRAMEWORK MultiSelect demo shows how the template of the control can be customized to change the appearance of items and tags."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CustomerViewModel.cs",
              "url": "~/Models/CustomerViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Events",
        "url": "multiselect/events",
        "title": {
          "aspnet-core": "Events in $FRAMEWORK MultiSelect Component | $FRAMEWORK Demo"
        },
        "meta": {
          "aspnet-core": "This demo demonstrates the events which are triggered in $FRAMEWORK MultiSelect upon user's selection of an item from the drop-down list."
        }
      },
      {
        "text": "API",
        "url": "multiselect/api",
        "title": {
          "aspnet-core": "API of $FRAMEWORK MultiSelect control | $FRAMEWORK Demo"
        },
        "meta": {
          "aspnet-core": "In this demo you will find more about the API functions of $FRAMEWORK MultiSelect control."
        }
      },
      {
        "text": "Tag mode",
        "url": "multiselect/tag-mode",
        "title": {
          "aspnet-core": "Tag mode of $FRAMEWORK MultiSelect control | $FRAMEWORK Demo"
        },
        "meta": {
          "aspnet-core": "In this demo you will find more about the Tag mode feature of $FRAMEWORK MultiSelect control."
        }
      },
      {
        "text": "RTL support",
        "url": "multiselect/right-to-left-support",
        "title": {
          "aspnet-core": "RTL support in $FRAMEWORK MultiSelect control | $FRAMEWORK demo"
        },
        "meta": {
          "aspnet-core": "This example shows how RTL support is enabled in $FRAMEWORK MultiSelect. Any application or mobile website will be now intuitive for RTL language users."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "multiselect/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation in $FRAMEWORK MultiSelect component"
        },
        "meta": {
          "aspnet-core": "This demo demostrates the keyboard navigation for $FRAMEWORK MultiSelect control. Learn more about how you can use the keyboard shortcuts for easier navigation."
        }
      }
    ],
    "category": "Editors"
  },
  {
    "text": "MultiViewCalendar",
    "name": "multiviewcalendar",
    "api": "web/multiviewcalendar",
    "documentation": {
      "aspnet-core": "html-helpers/scheduling/multiviewcalendar/overview"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/multiviewcalendar"
    },
    "codelibrary": {
      "aspnet-core": "aspnet-core/multiviewcalendar"
    },
    "spriteCssClass": "multiviewcalendarIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "multiviewcalendar/index",
        "title": {
          "aspnet-core": "Example of $FRAMEWORK multiviewcalendar"
        },
        "meta": {
          "aspnet-core": "Explore the example of $FRAMEWORK multiviewcalendar control to find how easy it is to add a multiviewcalendar to your website or web app."
        },
        "description": {
          "aspnet-core": "<p>The <strong>Telerik MultiViewCalendar for $FRAMEWORK</strong> is a component that displays multiple calendar views. It supports the selection of and navigation between dates as well as date ranges for scheduling appointments.</p><p><strong>Key Features</strong></p> <ul style=\"list-style-type: disc;\"><li>View selection</li><li>Multiple views</li><li>Multiple and range selection</li><li>Disabled dates</li><li>Week number column</li><li>Accessibility and keyboard navigation</li></ul>"
        }
      },
      {
        "text": "View Selection",
        "url": "multiviewcalendar/view-selection",
        "title": {
          "aspnet-core": "Initial view and depth of $FRAMEWORK multiviewcalendar | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "The $FRAMEWORK multiviewcalendar allows the user to pre-define its initially rendered view or the depth of its view selection."
        },
        "description": {
          "aspnet-core": "<p><strong>MultiViewCalendar Start</strong></p><p>The start property can be used to set the first view that the MultiViewCalendar initially renders. The start option defines the following possible view options:</p><ul><li>month - Shows the days of the month</li><li>year - Shows the months of the year</li><li>decade - Shows the years of the decade</li><li>century - Shows the decades of the century</li></ul><p><strong>MultiViewCalendar Depth</strong></p><p>The MultiViewCalendar enables you to control the view depth to which the user can navigate. To determine its navigation view depth, use the depth property. Similarly to start option the depth accepts same option values: <strong>month</strong>, <strong>year</strong>, <strong>decade</strong> and <strong>century</strong>.</p><p><i>Note the option will not be applied if start option is lower than depth. Always set both and start and depth options.</i></p>"
        }
      },
      {
        "text": "Multiple Views",
        "url": "multiviewcalendar/multiple-views",
        "title": {
          "aspnet-core": "Displaying multiple months in $FRAMEWORK multiviewcalendar"
        },
        "meta": {
          "aspnet-core": "$FRAMEWORK multiviewcalendar allows to display multiple months at same time."
        },
        "description": {
          "aspnet-core": "<p>The <strong>Telerik MultiViewCalendar for $FRAMEWORK</strong> enables you to control the number of horizontally rendered views.</p><p> By default the MultiViewCalendar renders two views, but using the <strong>Views</strong> property you can set the desired number of views.</p>"
        }
      },
      {
        "text": "Selection",
        "url": "multiviewcalendar/selection",
        "title": {
          "aspnet-core": "Multiple Date Selection and Range Selection in the ASP.NET MVC multiviewcalendar | ASP.NET MVC demos"
        },
        "meta": {
          "aspnet-core": "This demo shows how ASP.NET MVC multiviewcalendar allows the user to select multiple dates or a range of dates using different selection modes offered by the widget."
        },
        "description": {
          "aspnet-core": "<p>By default the <strong>Telerik MultiViewCalendar for $FRAMEWORK</strong> performs single date selection. The widget also allows the user to select multiple dates or a range of dates. This is controlled by the <strong>Selectable</strong> option of the Kendo UI MultiViewCalendar with the following option values:<ul><li>Multiple - user is able to select multiple dates. The multiple selection functionality of the calendar widget can be performed with Ctrl or Shift keys.</li><br/><p>The Ctrl key allows user to perform multiple selection:</p><ol><li>Ctrl + Mouse Click on specific date will mark the date as selected and other previously selected dates will remain selected as well.</li><li>Selecting a date from a specific view without using Ctrl key will deselect all previously selected dates (including previously selected dates from other views/months) and select the date of the clicked cell.</li><li>Selecting a date that is already selected while hulding the Ctrl key will remove the date from the selection.</li></ol><p>The Shift key allows user to select a range of dates in the same month or between different months:</p><ol><li>Shift + Mouse Click selects all dates between the last selected one (with SPACE or Mouse Click) and the clicked cell.</li><li>Shift + Mouse Click when there is no previous selection will select all dates from the beginning to the clicked cell.</li></ol></li><li>Range - each subsequent mouse click sets respectevely <strong>start</strong> and <strong>end</strong> of the range to be selected. In case that the end is before the start it becomes start of the range</li></ul>"
        }
      },
      {
        "text": "Disabled dates",
        "url": "multiviewcalendar/disabled-dates",
        "title": {
          "aspnet-core": "Disabled dates in the $FRAMEWORK multiviewcalendar | $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "This demo shows how $FRAMEWORK multiviewcalendar allows you to disable dates"
        },
        "description": {
          "aspnet-core": "<p>The <strong>Telerik MultiViewCalendar for $FRAMEWORK</strong> allows you to disable certain days which are not intended to be selected by the end user such as weekends, national holidays, and others.</p> <p> This is controlled by the <strong>DisabledDates</strong> property and can be set to either <strong>array</strong> or <strong>function</strong></p>"
        }
      },
      {
        "text": "Week Column",
        "url": "multiviewcalendar/week-column",
        "title": {
          "aspnet-core": "Week column in the $FRAMEWORK multiviewcalendar | $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "This demo shows how $FRAMEWORK multiviewcalendar allows you to show a week number column in the month view"
        },
        "description": {
          "aspnet-core": "<p>In the <strong>Telerik MultiViewCalendar for $FRAMEWORK</strong>, you can render a column which displays the number of weeks within the current month view.</p> <p>To show the week number column, set the <strong>WeekNumber</strong> property.</p>"
        }
      },
      {
        "text": "API",
        "url": "multiviewcalendar/api",
        "title": {
          "aspnet-core": "Demo for $FRAMEWORK multiviewcalendar Control API"
        },
        "meta": {
          "aspnet-core": "This demo shows how the $FRAMEWORK multiviewcalendar API works and what kind of functions it supports."
        },
        "description": {
          "aspnet-core": "<p>The <strong>Telerik MultiViewCalendar for $FRAMEWORK</strong> allows to select multiple dates or a range of dates using the <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/ui/multiviewcalendar/methods/selectdates\" target=\"_blank\">selectDates</a> and <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/ui/multiviewcalendar/methods/selectrange\" target=\"_blank\">selectRange</a> methods.</p><p> In this example is demonstrated how the selectRange can be used for selecting a specific range of dates.</p>"
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "multiviewcalendar/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation demo for $FRAMEWORK multiviewcalendar"
        },
        "meta": {
          "aspnet-core": "You can easily navigate in <p>The <strong>Telerik MultiViewCalendar for $FRAMEWORK</strong> by using the keyboard. This demo shows the functionality, just look at the notes and play with the example.</p>"
        }
      }
    ],
    "category": "Scheduling"
  },
  {
    "text": "Notification",
    "name": "notification",
    "api": "web/notification",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/notification"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/notification"
    },
    "spriteCssClass": "notificationIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "notification/index",
        "title": {
          "aspnet-core": "$FRAMEWORK Notification Extension demo"
        },
        "meta": {
          "aspnet-core": "In this example you will see all options to show and hide a notification in $FRAMEWORK."
        }
      },
      {
        "text": "Tag Helper",
        "url": "notification/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Notification Tag Helper sample"
        }
      },
      {
        "text": "Position and stacking",
        "url": "notification/position-stacking",
        "title": {
          "aspnet-core": "Position and stacking of $FRAMEWORK Notification | $FRAMEWORK"
        },
        "meta": {
          "aspnet-core": "This demo shows the position and stacking behavior of the $FRAMEWORK Notification component."
        }
      },
      {
        "text": "Templates",
        "url": "notification/templates",
        "title": {
          "aspnet-core": " Layout notification templates for $FRAMEWORK"
        },
        "meta": {
          "aspnet-core": "In this example you will see how Telerik notification templates could be modified in $FRAMEWORK."
        }
      },
      {
        "text": "Events",
        "url": "notification/events",
        "title": {
          "aspnet-core": "Events of $FRAMEWORK Notification | $FRAMEWORK demo"
        },
        "meta": {
          "aspnet-core": "Demo about using events and handlers with the $FRAMEWORK Notification component."
        }
      },
      {
        "text": "API",
        "url": "notification/api",
        "title": {
          "aspnet-core": "API of $FRAMEWORK Notification | UI for $FRAMEWORK demo"
        },
        "meta": {
          "aspnet-core": "Demo about using the API of the $FRAMEWORK Notification component."
        }
      },
      {
        "text": "RTL support",
        "url": "notification/right-to-left-support",
        "title": {
          "aspnet-core": "RTL Support for $FRAMEWORK Notification | $FRAMEWORK demo"
        },
        "meta": {
          "aspnet-core": "Demo about the RTL support of the $FRAMEWORK Notification component."
        }
      }
    ],
    "category": "Layout"
  },
  {
    "text": "NumericTextBox",
    "name": "numerictextbox",
    "api": "web/numerictextbox",
    "updated": true,
    "documentation": {
      "aspnet-core": "helpers/html-helpers/numerictextbox"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/numerictextbox"
    },
    "spriteCssClass": "numericTextBoxIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "numerictextbox/index",
        "title": {
          "aspnet-core": "$FRAMEWORK NumericTextBox control demo"
        },
        "meta": {
          "aspnet-core": "This example illustrates how to use all core features of Telerik NumericTextBox for $FRAMEWORK."
        }
      },
      {
        "text": "Events",
        "url": "numerictextbox/events",
        "title": {
          "aspnet-core": "Events in $FRAMEWORK NumericTextBox control"
        },
        "meta": {
          "aspnet-core": "This example shows events which are triggered in $FRAMEWORK NumericTextBox control."
        }
      },
      {
        "text": "Floating Label",
        "url": "numerictextbox/floating-label",
        "new": true,
        "title": {
          "aspnet-core": "Floating Label in $FRAMEWORK NumericTextBox widget"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the $FRAMEWORK NumericTextBox Floating Label."
        },
        "description": {
          "aspnet-core": "This sample shows how to use the Floating Label of the $FRAMEWORK NumericTextBox widget. The Floating Label displays the type of input a field requires."
        }
      },
      {
        "text": "API",
        "url": "numerictextbox/api",
        "updated": true,
        "title": {
          "aspnet-core": "API Functions Demo for $FRAMEWORK NumericTextBox"
        },
        "meta": {
          "aspnet-core": "This demo shows specific API functions for $FRAMEWORK NumericTextBox component."
        }
      },
      {
        "text": "Globalization",
        "url": "numerictextbox/globalization",
        "packages": [ "!online", "!jsp", "!php" ]
      },
      {
        "text": "RTL support",
        "url": "numerictextbox/right-to-left-support",
        "title": {
          "aspnet-core": "RTL support in $FRAMEWORK NumericTextBox control"
        },
        "meta": {
          "aspnet-core": "This demo shows how right-to-left input is implemented in $FRAMEWORK Numeric TextBox component to ensure the satisfaction of RTL language users."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "numerictextbox/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation in $FRAMEWORK NumericTextBox"
        },
        "meta": {
          "aspnet-core": "The value in $FRAMEWORK NumericTextBox can be increased or decreased by using keyboard navigation combinations. Take a look at the demo to learn how."
        }
      },
      {
        "text": "Tag Helper",
        "url": "numerictextbox/tag-helper",
        "packages": [ "aspnet-core" ],
        "updated": true,
        "title": {
          "aspnet-core": "$FRAMEWORK NumericTextBox Tag Helper sample"
        }
      }
    ],
    "category": "Editors"
  },
  {
    "text": "PanelBar",
    "name": "panelbar",
    "api": "web/panelbar",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/panelbar"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/panelbar"
    },
    "spriteCssClass": "panelBarIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "panelbar/index",
        "title": {
          "aspnet-core": "Basic usage of $FRAMEWORK PanelBar control"
        },
        "meta": {
          "aspnet-core": "This example shows the core features of $FRAMEWORK Accordion component."
        }
      },
      {
        "text": "Tag Helper",
        "url": "panelbar/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK PanelBar Tag Helper sample"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "Category.cs",
              "url": "~/Models/SamplesEntities/Category.cs"
            },
            {
              "name": "Product.cs",
              "url": "~/Models/SamplesEntities/Product.cs"
            }
          ]
        }
      },
      {
        "text": "Images",
        "url": "panelbar/images",
        "title": {
          "aspnet-core": "Example of images in $FRAMEWORK PanelBar control"
        },
        "meta": {
          "aspnet-core": "This demo shows how images and sprites can be implemented in $FRAMEWORK Expandable PanelBar component."
        }
      },
      {
        "text": "Templates",
        "url": "panelbar/templates",
        "title": {
          "aspnet-core": "Example of templates for $FRAMEWORK PanelBar"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "PanelBarItemViewModel.cs",
              "url": "~/Models/PanelBar/PanelBarItemViewModel.cs"
            },
            {
              "name": "PanelBarRepository.cs",
              "url": "~/Models/PanelBar/PanelBarRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo illustrates how tree nodes in $FRAMEWORK PanelBar component can be further customized by using templates."
        },
        "packages": [
          "!jsp",
          "!php"
        ]
      },
      {
        "text": "Loading content with AJAX",
        "url": "panelbar/ajax",
        "title": {
          "aspnet-core": "Example of loading content with AJAX in $FRAMEWORK Accordion"
        },
        "meta": {
          "aspnet-core": "This example shows how content is loaded in $FRAMEWORK PanelBar component with AJAX."
        },
        "requiresServer": "true"
      },
      {
        "text": "Animation effects",
        "url": "panelbar/animation",
        "title": {
          "aspnet-core": "Animation effects example in $FRAMEWORK Accordion component"
        },
        "meta": {
          "aspnet-core": "This demo shows how animations effects can be easily implemented into $FRAMEWORK PanelBar control."
        }
      },
      {
        "text": "Binding to local data",
        "url": "panelbar/local-data-binding",
        "title": {
          "aspnet-core": "Binding to local data demo for $FRAMEWORK PanelBar control"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CategoryItem.cs",
              "url": "~/Models/TreeView/CategoryItem.cs"
            },
            {
              "name": "SubCategoryItem.cs",
              "url": "~/Models/TreeView/SubCategoryItem.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how items in the panelbar are displayed with the default settings of $FRAMEWORK PanelBar and how the component can be easily bound to local data."
        },
        "group": "Data Binding",
        "packages": [
          "!jsp",
          "!php"
        ]
      },
      {
        "text": "Binding to remote data",
        "url": "panelbar/remote-data-binding",
        "title": {
          "aspnet-core": "Binding $FRAMEWORK panelbar component to remote data"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "Employee.cs",
              "url": "~/Models/SamplesEntities/Employee.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example illustrates how the $FRAMEWORK hierarchical panelbar can be bound to remote data and the items in the panelbar populated from an external source."
        }
      },
      {
        "text": "Events",
        "url": "panelbar/events",
        "title": {
          "aspnet-core": "Events in $FRAMEWORK accordion control | $FRAMEWORK PanelBar"
        },
        "meta": {
          "aspnet-core": "This example demonstrates how events work in $FRAMEWORK PanelBar control and how you can set them to expand the content area of the accordion."
        },
        "requiresServer": "true",
        "group": "API",
        "packages": [
          "!jsp",
          "!php"
        ]
      },
      {
        "text": "API",
        "url": "panelbar/api",
        "title": {
          "aspnet-core": "$FRAMEWORK Accordion Control API Demo"
        },
        "meta": {
          "aspnet-core": "This sample shows the API functions of $FRAMEWORK PanelBar component."
        }
      },
      {
        "text": "RTL support",
        "url": "panelbar/right-to-left-support",
        "title": {
          "aspnet-core": "Keyboard navigation in $FRAMEWORK PanelBar | $FRAMEWORK demo"
        },
        "meta": {
          "aspnet-core": "See how directions of the arrows in $FRAMEWORK PanelBar are easily changed when moving from right to left."
        },
        "group": "Accessibility and Internationalization"
      },
      {
        "text": "Keyboard navigation",
        "url": "panelbar/keyboard-navigation",
        "title": {
          "aspnet-core": "Demo for keyboard navigation in $FRAMEWORK Collapsible Panel"
        },
        "meta": {
          "aspnet-core": "Users can navigate in $FRAMEWORK PanelBar by using the keyboard and different keyboard combinations. Play with the demo and implement the feature in your app."
        }
      }
    ],
    "category": "Navigation"
  },
  {
    "category": "PDF",
    "text": "PDFViewer",
    "name": "pdfviewer",
    "api": "web/pdfviewer",
    "pro": true,
    "documentation": {
      "aspnet-core": "/html-helpers/pdf/pdfviewer/overview"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/pdfviewer"
    },
    "spriteCssClass": "pdfviewerIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "pdfviewer/index",
        "title": {
          "aspnet-core": "Basic usage of the PDFViewer"
        },
        "meta": {
          "aspnet-core": "This demo shows how to use the PDFViewer."
        }
      },
      {
        "text": "Tag Helper",
        "url": "pdfviewer/tag-helper",
        "title": {
          "aspnet-core": "PDFViewer Tag Helper"
        },
        "meta": {
          "aspnet-core": "This demo shows how to use the PDFViewer tag helper."
        },
        "packages": [ "aspnet-core" ]
      },
      {
        "text": "DPL Processing",
        "url": "pdfviewer/dpl-processing",
        "title": {
          "aspnet-core": "DPL Processing in the PDFViewer"
        },
        "meta": {
          "aspnet-core": "This demo shows how to use DPL Processing in the PDFViewer."
        },
        "description": {
          "aspnet-core": "<p>DPL Processing is BETA version and has the following limitations: </p> <ul> <li>Clipping elements and Gradients are currently not supported.</li> <li>SVG or encoded images in other formats might not render correctly.</li> </ul>"
        },
        "packages": [ "!online", "!jsp", "!php" ]
      },
      {
        "text": "Events",
        "url": "pdfviewer/events",
        "title": {
          "aspnet-core": "Events of the PDFViewer"
        },
        "meta": {
          "aspnet-core": "This demo shows how to handle the PDFViewer events."
        },
        "packages": [
          "!jsp",
          "!php"
        ]
      },
      {
        "text": "API",
        "url": "pdfviewer/api",
        "title": {
          "aspnet-core": "API of the PDFViewer"
        },
        "meta": {
          "aspnet-core": "This demo shows how to use the PDFViewer API."
        },
        "packages": [
          "!jsp",
          "!php"
        ]
      },
      {
        "text": "Keyboard Navigation",
        "url": "pdfviewer/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard Navigation of the PDFViewer"
        },
        "meta": {
          "aspnet-core": "This demo shows how to navigate the PDFViewer with the keyboard."
        },
        "packages": [
          "!jsp",
          "!php"
        ]
      }
    ]
  },
  {
    "text": "ProgressBar",
    "name": "progressbar",
    "api": "web/progressbar",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/progressbar"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/progressbar"
    },
    "spriteCssClass": "progressBarIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "progressbar/index",
        "title": {
          "aspnet-core": "Basic usage of $FRAMEWORK ProgressBar control"
        },
        "meta": {
          "aspnet-core": "This example shows the core features of $FRAMEWORK ProgressBar component."
        }
      },
      {
        "text": "Tag Helper",
        "url": "progressbar/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK ProgressBar Tag Helper sample"
        }
      },
      {
        "text": "Chunk ProgressBar",
        "url": "progressbar/chunk",
        "title": {
          "aspnet-core": "Displaying a progress in chunks in $FRAMEWORK ProgressBar"
        },
        "meta": {
          "aspnet-core": "See how you can display chunks of progress in $FRAMEWORK ProgressBar."
        }
      },
      {
        "text": "Vertical ProgressBar",
        "url": "progressbar/vertical",
        "title": {
          "aspnet-core": "Displaying a vertical progress in $FRAMEWORK ProgressBar"
        },
        "meta": {
          "aspnet-core": "$FRAMEWORK ProgressBar can be oriented both horizontally and vertically. See how and play with the demo."
        }
      },
      {
        "text": "Custom Label",
        "url": "progressbar/customlabel",
        "title": {
          "aspnet-core": "Displaying a custom progress label in $FRAMEWORK ProgressBar"
        },
        "meta": {
          "aspnet-core": "This demo shows how you can display custom progress label in $FRAMEWORK ProgressBar to indicate the level of progress."
        }
      },
      {
        "text": "Events",
        "url": "progressbar/events",
        "title": {
          "aspnet-core": "Events in $FRAMEWORK ProgressBar control"
        },
        "meta": {
          "aspnet-core": "This example demonstrates how events work in $FRAMEWORK ProgressBar control."
        }
      },
      {
        "text": "API",
        "url": "progressbar/api",
        "title": {
          "aspnet-core": "$FRAMEWORK ProgressBar API demo"
        },
        "meta": {
          "aspnet-core": "This sample shows the API functions of $FRAMEWORK ProgressBar component."
        }
      },
      {
        "text": "RTL Support",
        "url": "progressbar/right-to-left-support",
        "title": {
          "aspnet-core": "$FRAMEWORK ProgressBar RTL Support"
        },
        "meta": {
          "aspnet-core": "Demo about the right-to-left (RTL) support of the $FRAMEWORK ProgressBar component."
        }
      }
    ],
    "category": "Interactivity & UX"
  },
  {
    "text": "Ripple Container",
    "name": "ripplecontainer",
    "spriteCssClass": "rippleIcon",
    "api": "web/ripplecontainer",
    "items": [
      {
        "text": "Basic Usage",
        "url": "ripplecontainer/index",
        "title": {
          "aspnet-core": "$FRAMEWORK RippleContainer Demo"
        },
        "meta": {
          "aspnet-core": "This example illustrates the core functionality of the Kendo UI RippleContainer."
        }
      }
    ],
    "category": "Interactivity & UX"
  },
  {
    "text": "Gantt",
    "name": "gantt",
    "api": "web/gantt",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/gantt"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/gantt"
    },
    "spriteCssClass": "ganttIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "gantt/index",
        "title": {
          "aspnet-core": "Example of ASP.NET Core Gantt chart"
        },
        "meta": {
          "aspnet-core": "Explore the example of HTML5 gantt chart widget, included in ASP.NET Core Web, to find how easy it is to add a gantt chart to your website or web app."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Gantt/TaskViewModel.cs"
            },
            {
              "name": "GanttTask.cs",
              "url": "~/Models/SamplesEntities/GanttTask.cs"
            }
          ]
        }
      },
      {
        "text": "Tag Helper",
        "url": "gantt/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Gantt Tag Helper sample"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Gantt/TaskViewModel.cs"
            },
            {
              "name": "DependencyViewModel.cs",
              "url": "~/Models/Gantt/DependencyViewModel.cs"
            },
            {
              "name": "ResourceAssignmentViewModel.cs",
              "url": "~/Models/Gantt/ResourceAssignmentViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Column resizing",
        "url": "gantt/column-resizing",
        "title": {
          "aspnet-core": "Column resizing in Telerik $FRAMEWORK Gantt"
        },
        "meta": {
          "aspnet-core": "In this demo you can see how simple it is to resize columns in the Telerik $FRAMEWORK Gantt."
        },
        "group": "Functionality",
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Gantt/TaskViewModel.cs"
            },
            {
              "name": "DependencyViewModel.cs",
              "url": "~/Models/Gantt/DependencyViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Export to PDF",
        "url": "gantt/pdf-export",
        "title": {
          "aspnet-core": "Exporting to PDF"
        },
        "meta": {
          "aspnet-core": "Export ASP.NET Core gantt as PDF file"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Gantt/TaskViewModel.cs"
            },
            {
              "name": "DependencyViewModel.cs",
              "url": "~/Models/Gantt/DependencyViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Resources",
        "url": "gantt/resources",
        "title": {
          "aspnet-core": "Resources in ASP.NET Core Gantt"
        },
        "meta": {
          "aspnet-core": "This demo shows how to assign resources to gantt tasks."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Gantt/TaskViewModel.cs"
            },
            {
              "name": "DependencyViewModel.cs",
              "url": "~/Models/Gantt/DependencyViewModel.cs"
            },
            {
              "name": "ResourceAssignmentViewModel.cs",
              "url": "~/Models/Gantt/ResourceAssignmentViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Task Template",
        "url": "gantt/task-template",
        "title": {
          "aspnet-core": "Task template support of ASP.NET Core Gantt"
        },
        "meta": {
          "aspnet-core": "This demo shows the Task template support of ASP.NET Core Gantt."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Gantt/TaskViewModel.cs"
            },
            {
              "name": "DependencyViewModel.cs",
              "url": "~/Models/Gantt/DependencyViewModel.cs"
            },
            {
              "name": "ResourceAssignmentViewModel.cs",
              "url": "~/Models/Gantt/ResourceAssignmentViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Selected Date and Range",
        "url": "gantt/selected-date-and-range",
        "title": {
          "aspnet-core": "Setting selected date and selected visible range of Telerik $FRAMEWORK Gantt"
        },
        "meta": {
          "aspnet-core": "This demo shows how to select date and visible range, using the corresponding Telerik $FRAMEWORK Gantt properties."
        }
      },
      {
        "text": "Events",
        "url": "gantt/events",
        "title": {
          "aspnet-core": "Example of using events in ASP.NET Core Gantt control"
        },
        "meta": {
          "aspnet-core": "This example demonstrates different events which are available in KendoGantt widget and the code explains how you can use them for your project."
        },
        "group": "API",
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Gantt/TaskViewModel.cs"
            },
            {
              "name": "DependencyViewModel.cs",
              "url": "~/Models/Gantt/DependencyViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "API",
        "url": "gantt/api",
        "title": {
          "aspnet-core": "ASP.NET Core Gantt API Functions Example"
        },
        "meta": {
          "aspnet-core": "This demo shows API Functions of KendoGantt. Demo Source Code will show you how to call methods on the widget instance to script its behavior."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Gantt/TaskViewModel.cs"
            },
            {
              "name": "DependencyViewModel.cs",
              "url": "~/Models/Gantt/DependencyViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "RTL Support",
        "url": "gantt/right-to-left-support",
        "title": {
          "aspnet-core": "Right-to-left (RTL) support of ASP.NET Core Gantt"
        },
        "meta": {
          "aspnet-core": "This demo shows the Right-to-left (RTL) support of ASP.NET Core Gantt."
        },
        "group": "Accessibility and Internationalization",
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Gantt/TaskViewModel.cs"
            },
            {
              "name": "DependencyViewModel.cs",
              "url": "~/Models/Gantt/DependencyViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "gantt/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation in ASP.NET Core Gantt"
        },
        "meta": {
          "aspnet-core": "Look at this ASP.NET Core Gantt demo to learn how different keyboard combinations could be used to navigate in the component."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Gantt/TaskViewModel.cs"
            },
            {
              "name": "DependencyViewModel.cs",
              "url": "~/Models/Gantt/DependencyViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Server binding",
        "url": "gantt/serverbinding",
        "group": "Binding",
        "packages": [ "!online", "!jsp", "!php" ],
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Gantt/TaskViewModel.cs"
            },
            {
              "name": "DependencyViewModel.cs",
              "url": "~/Models/Gantt/DependencyViewModel.cs"
            }
          ]
        }
      }
    ],
    "category": "Scheduling"
  },
  {
    "text": "Responsive Panel",
    "name": "responsive-panel",
    "api": "web/responsivepanel",
    "documentation": {
      "aspnet-core": "helpers/tag-helpers/responsive-panel"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/responsivepanel"
    },
    "spriteCssClass": "responsivePanelIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "responsive-panel/index",
        "title": {
          "aspnet-core": "$FRAMEWORK ResponsivePanel Control Demo"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "Index.cs",
              "url": "~/Controllers/Responsive_Panel/Index.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows the basic functionality of the Telerik $FRAMEWORK ResponsivePanel control."
        }
      }
    ],
    "category": "Layout"
  },
  {
    "text": "Scheduler",
    "name": "scheduler",
    "api": "web/scheduler",
    "updated": true,
    "documentation": {
      "aspnet-core": "helpers/html-helpers/scheduler"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/scheduler"
    },
    "spriteCssClass": "schedulerIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "scheduler/index",
        "title": {
          "aspnet-core": "$FRAMEWORK Scheduler Control Demo"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Scheduler/TaskViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows the basic functionality and UI of the Telerik $FRAMEWORK Scheduler control."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK Scheduler component allows you to easily display, edit and schedule appointments. You can display day, week, month and agenda views, group horizontally and vertically and enjoy out-of-the-box templates.</p> <p><strong>Key Features</strong></p> <ul> <li>Day, Week, Work Week, Month, Agenda and Timeline views</li> <li>Multiple Resources and Resource Grouping</li> <li>Templates for Appointments</li> <li>Time Zone Support</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich API for maximum flexibility</li> <li>Export to PDF</li> <li>Accessibility, keyboard navigation and RTL Support</li> <li>Rich cross-browser and mobile support</li> <li>Responsive HTML 5 Rendering</li> </ul> <p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/scheduler\">Scheduler for $FRAMEWORK</a></p>"
        }
      },
      {
        "text": "Adaptive Rendering",
        "url": "scheduler/adaptive-rendering",
        "title": {
          "aspnet-core": "Adaptive rendering in $FRAMEWORK Scheduler"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "MeetingViewModel.cs",
              "url": "~/Models/Scheduler/MeetingViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how adaptive rendering is configured in Kendo UI Scheduler."
        },
        "description": {
          "aspnet-core": "<p>The $FRAMEWORK Scheduler supports adaptive enhancements like changes in styling and behavior in order to remain consistent with the specific user device experience.</p> <p>This example demonstrates how to enable the adaptive rendering feature by setting the <b><a target=\"_blank\" href=\"https://docs.telerik.com/aspnet-mvc/api/Kendo.Mvc.UI.Fluent/SchedulerBuilder#mobilekendomvcuimobilemode\">Mobile</a></b> option to 'auto'.</p><p>More information regarding Kendo UI Scheduler Adaptive Rendering can be found in the documentation <a target=\"_blank\" href=\"https://docs.telerik.com/aspnet-mvc/helpers/scheduler/adaptive-rendering\">here</a>.</p>\n"
        }
      },
      {
        "text": "Tag Helper",
        "url": "scheduler/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Scheduler Tag Helper sample"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Scheduler/TaskViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Adaptive Slot Height",
        "url": "scheduler/adaptive-slot-height",
        "title": {
          "aspnet-core": "Adaptive Slot Height in Month view in ASP.NET Core Scheduler"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Scheduler/TaskViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows the the Adaptive Slot Height functionality, available in the Month View of the Telerik UI for ASP.NET Core Scheduler."
        },
        "group": "Functionality",
        "description": {
          "aspnet-core": "<p>The Telerik UI for ASP.NET Core Scheduler enables you with the possibility to dynamicaly change the height of the slots in Month view, in order to fit the events in the specific slot. In order to get advantage of this functionality, you need to enable the <b>AdaptiveSlotHeight</b> property. In combination, you can set a preferable maximum of events that can be rendered in the slots using the <b>EventsPerDay</b> property.</p>"
        }
      },
      {
        "text": "Auto Event Height",
        "url": "scheduler/auto-event-height",
        "title": {
          "aspnet-core": "Auto Event Height in Month view in Telerik UI for ASP.NET Core Scheduler"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Scheduler/TaskViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows the the Auto Event Height functionality, available in the Month View of the Telerik UI for ASP.NET Core Scheduler."
        },
        "description": {
          "aspnet-core": "<p>The Month View in the Telerik UI for ASP.NET MVC Scheduler allows you to set an <b>AutoHeigh</b> functionality for the events. This option will take into account the event subject when rendering in, in order to display the entire content. Setting the <b>EventHeight</b> to <b>auto</b> automatically enables the <b>AdaptiveSlotHeight</b> option.</p>"
        }
      },
      {
        "text": "Timeline view",
        "url": "scheduler/timeline",
        "title": {
          "aspnet-core": "Timeline view in ASP.NET Core Scheduler"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "MeetingViewModel.cs",
              "url": "~/Models/Scheduler/MeetingViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows the Timeline, Timeline Week and Timeline Work Week views."
        },
        "description": {
          "aspnet-core": "<p>The Scheduler's Timeline view allows you to display a variable number of appointment slots and define their duration. You can use the Timeline to provide end-users with an overview for scheduling purposes.</p> <p>You can define and show the available time line views through the Views -&gt; TimelineView, TimelineWeekView, TimelineWorkWeekView and TimelineMonthView settings. You can further customize these views by setting their StartTime, EndTime, MajorTick, ShowWorkHours, WorkDayStart, WorkDayEnd, WorkWeekStart, WorkWeekEnd and other properties.</p>"
        }
      },
      {
        "text": "Timeline Overnight view",
        "url": "scheduler/timeline-night",
        "title": {
          "aspnet-core": "Timeline view configured with overnight major slots in ASP.NET Core Scheduler"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "MeetingViewModel.cs",
              "url": "~/Models/Scheduler/MeetingViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows the Timeline and Timeline Week to show overnight major slots."
        },
        "description": {
          "aspnet-core": "<p>The Scheduler Timeline view allows you to display overnight major slots by configuring the startTime and the endTime of the view.</p>"
        }
      },
      {
        "text": "Selection",
        "url": "scheduler/event-selection",
        "title": {
          "aspnet-core": "Multiple selection in ASP.NET Core Scheduler"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Scheduler/TaskViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows the multiple selection and drag drop functionality of the Scheduler"
        },
        "description": {
          "aspnet-core": "<p>The ASP.NET Core Scheduler allows you to select several events at once, and move them simultaneously by drag & drop.</p>"
        }
      },
      {
        "text": "Import and Export to iCal",
        "url": "scheduler/import-export-ical",
        "new": true,
        "title": {
          "aspnet-core": "Importing and Exporting to iCal format"
        },
        "meta": {
          "aspnet-core": "Import and export events from the ASP.NET Core Scheduler to iCal format."
        },
        "description": {
          "aspnet-core": "<p>In this example you can see how you can use a third-party library (in this case <a href='https://github.com/mozilla-comm/ical.js/'>ical.js</a>) that supports the <a href='https://tools.ietf.org/html/rfc5545'>iCalendar standard</a> to import or export the ASP.NET Core Scheduler events.</p>"
        }
      },
      {
        "text": "Export to PDF",
        "url": "scheduler/pdf-export",
        "title": {
          "aspnet-core": "Exporting to PDF"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Scheduler/TaskViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "Export ASP.NET Core scheduler as PDF file"
        },
        "description": {
          "aspnet-core": "<p>Nowadays, the PDF format is very popular and widely used to present documents in a manner independent of application software, hardware and operating systems. This demo demonstrates how to export the Telerik Core Scheduler contents to PDF.</p> <p>The approach is very straight-forward - to export the content to PDF include the corresponding command to the scheduler&rsquo;s toolbar&nbsp;.Toolbar(t =&gt; t.Pdf())<span> </span>and configure the export settings through the Pdf attribute. You can specify the file name and whether to export all pages, margins, paper size, font and other.</p>"
        }
      },
      {
        "text": "Search Events",
        "url": "scheduler/search-events",
        "new": true,
        "title": {
          "aspnet-core": "Search Events"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Scheduler/TaskViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "ASP.NET Core scheduler with the Search Events feature enabled"
        },
        "description": {
          "aspnet-core": "<p>With the search tool enabled you can filter the events that match the search term in the title or description.</p>"
        }
      },
      {
        "text": "Resources",
        "url": "scheduler/resources",
        "title": {
          "aspnet-core": "Resources in $FRAMEWORK Scheduler"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "MeetingViewModel.cs",
              "url": "~/Models/Scheduler/MeetingViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how to assign resources to events in $FRAMEWORK Scheduler."
        },
        "description": {
          "aspnet-core": "<p>Telerik Core Scheduler extension allows you to assign scheduler events to a set of predefined resources. The resources can be divided on:</p> <ul> <li>Single Instance Resources &ndash; when only one instance can be assigned to a scheduler event. This is for example a list of meetings (Scheduler events), which are held in two rooms (resources). Since a meeting can be held in only one room it can be considered a single resource.</li> <li>Multiple Instance Resources<span> - </span>when more than one instance can be assigned to a scheduler event. For example when there is a list of meetings and meeting attendees. Since more than one attendee can participate in a meeting, it is a multiple instance resource. You can enable this feature through the Resources -&gt; .Multiple(true) setting.</li> </ul> <p>The Scheduler supports also unlimited resource types. For example you can combine single and multiple resource as shown in this demo.</p>"
        }
      },
      {
        "text": "Horizontal Grouping",
        "url": "scheduler/resources-grouping-horizontal",
        "title": {
          "aspnet-core": "Horizontal resources grouping in $FRAMEWORK Scheduler control"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "MeetingViewModel.cs",
              "url": "~/Models/Scheduler/MeetingViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how to group resources horizontally in $FRAMEWORK Scheduler."
        },
        "description": {
          "aspnet-core": "<p>This demo illustrates how you can group the resources horizontally in $FRAMEWORK Scheduler. The direction of the grouping can be controlled with the Orientation property, i.e.</p> <p>.Group(group =&gt; group.Resources(\"Rooms\").Orientation(SchedulerGroupOrientation.Horizontal))</p> <p>The available options of the SchedulerGroupOrientation setting are Default, Horizontal and Vertical.</p>"
        }
      },
      {
        "text": "Vertical Grouping",
        "url": "scheduler/resources-grouping-vertical",
        "title": {
          "aspnet-core": "Vertical resources grouping in $FRAMEWORK Scheduler control"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "MeetingViewModel.cs",
              "url": "~/Models/Scheduler/MeetingViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how to group resources vertically in $FRAMEWORK Scheduler."
        },
        "description": {
          "aspnet-core": "<p>You can see in this example how to group the scheduler&rsquo;s resources vertically. The direction of the grouping can be controlled with the Orientation property, i.e.</p> <p>.Group(group =&gt; group.Resources(\"Rooms\", \"Attendees\").Orientation(SchedulerGroupOrientation.Vertical))</p> <p>The available orientation options are Default, Horizontal and Vertical.</p>"
        }
      },
      {
        "text": "Virtual Vertical Grouping",
        "url": "scheduler/resources-grouping-vertical-virtual",
        "new": true,
        "title": {
          "aspnet-core": "Virtual Vertical resources grouping in $FRAMEWORK Scheduler control"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "MeetingViewModel.cs",
              "url": "~/Models/Scheduler/MeetingViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how to group resources vertically in $FRAMEWORK Scheduler with DOM virtualization."
        },
        "description": {
          "aspnet-core": "<p>The <strong>Vertical Virtualization</strong> optimizes the views' rendering by doing a DOM virtualization. It is supported only for Day, Week, WorkWeek and Month views.</p><p>You can enable it by using the <strong>Virtual(true)</strong> method in the view configuration <code>views.WeekView(view => view.Selected(true).Virtual(true));</code>.</p><p>When enabled the view will render additional DOM elements as you scroll down.</p>"
        }
      },
      {
        "text": "Date Grouping",
        "url": "scheduler/date-grouping",
        "title": {
          "aspnet-core": "Date grouping in $FRAMEWORK Scheduler control"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "MeetingViewModel.cs",
              "url": "~/Models/Scheduler/MeetingViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows horizontal and vertical grouping by Date in $FRAMEWORK Scheduler."
        },
        "description": {
          "aspnet-core": "<p>This demo shows horizontal and vertical grouping by Date in $FRAMEWORK Scheduler. The direction of the grouping can be controlled with the Orientation property, i.e.</p> <p>.Group(group =&gt; group.Resources(\"Rooms\").Orientation(SchedulerGroupOrientation.Horizontal))</p> <p>The available options of the SchedulerGroupOrientation setting are Default, Horizontal and Vertical.</p>"
        }
      },
      {
        "text": "Templates",
        "url": "scheduler/templates",
        "title": {
          "aspnet-core": "Templates in $FRAMEWORK Scheduler"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "Projection.cs",
              "url": "~/Models/Scheduler/Projection.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how to use templates to customize the appearance of the scheduler events of your $FRAMEWORK app."
        },
        "description": {
          "aspnet-core": "<p>This example illustrates how to use templates to customize the appearance of the scheduler events. You can use the eventTemplate setting to create a template for the scheduler&rsquo;s events. Other template settings provided by the widget are allDayEventTemplate, dateHeaderTemplate, groupHeaderTemplate, majorTimeHeaderTemplate and minorTimeHeaderTemplate.</p> <p>Templates use a simple templating syntax where the hash # symbol is used to mark areas in a template that should be replaced with data when the template is executed. The # character is also used to signify the beginning and end of custom JavaScript code inside the template.</p> <p>There are three ways to use the hash syntax:</p> <ol> <li>Render values as HTML: #= # </li> <li>Uses HTML encoding to display values: #: # </li> <li>Execute arbitrary JavaScript code: # if (true) { # ... non-script content here ... # } # </li> </ol> <p>You can find more information about the templates in this article: <a href=\"https://docs.telerik.com/kendo-ui/framework/templates/overview\">ASP.NET Core Templates Overview</a>.</p>"
        }
      },
      {
        "text": "Restrictions",
        "url": "scheduler/restriction",
        "title": {
          "aspnet-core": "Restrictions in $FRAMEWORK Scheduler | UI for $FRAMEWORK Demos"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "MeetingViewModel.cs",
              "url": "~/Models/Scheduler/MeetingViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "Set restrictions to better control your resources with $FRAMEWORK Scheduler."
        },
        "description": {
          "aspnet-core": "<p>This demo shows how you can restrict the events and better control your resources in $FRAMEWORK Scheduler using the client-side API of the component. You can prevent not only to the drag and resize capabilities of the appointments, but also allow or not the creation of a new event or the modification of an existing one by criteria defined by you.</p> <p>For example, double click on the \"Call Charlie about the project\" event, change the attendee to Bob and click SAVE. This will result into an error: \"This person is not available in this time period.\"</p> <p>You will also get an error \"This person is not available in this time period.\", if you change the start date of the \"HR Lecture\" event to 10:30 AM.</p>"
        }
      },
      {
        "text": "Event move & resize",
        "url": "scheduler/move-resize",
        "title": {
          "aspnet-core": "Moving and resizing events in $FRAMEWORK Scheduler"
        },
        "meta": {
          "aspnet-core": "This demo shows the move and resize feature of $FRAMEWORK Scheduler."
        },
        "description": {
          "aspnet-core": "<p>The $FRAMEWORK Scheduler allows you and your users to move and resize its events. In addition to this, you can also specify whether the scheduler will either snap events to the nearest slot during dragging (resizing or moving) or it will allow free moving and resizing of events. You can do that through the <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/ui/scheduler#configuration-snap\">snap client-side bool property</a> of the scheduler as shown in this example.</p>"
        }
      },
      {
        "text": "Change Working Days",
        "url": "scheduler/change-working-days",
        "new":  true,
        "title": {
          "aspnet-core": "Change the working days in $FRAMEWORK Scheduler"
        },
        "meta": {
          "aspnet-core": "This demo shows how to set specific days of the week as working days in $FRAMEWORK Scheduler."
        },
        "description": {
          "aspnet-core": "<p>You can change the working days of the week by using the <strong>WorkDays</strong> method.</p><p>The days to set are index based and the <strong>WorkDays</strong> method accepts an <code>int[]</code> as argument.</p><p>In this example <code>new int[] { 1,3,4 }</code> sets Monday, Wednesday and Thursday as working days of the week.</p><p>You can set the <strong>WorkDays</strong> method to the <strong>Scheduler</strong> to set the working days for all Views. Or you can set it through the configuration of an individual View.</p>"
        }
      },
      {
        "text": "Binding to SignalR",
        "url": "scheduler/signalr",
        "title": {
          "aspnet-core": "Real-time Binding to SignalR Hub | UI for $FRAMEWORK demos"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "MeetingSignalRViewModel.cs",
              "url": "~/Models/Scheduler/MeetingSignalRViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example shows how the Telerik $FRAMEWORK Scheduler can be bound to SignalR Hub for real-time push notifications."
        },
        "group": "Data Binding",
        "description": {
          "aspnet-core": "<p>This demo shows how the Telerik $FRAMEWORK Scheduler can be bound to a <a href=\"https://www.asp.net/signalr\">SignalR</a> Hub for real-time push notifications. This is useful for web applications (chat, calendar and scheduling, gaming and other apps) which require high-frequency updates where you usually want to perform data updates in real-time on all connected clients.</p> <p>To configure the SignalR binding, set the <strong>SignalR</strong> and <strong>Transport</strong> settings in the Scheduler&rsquo;s DataSource configuration. In this way you instruct the data source to use SignalR protocol for transmitting and operating with data in real time.</p>"
        }
      },
      {
        "text": "Binding to Kinvey Backend Services",
        "url": "scheduler/kinvey",
        "title": {
          "aspnet-core": "Binding $FRAMEWORK Scheduler to Kinvey Backend Services"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Scheduler/TaskViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "In this sample you will see in action how Telerik $FRAMEWORK Scheduler is bound to Kinvey cloud-based services."
        },
        "description": {
          "aspnet-core": "<h4>What are the Kinvey Backend Services?</h4><p>Kinvey Backend Services are a set of cloud-based services that enable developers to build and manage mobile apps significantly faster, easier and more scalable way. Kinvey Backend Services can significantly speed-up development by providing your app with data storage, user management and server-code execution.</p><p style=\"padding-top: 1em;\">&raquo; <a class=\"hyperlink\" href=\"https://www.kinvey.com/\" title=\"Getting started with Kinvey Backend Services\">What are Kinvey Backend Services</a></p><p>&raquo; <a class=\"hyperlink\" href=\"https://devcenter.kinvey.com/html5/guides/getting-started\">Kinvey Backend Services HTML5 SDK</a></p><p>&raquo; <a class=\"hyperlink\" href=\"https://github.com/Kinvey/kinvey-kendo-data-source\" title=\"Introduction to Kendo UI and Kinvey Backend Services JavaScript integration\">Integration with Kendo UI</a></p><p class=\"demo-hint\" style=\"padding-top: 1em;\">Note: The Kinvey Backend Services data source is not supported on IE11 and below yet, because it relies on <a class=\"hyperlink\" href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\">cross-origin resource sharing</a>.</p>"
        },
        "packages": [
          "!jsp",
          "!php"
        ]
      },
      {
        "text": "Web API binding",
        "url": "scheduler/webapi",
        "packages": [ "!online", "!jsp", "!php" ],
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Scheduler/TaskViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Custom data source",
        "url": "scheduler/custom-datasource",
        "packages": [ "!online", "!jsp", "!php" ],
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Scheduler/TaskViewModel.cs"
            }
          ]
        }
      },
      {
        "text": "Events",
        "url": "scheduler/events",
        "title": {
          "aspnet-core": "Events in $FRAMEWORK Scheduler"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Scheduler/TaskViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how events are handled and triggered in $FRAMEWORK Scheduler."
        },
        "group": "API",
        "description": {
          "aspnet-core": "<p>Telerik Core Scheduler exposes rich API and events which provide easy configuration or extension points for customization on top of its built-in features.</p> <p>This example demonstrates how you can intercept the scheduler's events to output messages in the console when these events are raised. You can use these events for customizations or to execute custom logic, if necessary.</p>"
        }
      },
      {
        "text": "API",
        "url": "scheduler/api",
        "title": {
          "aspnet-core": "API in Telerik $FRAMEWORK Scheduler component"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Scheduler/TaskViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows the API of Telerik $FRAMEWORK Scheduler control."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Scheduler for $FRAMEWORK exposes rich client-side API and events, which provide easy configuration or extension points for custom functionality on top of the built-in features.</p> <p>In this demo, you can see how to get a reference to the scheduler's client-side object and using its date() and view() methods to update its current date and current view.</p> <p>You can find more information about its client-side API <a href=\"https://docs.telerik.com/KENDO-UI/api/javascript/ui/scheduler\">here</a>.</p>"
        }
      },
      {
        "text": "RTL Support",
        "url": "scheduler/right-to-left-support",
        "title": {
          "aspnet-core": "Right-to-left (RTL) support for $FRAMEWORK Scheduler control"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Scheduler/TaskViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows the Right-to-left (RTL) support for $FRAMEWORK Scheduler."
        },
        "group": "Accessibility and Internationalization",
        "description": {
          "aspnet-core": "<p>The Telerik Core Scheduler supports right-to-left languages and rendering. All you need to do is to register the <strong>kendo.rtl.min.css</strong> file (located at Kendo.Mvc.Examples\\Content\\web\\ installation folder) and wrap the scheduler in a container element with <strong>k-rtl</strong> class set for it, as demonstrated in this particular example.</p> <p>You can learn more for the right-to-left support of the components in <a href=\"https://docs.telerik.com/kendo-ui/accessibility/supporting-rtl-languages\" target=\"_blank\">this article</a>.</p>"
        }
      },
      {
        "text": "Keyboard Navigation",
        "url": "scheduler/selection",
        "title": {
          "aspnet-core": "Selection and Keyboard navigation in $FRAMEWORK Scheduler"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "MeetingViewModel.cs",
              "url": "~/Models/Scheduler/MeetingViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows the selection and the different keyboard combinations that could be used to navigate in $FRAMEWORK Scheduler."
        },
        "description": {
          "aspnet-core": "<p>The Scheduler offers extended keyboard navigation which allows you to focus the control, navigate over its cells, to select an appointment and modify it, to create new appointments, to switch between the available views as many more. This is especially useful for the visually impaired users. </p> <p>For more information on the supported keyboard shortcuts see the provided information box.</p>"
        }
      },
      {
        "text": "Localization and Globalization",
        "url": "scheduler/globalization",
        "packages": [ "!online", "!jsp", "!php" ],
        "sources": {
          "aspnet-core": [
            {
              "name": "TaskViewModel.cs",
              "url": "~/Models/Scheduler/TaskViewModel.cs"
            }
          ]
        }
      }
    ],
    "category": "Scheduling"
  },
  {
    "text": "Rating",
    "name": "rating",
    "api": "web/rating",
    "documentation": {
      "aspnet-core": "html-helpers/editors/rating/overview"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/rating"
    },
    "category": "Editors",
    "spriteCssClass": "ratingIcon",
    "items": [
      {
        "text": "Basic Usage",
        "url": "rating/index",
        "title": {
          "aspnet-core": "Basic usage of the Telerik $FRAMEWORK Rating Demo | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the Rating widget"
        },
        "description": {
          "aspnet-core": "<p>The <strong>Telerik $FRAMEWORK Rating</strong> allows users to intuitively rate items in their applications by selecting number of items [stars] from a predefined maximum number of items. </p><p><strong>Key Features</strong></p><ul style=\"list-style-type: disc;\"><li>Selection</li><li>Precision</li><li>Label</li><li>Tooltip</li><li>Templates</li><li>Accessibility, keyboard navigation and RTL Support</li></ul><p>Additional information about how to use the Telerik $FRAMEWORK Rating widget can be found in <a href=\"https://docs.telerik.com/aspnet-core/html-helpers/editors/rating/overview\" target=\"_blank\">this section</a> of the product documentation.</p>\n"
        }
      },
      {
        "text": "Tag Helper",
        "url": "rating/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "Telerik $FRAMEWORK Rating Tag Helper Demo | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates initializing the Rating through its Tag Helper"
        }
      },
      {
        "text": "Selection",
        "url": "rating/selection",
        "title": {
          "aspnet-core": "Telerik $FRAMEWORK Rating Selection Demo | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the Rating selection modes"
        }
      },
      {
        "text": "Precision",
        "url": "rating/precision",
        "title": {
          "aspnet-core": "Telerik $FRAMEWORK Rating Precision Demo | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the Rating precision modes"
        }
      },
      {
        "text": "Label",
        "url": "rating/label",
        "title": {
          "aspnet-core": "Telerik $FRAMEWORK Rating Label Demo | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the Rating label functionality"
        }
      },
      {
        "text": "Tooltip",
        "url": "rating/tooltip",
        "title": {
          "aspnet-core": "Telerik $FRAMEWORK Rating Tooltip Demo | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the Rating tooltip functionality"
        }
      },
      {
        "text": "Templates",
        "url": "rating/templates",
        "title": {
          "aspnet-core": "Telerik $FRAMEWORK Rating Templates Demo | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the Rating templates functionality"
        }
      },
      {
        "text": "Events",
        "url": "rating/events",
        "title": {
          "aspnet-core": "Teleik $FRAMEWORK Rating Events Demo | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the Rating events"
        }
      },
      {
        "text": "API",
        "url": "rating/api",
        "title": {
          "aspnet-core": "Teleik $FRAMEWORK Rating API functions Demo | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the API functions of the Rating widget"
        }
      },
      {
        "text": "RTL Support",
        "url": "rating/right-to-left-support",
        "title": {
          "aspnet-core": "Teleik $FRAMEWORK Rating Right-to-left-support Demo | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the Right-to-left-support of the Rating widget"
        }
      },
      {
        "text": "Keyboard Navigation",
        "url": "rating/keyboard-navigation",
        "title": {
          "aspnet-core": "Teleik $FRAMEWORK Rating Keyboard Navigation Demo | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the Keyboard navigation of the Rating widget"
        }
      }
    ]
  },
  {
    "text": "RadioButton",
    "name": "radioButton",
    "api": "web/radiobutton",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/radiobutton"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/radiobutton"
    },
    "spriteCssClass": "radiobuttonIcon",
    "items": [
      {
        "text": "Basic Usage",
        "url": "radiobutton/index",
        "title": {
          "aspnet-core": "$FRAMEWORK RadioButton demo"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the basic usage of the $FRAMEWORK RadioButton."
        }
      }
    ],
    "category": "Editors"
  },
  {
    "text": "Slider",
    "name": "slider",
    "api": "web/slider",
    "forum": {
      "aspnet-core": "aspnet-core-ui/slider"
    },
    "spriteCssClass": "sliderIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "slider/index",
        "title": {
          "aspnet-core": "$FRAMEWORK Slider Extension Demo"
        },
        "meta": {
          "aspnet-core": "This example illustrates how Telerik $FRAMEWORK Slider extension for ASP.NET Core Slider widget allows end users to interact with slider's main feature."
        }
      },
      {
        "text": "Tag Helper",
        "url": "slider/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Slider Tag Helper sample"
        }
      },
      {
        "text": "Events",
        "url": "slider/events",
        "title": {
          "aspnet-core": "Events demo in $FRAMEWORK Slider control"
        },
        "meta": {
          "aspnet-core": "This demo shows how events are handled and triggered in $FRAMEWORK Slider."
        }
      },
      {
        "text": "API",
        "url": "slider/api",
        "title": {
          "aspnet-core": "API for Telerik $FRAMEWORK Slider control"
        },
        "meta": {
          "aspnet-core": "This sample demonstrates how to use $FRAMEWORK Slider API functions. Play with range slider API functions and examine the demo for your specific scenario."
        }
      },
      {
        "text": "RTL support",
        "url": "slider/right-to-left-support",
        "title": {
          "aspnet-core": "Right-to-left support in $FRAMEWORK Slider | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This demo illustrates how the right-to-left feature is enabled in $FRAMEWORK Slider control."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "slider/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation in $FRAMEWORK Slider | $FRAMEWORK Demo"
        },
        "meta": {
          "aspnet-core": "This demo illustrates the keyboard navigation feature of Telerik $FRAMEWORK Slider control."
        }
      }
    ],
    "category": "Editors"
  },
  {
    "text": "Switch",
    "name": "switch",
    "component": "switch",
    "api": "web/switch",
    "documentation": {
      "aspnet-core": "html-helpers/editors/switch/overview"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/switch"
    },
    "codelibrary": {
      "aspnet-core": "aspnet-core/switch"
    },
    "spriteCssClass": "mobileSwitchIcon",
    "category": "Editors",
    "items": [
      {
        "text": "Basic Usage",
        "url": "switch/index",
        "title": {
          "aspnet-core": "$FRAMEWORK Switch Basic usage Demo | $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the Switch widget"
        },
        "description": {
          "aspnet-core": "<p>The <strong>$FRAMEWORK Switch</strong> is a widget that displays two exclusive choices.</p><p><strong>Key Features</strong></p><ul style=\"list-style-type: disc;\"><li>Label Messages</li><li>Enabled state</li><li>Readonly state</li><li>Accessibility, keyboard navigation and RTL Support</li></ul>"
        }
      },
      {
        "text": "Tag Helper",
        "url": "switch/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Switch Tag Helper sample"
        }
      },
      {
        "text": "Events",
        "url": "switch/events",
        "title": {
          "aspnet-core": "$FRAMEWORK Switch Events Demo |$FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the Switch events"
        }
      },
      {
        "text": "API",
        "url": "switch/api",
        "title": {
          "aspnet-core": "$FRAMEWORK Switch API Demo | $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the API of the Switch widget"
        }
      },
      {
        "text": "RTL Support",
        "url": "switch/right-to-left-support",
        "title": {
          "aspnet-core": "$FRAMEWORK Switch Right-to-left-support Demo | $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the Right-to-left-support of the Switch widget"
        }
      },
      {
        "text": "Keyboard Navigation",
        "url": "switch/keyboard-navigation",
        "title": {
          "aspnet-core": "$FRAMEWORK Switch Keyboard Navigation Demo | $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the Keyboard navigation of the Switch widget"
        }
      }
    ]
  },
  {
    "text": "Sortable",
    "name": "sortable",
    "api": "web/sortable",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/sortable"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/sortable"
    },
    "spriteCssClass": "sortableIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "sortable/index",
        "title": {
          "aspnet-core": "Demo for Sortable Component in $FRAMEWORK"
        },
        "meta": {
          "aspnet-core": "See the basic functionality of $FRAMEWORK Sortable component which provides a cross-browser, touch-friendly way to reorder HTML elements via drag and drop."
        }
      },
      {
        "text": "Tag Helper",
        "url": "sortable/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Sortable Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK Sortable component."
        }
      },
      {
        "text": "Filter / Disable items",
        "url": "sortable/filter-disable",
        "title": {
          "aspnet-core": "Filter and disable items in $FRAMEWORK Sortable control"
        },
        "meta": {
          "aspnet-core": "See how you can filter and disable items in $FRAMEWORK Sortable which provides a cross-browser, touch-friendly way to reorder HTML elements via drag and drop."
        }
      },
      {
        "text": "Handlers",
        "url": "sortable/handlers",
        "title": {
          "aspnet-core": "Demo for handler functionality of $FRAMEWORK Sortable Component"
        },
        "meta": {
          "aspnet-core": "See the handler feature of $FRAMEWORK Sortable control which provides a cross-browser, touch-friendly way to reorder HTML elements via drag and drop."
        }
      },
      {
        "text": "Axis / Container constraints",
        "url": "sortable/constraints",
        "title": {
          "aspnet-core": "Demo for axis / container functionality of $FRAMEWORK Sortable"
        },
        "meta": {
          "aspnet-core": "See the axis/container restriction feature of $FRAMEWORK Sortable, which provides a cross-browser, touch-friendly way to reorder HTML elements via drag and drop."
        }
      },
      {
        "text": "Linked Lists",
        "url": "sortable/linkedlists",
        "title": {
          "aspnet-core": "Linked list functionality of $FRAMEWORK Sortable control"
        },
        "meta": {
          "aspnet-core": "Check out the linked lists feature of $FRAMEWORK Sortable component which provides a cross-browser, touch-friendly way to reorder HTML elements via drag and drop."
        }
      },
      {
        "text": "Events",
        "url": "sortable/events",
        "title": {
          "aspnet-core": "Events example for $FRAMEWORK Sortable Component"
        },
        "meta": {
          "aspnet-core": "This example shows events of $FRAMEWORK Sortable control."
        }
      },
      {
        "text": "Sortable panels",
        "url": "sortable/sortable-panels",
        "title": {
          "aspnet-core": "Panels example for $FRAMEWORK Sortable Component"
        },
        "meta": {
          "aspnet-core": "See how to sort panels with simple drag and drop in $FRAMEWORK Sortable."
        }
      },
      {
        "text": "Integration - Grid",
        "url": "sortable/integration-grid",
        "title": {
          "aspnet-core": "$FRAMEWORK Grid integration with Sortable Component"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example demonstrates $FRAMEWORK Grid integration with Sortable Component."
        }
      }
    ],
    "category": "Interactivity & UX"
  },
  {
    "text": "Splitter",
    "name": "splitter",
    "api": "web/splitter",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/splitter"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/splitter"
    },
    "spriteCssClass": "splitterIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "splitter/index",
        "title": {
          "aspnet-core": "Splitter example in $FRAMEWORK | UI for $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "In this Splitter demo you will learn how to configure Kendo UI jQuery-powered Splitter in $FRAMEWORK."
        }
      },
      {
        "text": "Loading content with AJAX",
        "url": "splitter/ajax",
        "title": {
          "aspnet-core": "Loading content with AJAX in Telerik $FRAMEWORK Splitter"
        },
        "meta": {
          "aspnet-core": "This demo shows how Telerik $FRAMEWORK Splitter control enables you to load content with AJAX."
        },
        "requiresServer": "true"
      },
      {
        "text": "Events",
        "url": "splitter/events",
        "title": {
          "aspnet-core": "Events in $FRAMEWORK Splitter control | UI for $FRAMEWORK demo"
        },
        "meta": {
          "aspnet-core": "See the events that change the behavior of $FRAMEWORK Splitter. Learn about resize events and Javascript function names to be called before the panel is collapsed."
        },
        "requiresServer": "true"
      },
      {
        "text": "API",
        "url": "splitter/api",
        "title": {
          "aspnet-core": "$FRAMEWORK Splitter API Demo"
        },
        "meta": {
          "aspnet-core": "This example shows how API of $FRAMEWORK Splitter control works. Find all API functions to expand/collapse content and resize the pane."
        },
        "requiresServer": "true"
      },
      {
        "text": "RTL support",
        "url": "splitter/right-to-left-support",
        "title": {
          "aspnet-core": "Right-to-left support in $FRAMEWORK Splitter control"
        },
        "meta": {
          "aspnet-core": "In this demo we will play with the right-to-left text input and visualization which is enabled in $FRAMEWORK Splitter control."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "splitter/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation support in $FRAMEWORK Slider"
        },
        "meta": {
          "aspnet-core": "Users can easily manipulate the behaviour of $FRAMEWORK Slider by using different keyboard keys and combinations."
        }
      },
      {
        "text": "Tag Helper",
        "url": "splitter/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Splitter Tag Helper sample"
        }
      }
    ],
    "category": "Layout"
  },
  {
    "text": "Stepper",
    "name": "stepper",
    "api": "web/stepper",
    "new": true,
    "documentation": {
      "aspnet-core": "helpers/html-helpers/stepper"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/stepper"
    },
    "codelibrary": {
      "aspnet-core": "aspnet-core-ui/stepper"
    },
    "spriteCssClass": "stepperIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "stepper/index",
        "title": {
          "aspnet-core": "Using Kendo UI jQuery-based Stepper widget in $FRAMEWORK "
        },
        "meta": {
          "aspnet-core": "Look at this demo to learn how to use the $FRAMEWORK Stepper HtmlHelper extension for the ASP.NET MVC Stepper widget."
        }
      },
      {
        "text": "Tag Helper",
        "url": "stepper/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Stepper Tag Helper sample"
        }
      },
      {
        "text": "Layout",
        "url": "stepper/layout",
        "title": {
          "aspnet-core": "$FRAMEWORK Stepper HtmlHelper extension Layout configuration Demo"
        },
        "meta": {
          "aspnet-core": "This demo shows how to configure the ASP.NET Core Stepper widget layout."
        },
        "packages": [ "!jsp", "!php" ]
      },
      {
        "text": "Icons",
        "url": "stepper/icons",
        "title": {
          "aspnet-core": "Set the icons for the $FRAMEWORK Stepper HtmlHelper"
        },
        "meta": {
          "aspnet-core": "This demo shows how to set the icons for the ASP.NET Core Stepper widget."
        },
        "packages": [ "!jsp", "!php" ]
      },
      {
        "text": "Orientation",
        "url": "stepper/orientation",
        "title": {
          "aspnet-core": "ASP.NET Core Stepper widget orientation demo"
        },
        "meta": {
          "aspnet-core": "This sample shows the different orientation modes of the ASP.NET Core Stepper widget."
        },
        "packages": [ "!jsp", "!php" ]
      },
      {
        "text": "Operation Modes",
        "url": "stepper/operation-modes",
        "title": {
          "aspnet-core": "$FRAMEWORK Stepper HtmlHelper modes of operation demo"
        },
        "meta": {
          "aspnet-core": "This example shows modes of operation of the $FRAMEWORK Stepper HtmlHelper extension for the ASP.NET Core Stepper widget."
        },
        "packages": [ "!jsp", "!php" ]
      },
      {
        "text": "Events",
        "url": "stepper/events",
        "title": {
          "aspnet-core": "ASP.NET Core Stepper widget events demo"
        },
        "meta": {
          "aspnet-core": "This demo shows how you can trigger the events of the ASP.NET Core Stepper widget."
        },
        "packages": [ "!jsp", "!php" ]
      },
      {
        "text": "API",
        "url": "stepper/api",
        "title": {
          "aspnet-core": "API example of the ASP.NET Core Stepper widget"
        },
        "meta": {
          "aspnet-core": "This example shows how the API functions of the ASP.NET Core Stepper widget work."
        },
        "packages": [ "!jsp", "!php" ]
      },
      {
        "text": "RTL support",
        "url": "stepper/right-to-left-support",
        "title": {
          "aspnet-core": "ASP.NET Core Stepper widget RTL feature demo"
        },
        "meta": {
          "aspnet-core": "This example shows the ASP.NET Core Stepper widget in right-to-left mode."
        },
        "packages": [ "!jsp", "!php" ]
      },
      {
        "text": "Keyboard navigation",
        "url": "stepper/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation in ASP.NET Core Stepper widget"
        },
        "meta": {
          "aspnet-core": "This Kendo UI demo shows how users can use keyboard navigation in ASP.NET Core Stepper widget."
        },
        "packages": [ "!jsp", "!php" ]
      }
    ],
    "category": "Navigation"
  },
  {
    "text": "TabStrip",
    "name": "tabstrip",
    "api": "web/tabstrip",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/tabstrip"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/tabstrip"
    },
    "spriteCssClass": "tabStripIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "tabstrip/index",
        "title": {
          "aspnet-core": "Using Kendo UI jQuery-based TabStrip widget in $FRAMEWORK "
        },
        "meta": {
          "aspnet-core": "Look at this demo to learn how to use the $FRAMEWORK TabStrip HtmlHelper extension for the ASP.NET Core TabStrip widget."
        }
      },
      {
        "text": "Tag Helper",
        "url": "tabstrip/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK TabStrip Tag Helper sample"
        }
      },
      {
        "text": "Images",
        "url": "tabstrip/images",
        "title": {
          "aspnet-core": "$FRAMEWORK TabStrip with images | UI for $FRAMEWORK demo"
        },
        "meta": {
          "aspnet-core": "This example shows how images are displayed in Telerik $FRAMEWORK TabStrip component."
        }
      },
      {
        "text": "Loading content with AJAX",
        "url": "tabstrip/ajax",
        "title": {
          "aspnet-core": "Loading content with AJAX in Telerik TabStrip in $FRAMEWORK"
        },
        "meta": {
          "aspnet-core": "This example illustrates how to load content with AJAX in Telerik TabStrip for $FRAMEWORK."
        },
        "requiresServer": "true"
      },
      {
        "text": "Animation effects",
        "url": "tabstrip/animation",
        "title": {
          "aspnet-core": "$FRAMEWORK Tabs animation effects demo"
        },
        "meta": {
          "aspnet-core": "This sample shows the supported animation effects in $FRAMEWORK TabStrip. You can play with the sample by changing the settings of the animation."
        }
      },
      {
        "text": "Tab position",
        "url": "tabstrip/tab-position",
        "title": {
          "aspnet-core": "$FRAMEWORK TabStrip tab position demo"
        },
        "meta": {
          "aspnet-core": "This sample shows different tab position options for the $FRAMEWORK TabStrip."
        }
      },
      {
        "text": "Scrollable tabs",
        "url": "tabstrip/scrollable-tabs",
        "title": {
          "aspnet-core": "$FRAMEWORK TabStrip scrollable tabs demo"
        },
        "meta": {
          "aspnet-core": "This sample shows auto scrollable tabs in the $FRAMEWORK TabStrip."
        }
      },
      {
        "text": "Events",
        "url": "tabstrip/events",
        "title": {
          "aspnet-core": "Using events with $FRAMEWORK TabStrip HtmlHelper extension"
        },
        "meta": {
          "aspnet-core": "This demo shows how to use events feature of Telerik $FRAMEWORK Tabstrip extension for ASP.NET Core Tabstrip widget."
        },
        "requiresServer": "true"
      },
      {
        "text": "API",
        "url": "tabstrip/api",
        "title": {
          "aspnet-core": "API example for $FRAMEWORK TabStrip control"
        },
        "meta": {
          "aspnet-core": "This sample shows how API functions in $FRAMEWORK TabStrip control work. Find the demo source code to play with $FRAMEWORK TabStrip API."
        }
      },
      {
        "text": "RTL support",
        "url": "tabstrip/right-to-left-support",
        "title": {
          "aspnet-core": "RTL support in $FRAMEWORK TabStrip control | $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This demo shows the right-to-left feature, enabled in $FRAMEWORK TabStrip. Now users can easily reorder the tabs from right to left."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "tabstrip/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation in $FRAMEWORK TabStrip"
        },
        "meta": {
          "aspnet-core": "This $FRAMEWORK demo shows how end users of your app can intuitively use keyboard navigation in $FRAMEWORK TabStrip."
        }
      }
    ],
    "category": "Navigation"
  },
  {
    "text": "TextBox",
    "name": "textbox",
    "component": "textbox",
    "new": true,
    "api": "web/textbox",
    "documentation": {
      "aspnet-core": "html-helpers/editors/textbox/overview"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/textbox"
    },
    "codelibrary": {
      "aspnet-core": "aspnet-core-ui/textbox"
    },
    "spriteCssClass": "textBoxIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "textbox/index",
        "title": {
          "aspnet-core": "Primary features of $FRAMEWORK TextBox HTMLHelper"
        },
        "meta": {
          "aspnet-core": "This demo shows the core functionality of $FRAMEWORK TextBox component."
        },
        "description": {
          "aspnet-core": "$FRAMEWORK TextBox control enables you to style and provide a floating label functionality to input elements. Learn more about the selection functionality by playing with this demo."
        }
      },
      {
        "text": "Tag Helper",
        "url": "textbox/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK TextBox Tag Helper sample"
        },
        "meta": {
          "aspnet-core": "Tag Helper demo of the $FRAMEWORK TextBox component."
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK TextBox component."
        }
      },
      {
        "text": "Events",
        "url": "textbox/events",
        "title": {
          "aspnet-core": "Events in $FRAMEWORK TextBox HTMLHelper"
        },
        "meta": {
          "aspnet-core": "This example shows events which are triggered in $FRAMEWORK TextBox component."
        },
        "description": {
          "aspnet-core": "This sample shows how to access and use the events of the $FRAMEWORK TextBox widget."
        }
      },
      {
        "text": "Floating Label",
        "url": "textbox/floating-label",
        "title": {
          "aspnet-core": "Floating Label in $FRAMEWORK TextBox widget"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the $FRAMEWORK TextBox Floating Label."
        },
        "description": {
          "aspnet-core": "This sample shows how to use the Floating Label of the $FRAMEWORK TextBox widget. The Floating Label displays the type of input a field requires."
        }
      },
      {
        "text": "API",
        "url": "textbox/api",
        "title": {
          "aspnet-core": "API Functions Demo for $FRAMEWORK TextBox"
        },
        "meta": {
          "aspnet-core": "This demo shows specific API functions for $FRAMEWORK TextBox component."
        },
        "description": {
          "aspnet-core": "$FRAMEWORK TextBox API demo shows how the API functions can be used to apply different functionality to the widget."
        }
      },
      {
        "text": "RTL support",
        "url": "textbox/right-to-left-support",
        "title": {
          "aspnet-core": "RTL support in $FRAMEWORK TextBox HTMLHelper"
        },
        "meta": {
          "aspnet-core": "This demo shows how right-to-left input is implemented in $FRAMEWORK TextBox component to ensure the satisfaction of RTL language users."
        },
        "description": {
          "aspnet-core": "<p>The $FRAMEWORK TextBox supports right-to-left languages and rendering. All you have to do is wrap the editor in a container element with <strong>k-rtl </strong>class set for it, as demonstrated in this example.</p> <p>More information on the right-to-left support of the $FRAMEWORK can be found in <a href=\"https://docs.telerik.com/kendo-ui/accessibility/supporting-rtl-languages\" target=\"_blank\">this topic</a>.</p>"
        }
      }
    ],
    "category": "Editors"
  },
  {
    "text": "TileLayout",
    "name": "tilelayout",
    "new": true,
    "api": "web/tilelayout",
    "documentation": {
      "aspnet-core": "helpers/tilelayout/overview"
    },
    "forum": {
      "aspnet-core": "aspnet-core/tilelayout"
    },
    "spriteCssClass": "tilelayoutIcon",
    "items": [
      {
        "text": "Overview",
        "url": "tilelayout/index",
        "title": {
          "aspnet-core": "Demo and source code for  Telerik $FRAMEWORK TileLayout"
        },
        "meta": {
          "aspnet-core": "See how the Telerik $FRAMEWORK TileLayout control works and view the demo source code."
        },
        "description": {
          "aspnet-core": "<p>The $FRAMEWORK TileLayout is based on the two-dimensional CSS grid and is able to display content in tiles. They can be dragged around and rearranged as desired by the user. The tiles can be resized to change the way they span across the rows and columns.</p><p>The charts and grids do not auto resize so they need to be programmatically resized when the window is resized or when the tiles are resized. We do this by handling the resize event <code>.Events(e=>e.Resize(\"onTileResize\"))</code>.</p>\n"
        }
      },
      {
        "text": "Reordering",
        "url": "tilelayout/reordering",
        "title": {
          "aspnet-core": "Demo and source code for Telerik $FRAMEWORK TileLayout"
        },
        "meta": {
          "aspnet-core": "See how the Telerik $FRAMEWORK TileLayout control can be reordered."
        },
        "description": {
          "aspnet-core": "<p>The $FRAMEWORK TileLayout provides a reordering functionality of the tiles.They can be dragged around and rearranged as desired by the user.</p><p>To enable the reorderable functionality, use the <code>.Reorderable()</code> method and pass <code>true</code> as a parameter. \n"
        }
      },
      {
        "text": "Resizing",
        "url": "tilelayout/resizing",
        "title": {
          "aspnet-core": "Demo and source code for the Telerik $FRAMEWORK TileLayout resizing functionality"
        },
        "meta": {
          "aspnet-core": "See how the Telerik $FRAMEWORK TileLayout control can be resized."
        },
        "description": {
          "aspnet-core": "<p>The $FRAMEWORK TileLayout provides a resizing functionality of the tiles. They can be dragged both horizontally and vertically to take up more or less space in the layout as determined by the user.</p><p>To enable the resizable functionality, use the <code>.Resizable() method</code> and pass <code> true</code> as a parameter.\n."
        }
      },
      {
        "text": "Events",
        "url": "tilelayout/events",
        "title": {
          "aspnet-core": "Demo and source code for the Telerik $FRAMEWORK TileLayout events."
        },
        "meta": {
          "aspnet-core": "See how to capture the events emitted by the Telerik $FRAMEWORK TileLayout."
        },
        "description": {
          "aspnet-core": "<p>The $FRAMEWORK TileLayout emits a <code>Resize()</code> event when a tile is resized and a <code>Reorder()</code> event when a tile is reordered.\n"
        }
      },
      {
        "text": "TagHelper",
        "url": "tilelayout/taghelper",
        "title": {
          "aspnet-core": "Demo and source code for the Telerik $FRAMEWORK TileLayout TagHelper."
        },
        "meta": {
          "aspnet-core": "The Telerik $FRAMEWORK TileLayout TagHelper sample."
        },
        "description": {
          "aspnet-core": "An $FRAMEWORK TileLayout TagHelper example usage."
        }
      }
    ],
    "category": "Layout"
  },
  {
    "text": "TimePicker",
    "name": "timepicker",
    "api": "web/timepicker",
    "updated": true,
    "forum": {
      "aspnet-core": "aspnet-core-ui/datetimepickers"
    },
    "spriteCssClass": "timePickerIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "timepicker/index",
        "title": {
          "aspnet-core": "$FRAMEWORK TimePicker example | UI for $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "This example shows how to configure Telerik TimePicker $FRAMEWORK extension for ASP.NET Core Timepicker widget."
        }
      },
      {
        "text": "Component Type",
        "url": "timepicker/component-type",
        "new": true,
        "title": {
          "kendo-ui": "Example of $FRAMEWORK TimePicker control"
        },
        "meta": {
          "kendo-ui": "This demo shows how to change the appearance of the $FRAMEWORK TimePicker."
        }
      },
      {
        "text": "Range selection",
        "url": "timepicker/rangeselection",
        "title": {
          "aspnet-core": "$FRAMEWORK TimePicker Demo for selecting a time range"
        },
        "meta": {
          "aspnet-core": "This demo shows the flexible functionality of $FRAMEWORK TimePicker. Specify a range of visible hours and enable the user to select them from the dropdown list."
        }
      },
      {
        "text": "Events",
        "url": "timepicker/events",
        "title": {
          "aspnet-core": "Events in Telerik $FRAMEWORK TimePicker"
        },
        "meta": {
          "aspnet-core": "This example illustrates how events are used in Telerik $FRAMEWORK TimePicker control. Play with the demo, select time and find how the functionality works."
        }
      },
      {
        "text": "API",
        "url": "timepicker/api",
        "title": {
          "aspnet-core": "API demo for $FRAMEWORK Time Picker"
        },
        "meta": {
          "aspnet-core": "This example shows the API functions of $FRAMEWORK TimePicker."
        }
      },
      {
        "text": "Globalization",
        "url": "timepicker/globalization",
        "packages": [ "!online", "!jsp", "!php" ]
      },
      {
        "text": "RTL support",
        "url": "timepicker/right-to-left-support",
        "title": {
          "aspnet-core": "Right to left support in $FRAMEWORK TimePicker"
        },
        "meta": {
          "aspnet-core": "This sample illustrates the right to left functionality which Telerik $FRAMEWORK TimePicker supports."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "timepicker/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation in $FRAMEWORK TimePicker"
        },
        "meta": {
          "aspnet-core": "Users can intuitively select time in $FRAMEWORK TimePicker by simply using the keyboard support of the control."
        }
      },
      {
        "text": "Tag Helper",
        "url": "timepicker/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK TimePicker Tag Helper sample"
        }
      }
    ],
    "category": "Editors"
  },
  {
    "text": "ToolBar",
    "name": "toolbar",
    "api": "web/toolbar",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/toolbar"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/toolbar"
    },
    "spriteCssClass": "toolbarIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "toolbar/index",
        "title": {
          "aspnet-core": "Basic usage of ASP.NET Core ToolBar Widget | ASP.NET Core Web demo"
        },
        "meta": {
          "aspnet-core": "Play with this ASP.NET Core ToolBar demo to get familiar with the supported commands and core functionality."
        }
      },
      {
        "text": "Tag Helper",
        "url": "toolbar/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK ToolBar Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK ToolBar component."
        }
      },
      {
        "text": "Resizing",
        "url": "toolbar/resizing",
        "title": {
          "aspnet-core": "Resizing demo of ASP.NET Core ToolBar Widget | ASP.NET Core Web demo"
        },
        "meta": {
          "aspnet-core": "Play with this ASP.NET Core ToolBar demo to get familiar with the resizing functionality."
        }
      },
      {
        "text": "Events",
        "url": "toolbar/events",
        "title": {
          "aspnet-core": "Events demo of ASP.NET Core ToolBar Widget | ASP.NET Core Web demo"
        },
        "meta": {
          "aspnet-core": "Play with this ASP.NET Core ToolBar demo to get familiar with supported events."
        }
      },
      {
        "text": "API",
        "url": "toolbar/api",
        "title": {
          "aspnet-core": "API demo of ASP.NET Core ToolBar Widget | ASP.NET Core Web demo"
        },
        "meta": {
          "aspnet-core": "Play with this ASP.NET Core ToolBar demo to get familiar with supported API methods."
        }
      },
      {
        "text": "Integration with Editors",
        "url": "toolbar/integration",
        "title": {
          "aspnet-core": "Integration demo of ASP.NET Core ToolBar Widget | ASP.NET Core Web demo"
        },
        "meta": {
          "aspnet-core": "Play with this ASP.NET Core ToolBar demo to learn how to include ASP.NET Core Editor widgets in the ToolBar."
        }
      }
    ],
    "category": "Navigation"
  },
  {
    "text": "Drawer",
    "name": "drawer",
    "api": "web/drawer",
    "pro": true,
    "documentation": {
      "aspnet-core": "html-helpers/navigation/drawer/overview"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/drawer"
    },
    "spriteCssClass": "drawerIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "drawer/index",
        "title": {
          "aspnet-core": "Basic usage of ASP.NET Core Drawer Widget | ASP.NET Core Web demo"
        },
        "meta": {
          "aspnet-core": "Populate different content based on the selection made using the ASP.NET Core Drawer."
        },
        "description": {
          "aspnet-core": "<p>The <strong>Telerik $FRAMEWORK Drawer</strong> is a dismissible or permanently visible panel that can be used as a sidebar component for navigation in responsive web applications or simply for changing a content of a section in the page.</p><p><strong>Key Features</strong></p> <ul style=\"list-style-type: disc;\"><li>Overlay and Push mode</li><li>Right and Left position</li><li>Gesture Support</li><li>Mini mode</li></ul><p>In this demo the <strong>Kendo UI Drawer</strong> can be opened either by clicking on the hamburger icon or using swipe gesture on the associated content.</p>"
        }
      },
      {
        "text": "Tag Helper",
        "url": "drawer/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Drawer Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK Drawer component."
        }
      },
      {
        "text": "Mini Mode",
        "url": "drawer/mini",
        "title": {
          "aspnet-core": "Demonstrates the mini mode of the ASP.NET Core Drawer | ASP.NET Core Web demo"
        },
        "meta": {
          "aspnet-core": "Compact or Mini Mode of the ASP.NET Core Drawer in action."
        },
        "description": {
          "aspnet-core": "<p>The <strong>Telerik $FRAMEWORK Drawer</strong> offers a mini mode. With the mini mode enabled the  <strong>Telerik $FRAMEWORK Drawer</strong> changes its width instead of closing. Most commonly used to maintain quick selection available on the side at all times, leaving just the icons.</p><p>In this demo the <strong>Kendo UI Drawer</strong> can be opened either by clicking on the hamburger icon or using swipe gesture on the associated content.</p>"
        }
      },
      {
        "text": "Functionality",
        "url": "drawer/functionality",
        "title": {
          "aspnet-core": "Demonstrates different modes and positions of the ASP.NET Core Drawer | ASP.NET Core Web demo"
        },
        "meta": {
          "aspnet-core": "Check the overlay, push modes and left and right position of the ASP.NET Core Drawer."
        },
        "description": {
          "aspnet-core": "<p>The <strong>Telerik UI Drawer for $FRAMEWORK</strong> has two modes that are quite different in terms of behavior: <ul><li><strong>Overlay</strong> - takes the entire height of page and it provides overlay effect on the page when opened.</li><li><strong>Push</strong> - in push mode the drawer interacts with specific content/section of the page. In open state it pushes the content to the left or right (depending on the drawer's position) to take the remaining space.</li></p><p>The Telerik UI Drawer for $FRAMEWORK can be positioned either on left or right side using the position configuration option.</p>"
        }
      },
      {
        "text": "API",
        "url": "drawer/api",
        "title": {
          "aspnet-core": "API demo of ASP.NET Core Drawer Widget | ASP.NET Core Web demo"
        },
        "meta": {
          "aspnet-core": "Play with this ASP.NET Core Drawer demo to get familiar with supported API methods."
        },
        "description": {
          "aspnet-core": "<p>The <strong>Telerik $FRAMEWORK Drawer</strong> provides API methods for show and hide.</p>"
        }
      }
    ],
    "category": "Navigation"
  },
  {
    "text": "Timeline",
    "name": "timeline",
    "api": "web/timeline",
    "pro": true,
    "documentation": {
      "aspnet-core": "html-helpers/navigation/timeline/overview"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/timeline"
    },
    "spriteCssClass": "timelineIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "timeline/index",
        "sources": {
          "aspnet-mvc": [
            {
              "name": "IndexController.cs",
              "url": "~/Controllers/Timeline/IndexController.cs"
            },
            {
              "name": "TimelineEventModel.cs",
              "url": "~/Models/TimelineEventModel.cs"
            }
          ]
        },
        "title": {
          "aspnet-core": "Basic usage of ASP.NET Core Timeline Widget | ASP.NET Core Web demo"
        },
        "meta": {
          "aspnet-core": "Interactive and pleasing way that visualizes specific events on yearly time basis using the ASP.NET Core Timeline."
        },
        "description": {
          "aspnet-core": "<p>The <strong>$FRAMEWORK Timeline</strong> is a widget that provides an interactive and pleasing way that visualizes specific events on yearly time basis.<p><strong>Key Features</strong></p> <ul style=\"list-style-type: disc;\"><li>Horizontal and Vertical layout</li><li>Customizeable in terms of how the event details will be displayed using the template option</li><li>On-demand rendering for the horizontal mode</li><li>Mobile and responsive behavior</li></ul></p><p>Main features for the <strong>Vertical</strong> mode: <ul><li> It takes the entire height of its container and positioned all events vertically.</li><li> Events might be collapsible controlled by the <strong>collapsibleEvents</strong> option </li><li> An <strong>alternatingMode</strong> option allows events to be positioned on both sides of the timeline axis</li></ul></p>"
        }
      },
      {
        "text": "Tag Helper",
        "url": "timeline/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "Tag helper of $FRAMEWORK Timeline widget"
        },
        "meta": {
          "aspnet-core": "Tag helper demo for $FRAMEWORK Timeline widget"
        }
      },
      {
        "text": "Horizontal Mode",
        "url": "timeline/horizontal",
        "title": {
          "aspnet-core": "Demonstrates the horizontal mode of the $FRAMEWORK Timeline widget"
        },
        "meta": {
          "aspnet-core": "Horizontal Mode for $FRAMEWORK Timeline widget"
        },
        "description": {
          "aspnet-core": "<p>The <strong>Horizontal orientation</strong> of the <strong>$FRAMEWORK Timeline</strong> allows the widget to use its horizontal layout to display events. The left/right arrows allow quick navigation to next/previous period of time. Main features for the <strong>Horizontal</strong> mode: <ul><li> On-demand rendering of the events details.</li><li>Navigation to next/previous time period in the timeline axis</li><li>Responsive behavior of the timeline axis</li></ul></p>"
        }
      },
      {
        "text": "Templates",
        "url": "timeline/templates",
        "title": {
          "aspnet-core": "Demonstrates how to customize the event details displayed in $FRAMEWORK Timeline widget"
        },
        "meta": {
          "aspnet-core": "Event template for $FRAMEWORK Timeline widget"
        },
        "description": {
          "aspnet-core": "<p>A common scenario is to have the ability to custmize how the event details will be displayed in the <strong>$FRAMEWORK Timeline</strong> widget.</p><p>This example demostrates how to render two images below the description text and take the advantage of using the built-in classes for the card elements.</p>"
        }
      },
      {
        "text": "API",
        "url": "timeline/api",
        "title": {
          "aspnet-core": "API methods in $FRAMEWORK Timeline widget"
        },
        "meta": {
          "aspnet-core": "API demo for $FRAMEWORK Timeline widget"
        }
      },
      {
        "text": "Events",
        "url": "timeline/events",
        "title": {
          "aspnet-core": "Events in $FRAMEWORK Timeline widget"
        },
        "meta": {
          "aspnet-core": "Events demo for $FRAMEWORK Timeline widget"
        }
      },
      {
        "text": "Shared DataSource",
        "url": "timeline/shared",
        "title": {
          "aspnet-core": "Shared DataSource demo of $FRAMEWORK Timeline Widget"
        },
        "meta": {
          "aspnet-core": "Check out the binding of the $FRAMEWORK Timeline widget to a Shared DataSource."
        },
        "description": {
          "aspnet-core": "<p>The <strong>$FRAMEWORK Timeline</strong> could be bound to a shared data source. Whenever a change external to the <strong>$FRAMEWORK Timeline</strong> is present, the widget's data source and UI will be automatically updated.</p>"
        }
      }
    ],
    "category": "Navigation"
  },
  {
    "text": "Tooltip",
    "name": "tooltip",
    "api": "web/tooltip",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/tooltip"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/tooltip"
    },
    "spriteCssClass": "tooltipIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "tooltip/index",
        "title": {
          "aspnet-core": "$FRAMEWORK jQuery Tooltip Demo"
        },
        "meta": {
          "aspnet-core": "Look at this example of Telerik jQuery-based toolip in $FRAMEWORK and explore all features of the extension. "
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "TooltipController.cs",
              "url": "~/Controllers/Tooltip/TooltipController.cs"
            }
          ]
        }
      },
      {
        "text": "Tag Helper",
        "url": "tooltip/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Tooltip Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK Tooltip component."
        }
      },
      {
        "text": "Loading content with AJAX",
        "url": "tooltip/ajax",
        "title": {
          "aspnet-core": "AJAX loaded content with $FRAMEWORKTooltip control"
        },
        "meta": {
          "aspnet-core": "This example illustrates how the content in $FRAMEWORK Tooltip control can be loaded, using AJAX."
        },
        "requiresServer": "true"
      },
      {
        "text": "Content template",
        "url": "tooltip/template",
        "title": {
          "aspnet-core": "Content template sample for Telerik $FRAMEWORK Tooltip extension"
        },
        "meta": {
          "aspnet-core": "This demo shows how  you can use a content template with Telerik jQuery-based tooltip for $FRAMEWORK."
        }
      },
      {
        "text": "Events",
        "url": "tooltip/events",
        "title": {
          "aspnet-core": "Events in Telerik $FRAMEWORK Tooltip"
        },
        "meta": {
          "aspnet-core": "In this demo we will show how events are triggered in Telerik Tooltip extension in $FRAMEWORK."
        }
      },
      {
        "text": "API",
        "url": "tooltip/api",
        "title": {
          "aspnet-core": "API for $FRAMEWORK Tooltip component | UI for $FRAMEWORK demo"
        },
        "meta": {
          "aspnet-core": "This example shows how the API functions are enabled in $FRAMEWORK Tooltip control."
        }
      }
    ],
    "category": "Layout"
  },
  {
    "text": "TreeList",
    "name": "treelist",
    "api": "web/treelist",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/treelist"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/treelist"
    },
    "spriteCssClass": "treeListIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "treelist/index",
        "title": {
          "aspnet-core": "ASP.NET Core TreeList widget | ASP.NET Core Web demo"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeDirectoryModel.cs",
              "url": "~/Models/TreeList/EmployeeDirectoryModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo illustrates the basic usage and functionality of ASP.NET Core jQuery TreeList widget which represents items in a hierarchical tree structure."
        }
      },
      {
        "text": "Tag Helper",
        "url": "treelist/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK TreeList Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK TreeList component."
        }
      },
      {
        "text": "Binding to remote data",
        "url": "treelist/remote-data-binding",
        "title": {
          "aspnet-core": "Binding ASP.NET Core TreeList component to remote data"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeDirectoryRemoteModel.cs",
              "url": "~/Models/TreeList/EmployeeDirectoryRemoteModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example illustrates how the treelist can be bound to remote data and each level is requested asynchronously."
        }
      },
      {
        "text": "Binding to OData-v4 service",
        "url": "treelist/odata",
        "title": {
          "aspnet-core": "Binding ASP.NET Core TreeList component to an OData-v4 service"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeViewModel.cs",
              "url": "~/Models/EmployeeViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example illustrates how the treelist can be bound to an OData-v4 service."
        },
        "description": {
          "kendo-ui": "<p>ASP.NET Core TreeList component supports binding to various endpoints. This example illustrates how you can use an OData-v4 service to populate the tree. The main points in the implementation are: <br/><br/> 1. Initially requesting only the top level items(root items). In the particular case a bound function is used. <br/> 2. Requesting only the child nodes for a given node, on expand, using the <b>id</b> field value defined in the model.</p>"
        }
      },
      {
        "text": "Drag & drop",
        "url": "treelist/dragdrop",
        "title": {
          "aspnet-core": "ASP.NET Core TreeList widget | ASP.NET Core Web demo"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeDirectoryModel.cs",
              "url": "~/Models/TreeList/EmployeeDirectoryModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo illustrates how to use drag & drop to allow users to rearrange treelist items"
        }
      },
      {
        "text": "Editing",
        "url": "treelist/editing",
        "title": {
          "aspnet-core": "ASP.NET Core TreeList widget | ASP.NET Core Web demo"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeDirectoryModel.cs",
              "url": "~/Models/TreeList/EmployeeDirectoryModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo illustrates how editing works within the ASP.NET Core jQuery TreeList widget which represents items in a hierarchical tree structure."
        }
      },
      {
        "text": "InCell editing",
        "url": "treelist/editing-incell",
        "title": {
          "aspnet-core": "InCell data editing example for ASP.NET Core TreeList widget"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeDirectoryModel.cs",
              "url": "~/Models/TreeList/EmployeeDirectoryModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo illustrates how the records in KendoTreeList can be easily modified with InCell editing."
        },
        "description": {
          "aspnet-core": "<p>A common scenario is to switch TreeList cells in edit mode by simply clicking them, update the data on the client and then process all changes on the server in a single batch update.<br /> <br /> This demo shows how this can be accomplished using the built-in batch create, update and destroy commands of the Telerik TreeList component.<br /> <br /> All you have to do to enable the batch data editing functionality is to:</p> <ul style=\"list-style-type: disc;\"> <li>Turn on the incell editing by setting: .Editable(editable =&gt; editable.Mode(\"incell\")</li> <li>Enable the Add New Record, Save Changes and Discard Changes buttons on the toolbar by setting: .ToolBar(toolbar =&gt; { toolbar.<strong>Create</strong>(); toolbar.<strong>Save</strong>(); }</li> <li>Invoke the CRUD action methods in the DataSource</li> </ul> <p>Once the cells are edited you have the option to process the changes or discard them. Click on a cell/row to place it in edit mode. Use the Save changes or Cancel changes buttons to process/discard all changes at once.</p>"
        }
      },
      {
        "text": "Popup editing",
        "url": "treelist/editing-popup",
        "title": {
          "aspnet-core": "Popup data editing example for ASP.NET Core TreeList widget"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeDirectoryModelPopUp.cs",
              "url": "~/Models/TreeList/EmployeeDirectoryModelPopUp.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo illustrates how the records in KendoTreeList can be easily modified in a pop-up dialog."
        }
      },
      {
        "text": "Search Panel",
        "url": "treelist/search-panel",
        "title": {
          "aspnet-core": "Search Panel Demo for ASP.NET Core TreeList widget"
        },
        "meta": {
          "aspnet-core": "Get started with the ASP.NET Core TreeList by Kendo UI supporting searching inside the treelist data."
        },
        "description": {
          "aspnet-core": "<p>There are situations when you would like to enable the end user to search inside the treelist cells for a given value. The ASP.NET Core TreeList supports such searching by adding a <strong>search</strong> command inside the treelist toolbar. Additionally one can configure the fields included in the search using the <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/ui/treelist#configuration-search\" target=\"_blank\">search</a> option."
        }
      },
      {
        "text": "Column resizing",
        "url": "treelist/column-resizing",
        "title": {
          "aspnet-core": "Column resizing in Telerik $FRAMEWORK TreeList"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeDirectoryModel.cs",
              "url": "~/Models/TreeList/EmployeeDirectoryModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "In this demo you can see how simple it is to resize columns in the Telerik $FRAMEWORK TreeList."
        }
      },
      {
        "text": "Column reordering",
        "url": "treelist/column-reordering",
        "title": {
          "aspnet-core": "Column Reordering in Telerik $FRAMEWORK TreeList"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeDirectoryModel.cs",
              "url": "~/Models/TreeList/EmployeeDirectoryModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "In this demo you can see how simple it is to reorder columns in Telerik $FRAMEWORK TreeList."
        }
      },
      {
        "text": "Column menu",
        "url": "treelist/column-menu",
        "title": {
          "aspnet-core": "Column menu functionality of Telerik $FRAMEWORK TreeList"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeDirectoryModel.cs",
              "url": "~/Models/TreeList/EmployeeDirectoryModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This Telerik example shows column menu functionality in the TreeList extension for $FRAMEWORK."
        }
      },
      {
        "text": "Multi-column headers",
        "url": "treelist/multicolumnheaders",
        "title": {
          "aspnet-core": "Multi-column headers functionality of Telerik $FRAMEWORK TreeList"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeDirectoryModel.cs",
              "url": "~/Models/TreeList/EmployeeDirectoryModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This Telerik example shows multi-column headers functionality in the TreeList extension for $FRAMEWORK."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK TreeList extension supports multi-column headers by specifying column groups which incorporate inner-column structures. In this demo, you can see the Personal Info and Location columns have nested columns, defined trough the Columns -&gt; Group -&gt; Columns scheme. In addition, operations like sorting and filtering are supported on each column level, regardless of the chosen multi-header pattern.</p>"
        }
      },
      {
        "text": "Frozen columns",
        "url": "treelist/frozen-columns",
        "title": {
          "aspnet-core": "Frozen columns demo in Telerik $FRAMEWORK TreeList"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeDirectoryModel.cs",
              "url": "~/Models/TreeList/EmployeeDirectoryModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "Play with the demo for frozen columns functionality of Telerik $FRAMEWORK TreeList."
        }
      },
      {
        "text": "Aggregates",
        "url": "treelist/aggregates",
        "title": {
          "aspnet-core": "Aggregating option demo for KendoTreeList jQuery control"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeDirectoryModel.cs",
              "url": "~/Models/TreeList/EmployeeDirectoryModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example demonstrates the aggregate option for KendoTreeList. Use demo source code to enable the TreeList to calculate aggregated values."
        }
      },
      {
        "text": "Export to Excel",
        "url": "treelist/excel-export",
        "title": {
          "aspnet-core": "Exporting to MS Excel"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeDirectoryModel.cs",
              "url": "~/Models/TreeList/EmployeeDirectoryModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "Export ASP.NET Core TreeList as Microsoft Excel file"
        }
      },
      {
        "text": "Export to PDF",
        "url": "treelist/pdf-export",
        "title": {
          "aspnet-core": "Exporting to PDF"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeDirectoryModel.cs",
              "url": "~/Models/TreeList/EmployeeDirectoryModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "Export ASP.NET Core TreeList as PDF file"
        }
      },
      {
        "text": "Events",
        "url": "treelist/events",
        "title": {
          "aspnet-core": "Example of using events in ASP.NET Core TreeList control"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeDirectoryModel.cs",
              "url": "~/Models/TreeList/EmployeeDirectoryModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example demonstrates different events which are available in KendoTreeList widget and the code explains how you can use them for  your project."
        }
      },
      {
        "text": "API",
        "url": "treelist/api",
        "title": {
          "aspnet-core": "KendoTreeList API Demo"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeDirectoryModel.cs",
              "url": "~/Models/TreeList/EmployeeDirectoryModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how API Functions can manipulate the contents and behavior of ASP.NET Core TreeList widget."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "treelist/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation in Telerik $FRAMEWORK TreeList"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeDirectoryModel.cs",
              "url": "~/Models/TreeList/EmployeeDirectoryModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "Look at this Telerik $FRAMEWORK TreeList demo to learn how different keyboard combinations could be used to navigate in the component."
        },
        "description": {
          "aspnet-core": "<p>This demo illustrates the keyboard support of Telerik TreeList for Core, which provides quick access to available treelist&rsquo;s features without the need of using a mouse. This is very practical for apps that should cover the accessibility standards for people with disabilities. </p> <p>You can focus the treelist using the <strong>ALT + W</strong> key combination, which will allow you to directly interact with the treelist functionality through the provided keyboard shortcuts visualized above.</p> <p>Further details about the Keyboard, Section 508 and WAI-ARIA support of Telerik UI for $FRAMEWORK extensions can be found in the <a href=\"https://docs.telerik.com/kendo-ui/accessibility/accessibility-overview\">Accessibility Overview section</a> of the documentation.</p>"
        }
      },
      {
        "text": "Client-side Paging",
        "url": "treelist/client-side-paging",
        "title": {
          "aspnet-core": "Cleint-side paging in Telerik $FRAMEWORK TreeList"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeDirectoryModel.cs",
              "url": "~/Models/TreeList/EmployeeDirectoryModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how Kendo UI TreeList supports client-side paging"
        },
        "description": {
          "aspnet-core": "<p>The Kendo UI treelist supports client-side paging for large sets of data. To enable the client-side paging functionality configure the <b>Pageable property</b>.</p>"
        }
      }
    ],
    "category": "Data Management"
  },
  {
    "text": "TreeView",
    "name": "treeview",
    "api": "web/treeview",
    "updated":  true,
    "documentation": {
      "aspnet-core": "helpers/html-helpers/treeview"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/treeview"
    },
    "spriteCssClass": "treeViewIcon",
    "items": [
      {
        "text": "Overview",
        "url": "treeview/index",
        "new": true,
        "title": {
          "aspnet-core": "$FRAMEWORK TreeView control Overview | UI for $FRAMEWORK demo"
        },
        "meta": {
          "aspnet-core": "This demo illustrates main features of $FRAMEWORK Tree component which represents items in a hierarchical tree structure."
        },
        "description": {
          "aspnet-core": "The Telerik UI for $FRAMEWORK TreeView component represents hierarchical data in a tree structure. It allows users to perform single or multiple selection of items, drag and drop of elements within the TreeView and across ASP.NET Core TreeView components. It comes with built-in checkbox support, keyboard navigation, RTL support, accessibility and provides templates for complete customization of each node. You can bind the TreeView to various data sources and take advantage of its load on demand feature, and request data only when a node is expanded."
        }
      },
      {
        "text": "Basic usage",
        "url": "treeview/basic-usage",
        "title": {
          "aspnet-core": "$FRAMEWORK TreeView control | UI for $FRAMEWORK demo"
        },
        "meta": {
          "aspnet-core": "This demo illustrates the basic usage and functionality of $FRAMEWORK Tree component which represents items in a hierarchical tree structure."
        },
        "packages": [
          "!php",
          "!jsp"
        ]
      },
      {
        "text": "Tag Helper",
        "url": "treeview/tag-helper",
        "packages": [ "aspnet-core" ],
        "updated": "true",
        "title": {
          "aspnet-core": "$FRAMEWORK TreeView Tag Helper sample"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "Category.cs",
              "url": "~/Models/SamplesEntities/Category.cs"
            },
            {
              "name": "Product.cs",
              "url": "~/Models/SamplesEntities/Product.cs"
            }
          ]
        }
      },
      {
        "text": "Drag & drop",
        "url": "treeview/dragdrop",
        "title": {
          "aspnet-core": "Drag & Drop support in $FRAMEWORK TreeView control"
        },
        "meta": {
          "aspnet-core": "This example shows how to drag and drop items in $FRAMEWORK TreeView. Use the demo source code and play with the demo."
        },
        "group": "Functionality"
      },
      {
        "text": "Animation effects",
        "url": "treeview/animation",
        "title": {
          "aspnet-core": "Animation effects sample for $FRAMEWORK Treeview component"
        },
        "meta": {
          "aspnet-core": "This sample shows how you can add animation effects and expand animation by setting the specific options for $FRAMEWORK TreeView component."
        }
      },
      {
        "text": "Images",
        "url": "treeview/images",
        "title": {
          "aspnet-core": "Example of customized $FRAMEWORK TreeView using image"
        },
        "meta": {
          "aspnet-core": "This demo shows how you can add images to your $FRAMEWORK TreeView control, as well as implement TreeView with sprites in your website or project."
        }
      },
      {
        "text": "Checkboxes",
        "url": "treeview/checkboxes",
        "title": {
          "aspnet-core": "Creating tree nodes with checkboxes | $FRAMEWORK TreeView Demo"
        },
        "meta": {
          "aspnet-core": "This sample illustrates how you can easily create tree nodes with checkboxes in $FRAMEWORK Treeview by simply setting the child item of the checkboxes to true."
        }
      },
      {
        "text": "Templates",
        "url": "treeview/templates",
        "title": {
          "aspnet-core": "Example of templates for $FRAMEWORK TreeView"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "TreeViewItemViewModel.cs",
              "url": "~/Models/TreeView/TreeViewItemModel.cs"
            },
            {
              "name": "TreeViewRepository.cs",
              "url": "~/Models/TreeView/TreeViewRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo illustrates how tree nodes in $FRAMEWORK TreeView component can be further customized by using templates."
        }
      },
      {
        "text": "Binding to local data",
        "url": "treeview/local-data-binding",
        "title": {
          "aspnet-core": "Binding to local data demo for $FRAMEWORK TreeView control"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CategoryItem.cs",
              "url": "~/Models/TreeView/CategoryItem.cs"
            },
            {
              "name": "SubCategoryItem.cs",
              "url": "~/Models/TreeView/SubCategoryItem.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how items in the tree are displayed with the default settings of $FRAMEWORK TreeView and how the component can be easily bound to local data."
        },
        "group": "Data Binding"
      },
      {
        "text": "Binding to remote data",
        "url": "treeview/remote-data-binding",
        "title": {
          "aspnet-core": "Binding $FRAMEWORK tree component to remote data"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EmployeeViewModel.cs",
              "url": "~/Models/EmployeeViewModel.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example illustrates how the $FRAMEWORK hierarchical tree can be bound to remote data and the items in the tree populated from an external source."
        }
      },
      {
        "text": "Events",
        "url": "treeview/events",
        "title": {
          "aspnet-core": "Demo for $FRAMEWORK TreeView control events"
        },
        "meta": {
          "aspnet-core": "This sample shows built-in events in $FRAMEWORK tree control. Events are triggered when the user selects, collapses, expands, adds or removes an item on the list."
        },
        "group": "API"
      },
      {
        "text": "API",
        "url": "treeview/api",
        "title": {
          "aspnet-core": "$FRAMEWORK TreeView API Example"
        },
        "meta": {
          "aspnet-core": "This demo shows the specific API functions, as well as DataSource interaction options, which control the behaviour of $FRAMEWORK TreeView."
        }
      },
      {
        "text": "RTL support",
        "url": "treeview/right-to-left-support",
        "title": {
          "aspnet-core": "RTL Support in $FRAMEWORK TreeView component"
        },
        "meta": {
          "aspnet-core": "Get familiar with the RTL support in $FRAMEWORK TreeView component. Look at the example and use the source code to play with the demo."
        },
        "group": "Accessibility and Internationalization"
      },
      {
        "text": "Keyboard navigation",
        "url": "treeview/keyboard-navigation",
        "title": {
          "aspnet-core": "$FRAMEWORK TreeView control | Keyboard support demo"
        },
        "meta": {
          "aspnet-core": "Look at the source code and play with the demo to find out more about the keyboard support feature in $FRAMEWORK TreeView."
        }
      }
    ],
    "category": "Navigation"
  },
  {
    "text": "Upload",
    "name": "upload",
    "updated": true,
    "api": "web/upload",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/upload"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/upload"
    },
    "spriteCssClass": "uploadIcon",
    "items": [
      {
        "text": "Overview",
        "url": "upload/index",
        "new": true,
        "title": {
          "aspnet-core": "$FRAMEWORK Upload extension overview demo"
        },
        "meta": {
          "aspnet-core": "This $FRAMEWORK Upload extension demo shows the async upload functionality of $FRAMEWORK Upload control along with chunk upload, file validation and custom dropzone functionalities enabled."
        }
      },
      {
        "text": "Basic usage",
        "url": "upload/basicusage",
        "packages": [ "!jsp", "!php" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Upload extension demo"
        },
        "meta": {
          "aspnet-core": "This $FRAMEWORK Upload extension demo illustrates the multi-file selection capability of the control."
        }
      },
      {
        "text": "Tag Helper",
        "url": "upload/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Upload Tag Helper sample"
        }
      },
      {
        "text": "Asynchronous Upload",
        "url": "upload/asyncupload",
        "title": {
          "aspnet-core": "$FRAMEWORK Asynchronous File Upload Example"
        },
        "meta": {
          "aspnet-core": "This example shows the async upload functionality of $FRAMEWORK Upload control."
        }
      },
      {
        "text": "Chunk Upload",
        "url": "upload/chunkupload",
        "title": {
          "aspnet-core": "$FRAMEWORK Chunk Upload Example"
        },
        "meta": {
          "aspnet-core": "This example shows the chunk upload functionality of $FRAMEWORK Upload control."
        }
      },
      {
        "text": "Custom Drop Zone",
        "url": "upload/customdropzone",
        "title": {
          "aspnet-core": "Custom drop zone demo for $FRAMEWORK File Upload"
        },
        "meta": {
          "aspnet-core": "This example shows the custom drop zone functionality of $FRAMEWORK Upload control."
        }
      },
      {
        "text": "Directory Upload",
        "url": "upload/directoryupload",
        "title": {
          "aspnet-core": "Directory upload demo for $FRAMEWORK File Upload"
        },
        "meta": {
          "aspnet-core": "This example shows the directory upload functionality of $FRAMEWORK Upload control."
        }
      },
      {
        "text": "Validation",
        "url": "upload/validation",
        "title": {
          "aspnet-core": "Validation demo for $FRAMEWORK File Upload"
        },
        "meta": {
          "aspnet-core": "This example shows the validation functionality of $FRAMEWORK Upload control."
        }
      },
      {
        "text": "Events",
        "url": "upload/events",
        "title": {
          "aspnet-core": "Handling events in $FRAMEWORK Upload | UI for $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "In this sample you will see how to handle events, triggered by Kendo UI jQuery-based Upload widget, used in $FRAMEWORK."
        }
      },
      {
        "text": "API",
        "url": "upload/api",
        "title": {
          "aspnet-core": "API example for $FRAMEWORK File Upload Control"
        },
        "meta": {
          "aspnet-core": "This demo shows API Functions of $FRAMEWORK Upload component. Try the sample to see how to enable, disable the upload option and toggle the enabled state."
        }
      },
      {
        "text": "Templates",
        "url": "upload/templates",
        "title": {
          "aspnet-core": "Templates for Telerik $FRAMEWORK Upload"
        },
        "meta": {
          "aspnet-core": "In this example you will see templates options for Telerik $FRAMEWORK Upload extension."
        }
      },
      {
        "text": "RTL support",
        "url": "upload/right-to-left-support",
        "title": {
          "aspnet-core": "Right to left support in Telerik $FRAMEWORK Upload extension"
        },
        "meta": {
          "aspnet-core": "This demo illustrates the right to left support in Telerik $FRAMEWORK Upload HtmlHelper extension."
        }
      }
    ],
    "category": "Editors"
  },
  {
    "text": "Window",
    "name": "window",
    "updated": true,
    "api": "web/window",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/window"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/window"
    },
    "spriteCssClass": "windowIcon",
    "items": [
      {
        "text": "Overview",
        "url": "window/index",
        "new": true,
        "title": {
          "aspnet-core": "$FRAMEWORK Window Example | UI for $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates an overview of $FRAMEWORK Window contorl one of the components which you can use to enhance the interaction in your web app."
        }
      },
      {
        "text": "Basic usage",
        "url": "window/basicusage",
        "packages": [ "!jsp", "!php" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Window Example | UI for $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the basic usage of $FRAMEWORK Window contorl one of the components which you can use to enhance the interaction in your web app."
        }
      },
      {
        "text": "Constrain movement",
        "url": "window/constrain-movement",
        "title": {
          "aspnet-core": "Example of constrain movement of $FRAMEWORK Window control"
        },
        "meta": {
          "aspnet-core": "This example illustrates how to constrain the movement of $FRAMEWORK Window."
        }
      },
      {
        "text": "Tag Helper",
        "url": "window/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Window Tag Helper sample"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "AjaxContent.cshtml",
              "url": "~/Views/Window/AjaxContent.cshtml"
            }
          ]
        }
      },
      {
        "text": "Customizing actions",
        "url": "window/actions",
        "title": {
          "aspnet-core": "Example of customizing actions in $FRAMEWORK Window control"
        },
        "meta": {
          "aspnet-core": "This $FRAMEWORK Window sample illustrates how client-side actions can be further customized in order to bring interactivity in your web app to a higher level."
        }
      },
      {
        "text": "Loading content with AJAX",
        "url": "window/ajax",
        "title": {
          "aspnet-core": "AJAX loaded content with $FRAMEWORK Window"
        },
        "meta": {
          "aspnet-core": "This example illustrates how content in $FRAMEWORK window control can be loaded, using AJAX."
        },
        "requiresServer": "true",
        "sources": {
          "aspnet-core": [
            {
              "name": "AjaxContent.cshtml",
              "url": "~/Views/Window/AjaxContent.cshtml"
            }
          ]
        }
      },
      {
        "text": "Animation effects",
        "url": "window/animation",
        "title": {
          "aspnet-core": "Animation effects demo for $FRAMEWORK window control"
        },
        "meta": {
          "aspnet-core": "This sample illustrates the animation effects in $FRAMEWORK window control. Just play with animation settings to change the interactivity of the control."
        }
      },
      {
        "text": "Events",
        "url": "window/events",
        "title": {
          "aspnet-core": "Events in $FRAMEWORK Window demo"
        },
        "meta": {
          "aspnet-core": "This demo shows how to fire events in $FRAMEWORK window control. Refresh, activate, open, dragend, dragstart are some of the events which you can trigger."
        },
        "requiresServer": "true",
        "sources": {
          "aspnet-core": [
            {
              "name": "LoadAjaxContent.cshtml",
              "url": "~/Views/Window/LoadAjaxContent.cshtml"
            }
          ]
        }
      },
      {
        "text": "API",
        "url": "window/api",
        "title": {
          "aspnet-core": "Example of $FRAMEWORK Window API"
        },
        "meta": {
          "aspnet-core": "This sample shows how you can use the API of $FRAMEWORK Window control to refresh the content of the window, open and close it."
        },
        "requiresServer": "true",
        "sources": {
          "aspnet-core": [
            {
              "name": "LoadAjaxContent.cshtml",
              "url": "~/Views/Window/LoadAjaxContent.cshtml"
            }
          ]
        }
      },
      {
        "text": "RTL support",
        "url": "window/right-to-left-support",
        "title": {
          "aspnet-core": "Right-to-Left window position of $FRAMEWORK Window control"
        },
        "meta": {
          "aspnet-core": "This demo shows how $FRAMEWORK Window control supports right-to-left direction of the window to provide best end-user experience."
        }
      },
      {
        "text": "Keyboard navigation",
        "url": "window/keyboard-navigation",
        "title": {
          "aspnet-core": "Keyboard navigation support | $FRAMEWORK Window Demo"
        },
        "meta": {
          "aspnet-core": "The sample demonstrates how the keyboard navigation feature is integrated in the powerful $FRAMEWORK Window control."
        }
      }
    ],
    "category": "Layout"
  },
  {
    "text": "DataSource",
    "name": "datasource",
    "api": "framework/datasource",
    "spriteCssClass": "dataSourceIcon",
    "items": [
      {
        "text": "Basic Usage",
        "url": "datasource/index",
        "title": {
          "aspnet-core": "$FRAMEWORK DataSource sample"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "description": {
          "aspnet-core": "This demo illustrates the core functionality of ASP.NET Core DataSource component in ASP.NET Core Web framework."
        }
      },
      {
        "text": "Shared DataSource",
        "url": "datasource/shared-datasource",
        "title": {
          "kendo-ui": " Shared DataSource Demo | ASP.NET Core Web demos"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "meta": {
          "kendo-ui": "This example demonstrates a shared DataSource which can be created to enable multiple UI widgets to bind to the same data collection."
        },
        "requiresServer": "true"
      },
      {
        "text": "Tag Helper",
        "url": "datasource/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK DataSource Tag Helper sample"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProductViewModel.cs",
              "url": "~/Models/ProductViewModel.cs"
            }
          ]
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK DataSource component."
        }
      }
    ],
    "category": "Framework"
  },
  {
    "text": "Validator",
    "name": "validator",
    "api": "web/validator",
    "spriteCssClass": "validatorIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "validator/index",
        "title": {
          "aspnet-core": "ASP.NET Core Validator Demo"
        },
        "meta": {
          "aspnet-core": "This demo illustrates the core functionality of ASP.NET Core Validator component in ASP.NET Core Web framework."
        },
        "packages": [
          "!jsp",
          "!php"
        ]
      }
    ],
    "category": "Editors"
  },
  {
    "text": "Chat",
    "name": "chat",
    "component": "chat",
    "api": "web/chat",
    "pro": "true",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/chat"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/chat"
    },
    "spriteCssClass": "chatIcon",
    "items": [
      {
        "text": "Insurance",
        "url": "chat/index",
        "title": {
          "kendo-ui": "Connecting Telerik $FRAMEWORK Chat widget to Google Dialogflow"
        },
        "meta": {
          "aspnet-core": "How Telerik $FRAMEWORK Chat widget works, view demo source code of Telerik $FRAMEWORK Chat."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK Chat widget allows for integration with any bot framework, due to its simplicity, flexible API and customizable templates.</p><p>This demo demonstrates how the widget can be connected to a chat bot created in Google's <a href=\"https://dialogflow.com\">Dialogflow</a>. The sample shows off out of the box features of the Chat widget, such as the hero cards and suggested actions, as well as the ability to define custom templates to fit any custom payload, returned by the service.</p>"
        }
      },
      {
        "text": "Travel",
        "url": "chat/travel",
        "title": {
          "aspnet-core": "Connecting Telerik $FRAMEWORK Chat widget to Microsoft Bot Framework"
        },
        "meta": {
          "aspnet-core": "How Telerik $FRAMEWORK Chat widget works, view demo source code of Telerik $FRAMEWORK Chat."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK Chat widget allows for integration with any bot framework, due to its simplicity, flexible API and customizable templates.</p><p>This demo demonstrates how the widget can be connected to a chat bot created in Microsoft's <a href=\"https://dev.botframework.com\">Bot Framework</a>, using the <a href=\"https://github.com/Microsoft/BotFramework-DirectLineJS\">DirectLineJS</a> client library. The sample shows off out of the box features of the Chat widget, such as the hero cards and suggested actions, as well as the ability to define custom components, which let you use javascript to render any content. In this particular case we use the <a href=\"https://github.com/Microsoft/AdaptiveCards\">AdaptiveCards</a> client API to render the adaptive cards returned by the service.</p>"
        }
      },
      {
        "text": "Healthcare",
        "url": "chat/healthcare",
        "title": {
          "aspnet-core": "Connecting Telerik $FRAMEWORK Chat widget to Microsoft Bot Framework"
        },
        "meta": {
          "aspnet-core": "How Telerik $FRAMEWORK Chat widget works, view demo source code of Telerik $FRAMEWORK Chat."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK Chat widget allows for integration with any bot framework, due to its simplicity, flexible API and customizable templates.</p><p>This demo demonstrates how the widget can be connected to a chat bot created in Microsoft's <a href=\"https://dev.botframework.com\">Bot Framework</a>, using the <a href=\"https://github.com/Microsoft/BotFramework-DirectLineJS\">DirectLineJS</a> client library. The sample shows off out of the box features of the Chat widget, such as the hero cards and suggested actions, as well as the ability to define custom components, which let you use javascript to render any content. In this particular case we use the <a href=\"https://github.com/Microsoft/AdaptiveCards\">AdaptiveCards</a> client API to render the adaptive cards returned by the service.</p>"
        }
      },
      {
        "text": "Toolbar",
        "url": "chat/toolbar",
        "title": {
          "aspnet-core": "Connecting Telerik $FRAMEWORK Chat widget to Microsoft Bot Framework"
        },
        "meta": {
          "aspnet-core": "How Telerik $FRAMEWORK Chat widget works, view demo source code of Telerik $FRAMEWORK Chat."
        },
        "description": {
          "aspnet-core": "<p>This demo shows how you can define tools in the Chat's toolbar and incorporate other widgets/components and JavaScript logic to create various commands.</p>"
        }
      }
    ],
    "category": "Conversational UI"
  },
  {
    "text": "Area Charts",
    "name": "area-charts",
    "api": "dataviz/chart",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/charts"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/chart"
    },
    "spriteCssClass": "chartAreaIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "area-charts/index",
        "title": {
          "aspnet-core": "$FRAMEWORK Area Charts control | UI for $FRAMEWORK Demos"
        },
        "meta": {
          "aspnet-core": "This example shows how to use Telerik $FRAMEWORK Area Charts extension to visualize filled areas on a diagram. "
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"https://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"https://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>In this example, you can see how to register and configure an Aria chart, which represents the gross domestic growth of India, Haiti and of the whole World. This chart type is suitable for displaying quantitative data as continuous lines that pass through points defined by their items' values. The portion of the graph beneath the lines is filled with a particular color for each series. The different colors in an Area chart are useful for emphasizing changes in values from several sets of similar data. <br /> <br /> The chart can fetch data for its series from either local or remote data source. <p><strong><br /> Key Features of Telerik Core Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/charts\">Telerik Core Charts</a>.</p>"
        }
      },
      {
        "text": "Tag Helper",
        "url": "area-charts/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Chart Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK Chart component."
        }
      },
      {
        "text": "Stacked area",
        "url": "area-charts/stacked-area",
        "title": {
          "aspnet-core": "$FRAMEWORK stacked area chart example"
        },
        "meta": {
          "aspnet-core": "Learn how to visualize series that should be stacked in an $FRAMEWORK chart."
        },
        "description": {
          "aspnet-core": "<p>By default, the Core Area Chart renders its series on top of one another. You have the ability to stack them atop one another instead, so that the data values at each x-value are summed. In an area chart, the value for each series will always be stacked relative to the preceding one.</p> <p>You can enable the stack feature through the SeriesDefaults -&gt; Area -&gt; Stack(true) setting.</p>"
        },
        "group": "Area Chart Types"
      },
      {
        "text": "100% Stacked area",
        "url": "area-charts/stacked100-area",
        "title": {
          "aspnet-core": "$FRAMEWORK 100% stacked area chart example"
        },
        "meta": {
          "aspnet-core": "Learn how to visualize series that should be stacked to 100% in an $FRAMEWORK chart."
        },
        "description": {
          "aspnet-core": "<p>The Area chart type supports 100% stacking, where the stacked series value are rescaled such that they add up to 100%.</p> <p>You can enable the 100% stack feature through the SeriesDefaults -&gt; Area -&gt; Stack(ChartStackType.Stack100) setting.</p> <p>For more information inspect the <a href=\"https://docs.telerik.com/aspnet-mvc/api/Kendo.Mvc.UI.Fluent/ChartBuilder#methods-SeriesDefaults%28System.Action%3CKendo.Mvc.UI.Fluent.ChartSeriesDefaultsBuilder\">SeriesDefaults option</a> in the documentation.</p>"
        }
      },
      {
        "text": "Stepped Area",
        "url": "area-charts/step-area",
        "title": {
          "aspnet-core": "Stepped area demo for Telerik $FRAMEWORK Area Charts"
        },
        "meta": {
          "aspnet-core": "In this example we illustrate how stepped area can be configured for Telerik Area charts for $FRAMEWORK."
        },
        "description": {
          "aspnet-core": "<p>The Stepped Area chart is a form of area chart where each data point from the series is connected with vertical and horizontal lines to form a step-like progression. This type of area visualization is useful when you want to highlight the increase or decrease in values over time.</p> <p>You can configure a stepped area chart through the Series -&gt; Area -&gt; Line -&gt; Style(ChartLineStyle.<strong>Step</strong>) settings of the Core Chart.</p>"
        }
      },
      {
        "text": "Smooth Area",
        "url": "area-charts/smooth-area",
        "title": {
          "aspnet-core": "Configure smooth line (spline) style for $FRAMEWORK Area Chart"
        },
        "meta": {
          "aspnet-core": "This demo shows how to configure smooth line (spline) style for the $FRAMEWORK Area Chart."
        },
        "description": {
          "aspnet-core": "<p>This demo shows how to configure smooth line (spline) style for the Telerik Core Area Chart.</p> <p>A Spline chart is a form of line/area chart where each data point from the series is connected with a curved line, which represents a rough approximation of the missing data points.</p> <p>You can configure a smooth line area chart through the Series -&gt; Area -&gt; Line -&gt; Style(ChartAreaStyle.<strong>Smooth</strong>) settings of the $FRAMEWORK Chart.</p>"
        }
      },
      {
        "text": "Date axis",
        "url": "area-charts/date-axis",
        "title": {
          "aspnet-core": "Date axis sample for $FRAMEWORK Area Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "DatePoint.cs",
              "url": "~/Models/Chart/DatePoint.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how you can set specific base date units in your $FRAMEWORK Area Chart to help you visualize a seasonal trend in your app."
        },
        "description": {
          "aspnet-core": "<p>You can scale the date axis of your $FRAMEWORK Area Chart to get a better visualization of the seasonal data in your app. This can be done by modifying:</p> <ul> <li>The base date unit of the x-axis through the CategoryAxis.BaseUnit property, which takes seconds, minutes, hours, days, week, months and years</li> <li>The default aggregates of the series through the Series.Aggregate property, which takes max, min, sum, avg and count.</li> </ul>"
        },
        "group": "Functionality"
      },
      {
        "text": "Logarithmic axis",
        "url": "area-charts/logarithmic-axis",
        "title": {
          "aspnet-core": "Logarithmic axis sample for $FRAMEWORK Area Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ElectricityProduction.cs",
              "url": "~/Models/Chart/ElectricityProduction.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how you can use a logarithmic axis for the $FRAMEWORK Area Chart."
        },
        "description": {
          "aspnet-core": "<p>A logarithmic axis is a special numeric axis that transforms the actual values by using a logarithmic function with a particular base. A logarithmic axis is useful for displaying values that cover different orders of magnitude because it lets large values display together with small values in a more condensed scale than the default linear axis.</p> <p>This demo shows how you can use a logarithmic axis for the $FRAMEWORK Area Chart by setting the ValueAxis -&gt; Logarithmic() method. Тhe base of the logarithmic axis is defined by the interval between the major divisions, controlled by the МajorUnit property.</p>"
        },
        "requiresServer": "true"
      },
      {
        "text": "Multi-axis",
        "url": "area-charts/multiple-axes",
        "title": {
          "aspnet-core": "Multi-axis demo for $FRAMEWORK Area Chart"
        },
        "meta": {
          "aspnet-core": "Leverage the best charting performance and visualize data on multiple axis with $FRAMEWORK Area Charts to provide solid business reports for end users."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK Area chart supports multiple axis. This helps you leverage the best charting performance and visualize data on any number axis to provide solid business reports for your users.</p> <p>The example above shows a hybrid car range report visualized through four value axes: <em>miles</em>, <em>km</em>, <em>miles per gallon</em> and <em>liters per 100km</em>. Note that each of them has unique name which is set through the <strong>ValueAxis.Title </strong>method. You can also set the <strong>CategoryAxis.AxisCrossingValue</strong> method to specify the alignment of the value axes.</p>"
        }
      },
      {
        "text": "Error Bars",
        "url": "area-charts/error-bars",
        "title": {
          "aspnet-core": "Example of using ErrorBars for $FRAMEWORK Area Chart"
        },
        "meta": {
          "aspnet-core": "This demo shows how to use ErrorBars for $FRAMEWORK Area Chart"
        },
        "description": {
          "aspnet-core": "<p>This demo illustrates how you can use Error Bars for $FRAMEWORK Area Chart to show variability of data. The Error bars are specified as part of the Series chart setting and are offered by the following Series types: Area, Vertical Area, Column, Bar, Line, Vertical Line, Scatter and ScatterLine.</p> <p>The error bars support statistical calculations based on the series data. The supported types are <a href=\"https://en.wikipedia.org/wiki/Standard_error\">standard error</a>, <a href=\"https://en.wikipedia.org/wiki/Standard_deviation\">population standard deviation</a> and other. To specify that standard deviation, you should set \"stddev\" as in this demo, i.e. Series -&gt; Area -&gt; ErrorBars(errorBars =&gt; errorBars.Value(\"stddev\"))</p> <p>You can find more information in the following help article: <a href=\"https://docs.telerik.com/kendo-ui/dataviz/chart/error-bars\">Error Bars</a>.</p>"
        }
      },
      {
        "text": "Binding to remote data",
        "url": "area-charts/remote-data-binding",
        "title": {
          "aspnet-core": "Example of $FRAMEWORK Area Chart bound to remote data"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ElectricityProduction.cs",
              "url": "~/Models/Chart/ElectricityProduction.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "See how the $FRAMEWORK Area Chart can be bound to remote data by configuring the DataSource transport which defines how the DataSource interacts with remote data."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Chart offers two ways of data-binding:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>You can see in this demo how the $FRAMEWORK Area chart can be bound to remote data by configuring the DataSource transport which defines how the DataSource interacts with remote data.</p>"
        },
        "group": "Data Binding",
        "requiresServer": "true"
      },
      {
        "text": "Binding to local data",
        "url": "area-charts/local-data-binding",
        "title": {
          "aspnet-core": "$FRAMEWORK Area Charts binding to local data example"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "InternetUsers.cs",
              "url": "~/Models/Chart/InternetUsers.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This sample demonstrates how $FRAMEWORK Area Chart can use existing objects as data points."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Area chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series</li> </ul> <p>In this example you can see how to bind the chart using the server approach. You need to create an action method and pass the InternetUsers list located in the \\Models\\Chart\\ChartDataRepository.cs file as a model. After that you should configure the data bound fields for the Series (series =>{series.Area(model => model.Value)}) and Category Axis (axis => axis.Categories(model => model.Year)) Note that the view has to be strongly typed so that the chart is able to load its data.</p>"
        }
      },
      {
        "text": "Binding to grouped data",
        "url": "area-charts/grouped-data",
        "title": {
          "aspnet-core": "$FRAMEWORK Area Charts | Example of binding to grouped data"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "StockDataPoint.cs",
              "url": "~/Models/Chart/StockDataPoint.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "With this example you will learn how to bind grouping data to $FRAMEWORK Area Charts."
        },
        "description": {
          "aspnet-core": "<p>Telerik Core charting extension can be integrated to a grouped data by <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/data/datasource\"> ASP.NET Core DataSource</a>. To do, so you can follow the steps below:</p> <ol> <li>Bind the chart to a <a href=\"https://docs.telerik.com/kendo-ui/framework/datasource/overview\"> ASP.NET Core DataSource control</a>.</li> <li>Set the <a href=\"https://docs.telerik.com/kendo-ui/framework/datasource/basic-usage#working-with-grouped-data\">DataSource.group.field property</a> to the name (e.g., the &ldquo;Symbol&rdquo; field) of the column in the underlying data which will be the criteria for grouping the chart series items into series Group(group =&gt; group.Add(model =&gt; model.Symbol)</li> <li>Bind the Y values of the series to the corresponding data source field (e.g., the &ldquo;Close&rdquo; field): series.Area(model =&gt; model.Close)</li> <li>Bind the Category Axis to the corresponding field (e.g., the &ldquo;Date&rdquo; field): .Categories(model =&gt; model.Date)</li> </ol> <p><br /> This will result in as many series as the number of distinct values in the DataSource.group.field column (e.g., &ldquo;Symbol&rdquo;). &nbsp;Since the &ldquo;Symbol&rdquo; field in this example contains three distinct values (&ldquo;1. GOOG (close)&rdquo;, &ldquo;2. AAPL (close)&rdquo; and &ldquo;3. AMZN (close)&rdquo;) the chart will create three series as well.</p>"
        },
        "requiresServer": "true"
      }
    ],
    "category": "Charts"
  },
  {
    "text": "Bar Charts",
    "name": "bar-charts",
    "api": "dataviz/chart",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/charts"
    },
    "spriteCssClass": "chartBarIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "bar-charts/index",
        "title": {
          "aspnet-core": "$FRAMEWORK Bar Charts sample"
        },
        "meta": {
          "aspnet-core": "In this demo you will see in action the $FRAMEWORK Bar Chart HTMLHelper extension for ASP.NET Core Bar Charts widget."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"https://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"https://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>A Bar chart displays data as horizontal bars whose lengths vary according to their value. You can use a Bar chart to show a comparison between several sets of data (for example, summaries of the unique and total site visitors for certain period).<br /> <br /> The chart can fetch data for its series from either local or remote data source. <p><strong><br /> Key Features of Telerik Core Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/charts\">Telerik Core Charts</a>.</p>"
        }
      },
      {
        "text": "Tag Helper",
        "url": "bar-charts/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Chart Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK Chart component."
        }
      },
      {
        "text": "Column chart",
        "url": "bar-charts/column",
        "title": {
          "aspnet-core": "Example of a basic $FRAMEWORK Column Chart control"
        },
        "meta": {
          "aspnet-core": "This demo shows how some settings of $FRAMEWORK chart can be changed in order to display the bar Chart as a Column chart."
        },
        "description": {
          "aspnet-core": "<p>The Column chart shows data as vertical bars whose heights vary according to their value. It can be useful for showing a comparison between several sets of data (e.g., snapshots of data across different points in time like the GDP growth shown in this example).</p> <p>Column charts are very similar to Bar charts, with the only difference that bars&rsquo; orientation is vertical instead of horizontal.</p> <p>You can define the chart series as horizontal via the Series -&gt; series.<strong>Column</strong> method:<br /> <br /> .Series(series =&gt; series.Column(new double[] { 3.907, 7.943, 7.848, 9.284, 9.263, 9.801, 3.890, 8.238, 9.552, 6.855 }))</p>"
        },
        "group": "Bar Chart Types"
      },
      {
        "text": "Stacked bars",
        "url": "bar-charts/stacked-bar",
        "title": {
          "aspnet-core": "$FRAMEWORK Stacked Bar Charts | UI for $FRAMEWORK demo"
        },
        "meta": {
          "aspnet-core": "This example shows how $FRAMEWORK Bar Chart supports a stacked bar. The feature of the control is enabled by setting the stacked property to true."
        },
        "description": {
          "aspnet-core": "<p>A Stacked bar is a bar divided into subparts to show cumulative effect, to display money distribution or production against time. You can easily enable the stack feature through the SeriesDefaults -&gt; Bar -&gt; Stack(true) setting:</p>"
        }
      },
      {
        "text": "Stacked and grouped bars",
        "url": "bar-charts/grouped-stacked-bar",
        "title": {
          "aspnet-core": "$FRAMEWORK Stacked and Grouped Bar Chart Example"
        },
        "meta": {
          "aspnet-core": "This sample demonstrates the implementation of $FRAMEWORK stacked and grouped bars in various data visualization-driven web apps."
        },
        "description": {
          "aspnet-core": "<p>Usually, the data series in a stacked column or bar chart have one stack per category. There are scenarios in which you might want to arrange your data so that the chart appears to have more than one stack per category.</p> <p>In this demo, you can see how to group stacked columns to display the World population compared by age and sex in a specific period of time by setting the Stack() method, which sets the name of the stack that the series belong to:</p> <p>series.Column(new int[] { 1100941, 1139797, 1172929, 1184435, 1184654 }).Name(\"0-19\").Stack(\"Female\");</p>"
        }
      },
      {
        "text": "100% Stacked bars",
        "url": "bar-charts/stacked100-bar",
        "title": {
          "aspnet-core": "100% Stacked Bars in Telerik $FRAMEWORK Bar Charts"
        },
        "meta": {
          "aspnet-core": "This demo illustrates 100% stacked bars capability in Telerik $FRAMEWORK Bar Charts for Kendo UI jQuery-powered Bar Chart control."
        },
        "description": {
          "aspnet-core": "<p>The Bar chart type supports 100% stacking, where the stacked series value are rescaled such that they add up to 100%.</p> <p>You can enable the 100% stack feature through the SeriesDefaults -&gt; Bar -&gt; Stack(ChartStackType.Stack100) method.</p>"
        }
      },
      {
        "text": "100% Stacked and grouped bars",
        "url": "bar-charts/grouped-stacked100-bar",
        "title": {
          "aspnet-core": "$FRAMEWORK 100% Stacked and Grouped Bar Chart Example"
        },
        "meta": {
          "aspnet-core": "This sample demonstrates the implementation of $FRAMEWORK 100% stacked and grouped bars in various data visualization-driven web apps."
        },
        "description": {
          "aspnet-core": "<p>This example demonstrates the implementation of $FRAMEWORK 100% stacked and grouped bars.</p> <p>You can enable the 100% stack feature by setting the first ChartStackType.Stack100 argument of the Series -&gt; Column -&gt; Stack() method, i.e.</p> <p>series.Column(new int[] { 1100941, 1139797, 1172929, 1184435, 1184654 }).Name(\"0-19\").Stack(ChartStackType.Stack100, \"Female\");</p>"
        }
      },
      {
        "text": "Date axis",
        "url": "bar-charts/date-axis",
        "title": {
          "aspnet-core": "Date axis example in $FRAMEWORK Bar chart control"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "DatePoint.cs",
              "url": "~/Models/Chart/DatePoint.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This sample shows how you can configure the base date unit for your date axis in $FRAMEWORK business bar chart."
        },
        "description": {
          "aspnet-core": "<p>You can scale the date axis of your $FRAMEWORK Bar Chart to get a better visualization of the seasonal data in your app. This can be done by modifying:</p> <ul> <li>The base date unit of the x-axis through the CategoryAxis.BaseUnit method, which takes seconds, minutes, hours, days, week, months and years</li> <li>The default aggregates of the series through the Series.Aggregate property, which takes max, min, sum, avg and count.</li> </ul>"
        }
      },
      {
        "text": "Logarithmic axis",
        "url": "bar-charts/logarithmic-axis",
        "title": {
          "aspnet-core": "Logarithmic axis sample for $FRAMEWORK Bar Charts"
        },
        "meta": {
          "aspnet-core": "This demo shows how you can use a logarithmic axis for the $FRAMEWORK Bar Chart."
        },
        "description": {
          "aspnet-core": "<p>A logarithmic axis is a special numeric axis that transforms the actual values by using a logarithmic function with a particular base. A logarithmic axis is useful for displaying values that cover different orders of magnitude because it lets large values display together with small values in a more condensed scale than the default linear axis.</p> <p>This demo shows how you can use a logarithmic axis for the $FRAMEWORK Column Chart by setting the ValueAxis -&gt; Logarithmic() method.</p>"
        }
      },
      {
        "text": "Multi-axis",
        "url": "bar-charts/multiple-axes",
        "title": {
          "aspnet-core": "Multi-axis in $FRAMEWORK Bar Charts | UI for $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "In this demo you will see how multiple axis of Telerik jQuery-powered Bar Charts can be configured in $FRAMEWORK."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK Bar chart supports multiple axis. This helps you leverage the best charting performance and visualize data on any number axis to provide solid business reports for your users.</p> <p>The example above shows a hybrid car range report visualized through four value axes: <em>km</em>, <em>miles</em>, <em>miles per gallon</em> and <em>liters per 100km</em>. Note that each of them has unique name which is set through the <strong>ValueAxis.Title </strong>method. You can also set the <strong>CategoryAxis.AxisCrossingValue</strong> method to specify the alignment of the value axes.</p>"
        }
      },
      {
        "text": "Plot bands",
        "url": "bar-charts/plotbands",
        "title": {
          "aspnet-core": "Plot Bands example in $FRAMEWORK Bar chart"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ElectricityProduction.cs",
              "url": "~/Models/Chart/ElectricityProduction.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This sample demonstrates how to add plot bands to your $FRAMEWORK charts in order to plot data within some borders."
        },
        "description": {
          "aspnet-core": "<p>Plot Bands are colored ranges, which are used to highlight certain areas in the $FRAMEWORK Chart. You can create them by setting:</p> <p>ValueAxis -&gt; PlotBands -&gt; bands.Add().From(10000).To(30000).Color(\"#c00\").Opacity(0.3);</p> <p>Each Plot Band could be configured independently by specifying the following properties:</p> <ul> <li>From &mdash; the start position of the plot band.</li> <li>To &mdash; the end position of the plot band.</li> <li>Opacity &mdash; the opacity of the plot band.</li> <li>Color &mdash; the color of the plot band.</li> </ul>"
        },
        "requiresServer": "true"
      },
      {
        "text": "Gap and spacing",
        "url": "bar-charts/gap-spacing",
        "title": {
          "aspnet-core": "Gap and spacing in Core Bar Charts | UI for $FRAMEWORK demo"
        },
        "meta": {
          "aspnet-core": "With this example, you will be able to take a closer look at gap and spacing in $FRAMEWORK Bar Charts. Set gap and spacing values to play with the demo."
        },
        "description": {
          "aspnet-core": "<p>The Bar chart component allows you to control the distance between its categories as well as between series points within a category. This can be done through the <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart#configuration-series.gap\">series.gap</a> and <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart#configuration-series.spacing\">series.spacing</a> client-side settings of the chart.</p> <p>In this demo, you can play with the provided GAP and SPACING dropdowns to change the values of the above properties.</p>"
        }
      },
      {
        "text": "Error Bars",
        "url": "bar-charts/error-bars",
        "title": {
          "aspnet-core": "This demo shows how to use ErrorBars for $FRAMEWORK Bar Chart"
        },
        "meta": {
          "aspnet-core": "Example of using ErrorBars for $FRAMEWORK Bar Chart"
        },
        "description": {
          "aspnet-core": "<p>This demo illustrates how to show variability of data using the Error Bars feature of the Telerik Core Bar Chart. The Error bars are specified as part of the Series setting and are offered by the following Series types: Area, Vertical Area, Column, Bar, Line, Vertical Line, Scatter and ScatterLine.</p><p>The error bars support statistical calculations based on the series data. The supported types are <a href=\"https://en.wikipedia.org/wiki/Standard_error\">standard error</a> and <a href=\"https://en.wikipedia.org/wiki/Standard_deviation\">population standard deviation</a>. To specify that standard error should be used, you need to set \"stderr\" as a value, i.e.</p><p>Series -&gt; Column-&gt; .ErrorBars(errorBars =&gt; errorBars.Value(\"<strong>stderr</strong>\"))</p><p>You can find more information in the following help article: <a href=\"https://docs.telerik.com/kendo-ui/dataviz/chart/error-bars\">Error Bars</a>.</p>"
        }
      },
      {
        "text": "Custom Visuals",
        "url": "bar-charts/visuals",
        "title": {
          "aspnet-core": "Example of using custom visuals for $FRAMEWORK Bar Chart"
        },
        "meta": {
          "aspnet-core": "This demo shows how to use ustom visuals for the $FRAMEWORK Bar Chart"
        },
        "description": {
          "aspnet-core": "<p>You can implement custom visualizations for the Bar/Column chart legend items, axis titles, labels, markers and series by utilizing the <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/drawing\">Kendo Drawing API</a>. You can do that by setting a JavaScript function name as a string parameter of the Series <strong>Visual</strong> method:<br /> <br /> SeriesDefaults -&gt; .Column().Visual(\"columnVisual\") or <br /> Series -&gt; series.Column(&hellip;).Visual(\"columnVisual\")</p> <p>Various context information is available through the function argument fields. Such are <strong>rect</strong> (the <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/geometry/rect\">kendo.geometry.Rect</a> that defines where the visual should be rendered), createVisual (a function that can be used to get the default visual) and options (different options depending on the item type).</p> <p>You can read more about it in the <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/drawing\">ASP.NET Core JavaScript API reference</a>.</p>"
        }
      },
      {
        "text": "Pan and zoom",
        "url": "bar-charts/pan-and-zoom",
        "title": {
          "aspnet-core": "Pan and zoom in Bar charts | ASP.NET Core Bar Chart demo"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ChartCategoryPoint.cs",
              "url": "~/Models/Chart/ChartCategoryPoint.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "Enable pan and zoom effect in ASP.NET Core Bar charts. This example demonstrates how to enable pan and zoom for your bar charts."
        },
        "description": {
          "aspnet-core": "<p>The Pan and Zoom features allow you to navigate through and zoom in/out the Telerik Core Bar Chart. </p> <p>You can enable the pan feature through the Pannable setting as well as to lock the either the X or Y axis using the Lock method.</p> <p>To enable the Zoom set the Zoomable configuration option. You can also fine tune the mouse wheel and selection zooming through the available Mousewheel and Selection methods.</p>"
        }
      },
      {
        "text": "Binding to remote data",
        "url": "bar-charts/remote-data-binding",
        "title": {
          "aspnet-core": "Binding to remote data demo | $FRAMEWORK Bar Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ElectricityProduction.cs",
              "url": "~/Models/Chart/ElectricityProduction.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how $FRAMEWORK Bar Charts can be bound to remote data to produce high-performance report in your business app."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Chart offers two ways of data-binding:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>You can see in this demo how the $FRAMEWORK Bar chart can be bound to remote data by configuring the DataSource transport which defines how the DataSource interacts with remote data.</p>"
        },
        "group": "Data Binding",
        "requiresServer": "true"
      },
      {
        "text": "Binding to local data",
        "url": "bar-charts/local-data-binding",
        "title": {
          "aspnet-core": "Local data-binding example | $FRAMEWORK Bar Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "BarChartsLocalDataViewModel.cs",
              "url": "~/Models/Chart/BarChartsLocalDataViewModel.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how the local data-binding is supported in $FRAMEWORK Bar Charts. Use the demo source code to try the feature of the component."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Chart offers two ways of data-binding:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>You can see in this demo how the $FRAMEWORK Bar chart can be bound to remote data by configuring the DataSource transport which defines how the DataSource interacts with remote data.</p>"
        }
      },
      {
        "text": "Binding to grouped data",
        "url": "bar-charts/grouped-data",
        "title": {
          "aspnet-core": "Grouped data binding demo for $FRAMEWORK Bar Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "StockDataPoint.cs",
              "url": "~/Models/Chart/StockDataPoint.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example shows the feature of binding to grouped data in $FRAMEWORK Bar Charts. See the source code to find how to use name templates for the data group."
        },
        "description": {
          "aspnet-core": "<p>Telerik Core charting extension can be integrated to a grouped data by <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/data/datasource\">ASP.NET Core DataSource</a>. To do so you can follow the following steps:</p> <ol> <li>Bind the chart to a <a href=\"https://docs.telerik.com/KENDO-UI/api/javascript/dataviz/ui/chart#configuration-dataSource\">ASP.NET Core DataSource control</a>.</li> <li>Set the <a href=\"https://docs.telerik.com/KENDO-UI/api/javascript/dataviz/ui/chart#configuration-dataSource\">DataSource.group.field property</a> to the name of the column in the underlying data which will be the criteria for grouping the chart series items into series: Group(group =&gt; group.Add(model =&gt; model.Symbol)</li> <li>Bind the Y values of the series to the &ldquo;Close&rdquo; field: series.Area(model =&gt; model.Close)</li> <li>Bind the Category Axis to the Date field: .Categories(model =&gt; model.Date)</li> </ol> <p> This will result in as many series as the number of distinct values in the column (i.e., DataSource.group.field). For each value there will be a chart series in the chart. </p>"
        },
        "requiresServer": "true"
      }
    ],
    "category": "Charts"
  },
  {
    "text": "Barcode",
    "name": "barcode",
    "spriteCssClass": "barcodeIcon",
    "api": "dataviz/barcode",
    "forum": {
      "aspnet-core": "aspnet-core-ui/barcode"
    },
    "items": [
      {
        "text": "Basic usage",
        "url": "barcode/index",
        "title": {
          "aspnet-core": "$FRAMEWORK Barcode Demo"
        },
        "meta": {
          "aspnet-core": "This sample demonstrates the core functionality of $FRAMEWORK Barcode which helps you easily encode data in machine readable format."
        }
      },
      {
        "text": "Tag Helper",
        "url": "barcode/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Barcode Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK Barcode component."
        }
      },
      {
        "text": "API",
        "url": "barcode/api",
        "title": {
          "aspnet-core": "$FRAMEWORK Barcode API Demo"
        },
        "meta": {
          "aspnet-core": "This sample demonstrates the different symbologies the $FRAMEWORK Barcode supports and the different options that could be set."
        }
      }
    ],
    "category": "Barcodes"
  },
  {
    "text": "Box Plot Charts",
    "name": "box-plot-charts",
    "api": "dataviz/chart",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/charts"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/chart"
    },
    "spriteCssClass": "chartBoxPlotIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "box-plot-charts/index",
        "title": {
          "aspnet-core": "$FRAMEWORK Box Plot Charts Example"
        },
        "meta": {
          "aspnet-core": "In this demo you will see in action the $FRAMEWORK Box Plot Chart HTMLHelper extension for ASP.NET Core Box Plot Charts component."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"https://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"https://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>The Box Plot chart is useful for comparing distributions between different sets of numerical data. It depicts graphically numerical data by displaying a data distribution summary with six indicators (lower value, first quartile, median, mean, third quartile, upper value) and outliers for each set of data.<br /> <br /> The chart can fetch data for its series from either local or remote data source. <p><strong><br /> Key Features of Telerik Core Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/charts\">Telerik Core Charts</a>.</p>"
        }
      },
      {
        "text": "Vertical Box Plot",
        "url": "box-plot-charts/vertical",
        "title": {
          "aspnet-core": "$FRAMEWORK Box Plot Charts Example"
        },
        "meta": {
          "aspnet-core": "In this demo you will see in action the $FRAMEWORK Box Plot Chart HTMLHelper extension for ASP.NET Core Box Plot Charts component."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"https://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"https://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>The Box Plot chart is useful for comparing distributions between different sets of numerical data. It depicts graphically numerical data by displaying a data distribution summary with six indicators (lower value, first quartile, median, mean, third quartile, upper value) and outliers for each set of data.<br /> <br /> The chart can fetch data for its series from either local or remote data source. <p><strong><br /> Key Features of Telerik Core Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/charts\">Telerik Core Charts</a>.</p>"
        }
      },
      {
        "text": "Binding to remote data",
        "url": "box-plot-charts/remote-data-binding",
        "title": {
          "aspnet-core": "Binding to remote data example | $FRAMEWORK Box Plot Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "OzoneConcentration.cs",
              "url": "~/Models/Chart/OzoneConcentration.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how $FRAMEWORK Box Plot Charts can be bound to remote data to produce high-performance report in your business app."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Chart offers two ways of data-binding:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration.</p>"
        },
        "requiresServer": "true"
      },
      {
        "text": "Binding to local data",
        "url": "box-plot-charts/local-data-binding",
        "title": {
          "aspnet-core": "$FRAMEWORK Box Plot Charts binding to local data demo"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "OzoneConcentration.cs",
              "url": "~/Models/Chart/OzoneConcentration.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how the local data-binding is supported in $FRAMEWORK Box Plot Charts. Use the demo source code to try the feature of the control."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Box Plot chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series</li> </ul>"
        }
      }
    ],
    "category": "Charts"
  },
  {
    "text": "Bubble Charts",
    "name": "bubble-charts",
    "api": "dataviz/chart",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/charts"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/chart"
    },
    "spriteCssClass": "chartBubbleIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "bubble-charts/index",
        "title": {
          "aspnet-core": "$FRAMEWORK Bubble Charts demo"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the basic usage and core features of the $FRAMEWORK Bubble Chart control."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"https://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"https://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, bubble, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>A Bubble chart shows the data as points with coordinates and size defined by their items' values. It is similar to the Scatter chart, in which the data points are replaced with bubbles. This allows a Bubble chart to display three dimensional data &mdash; two values for the items' coordinates and one for their size. A Bubble chart is useful for visualizing different scientific relationships (economic, social, etc.). This chart type's x-axis is also numerical and does not require items.<br /> <br /> The chart can fetch data for its series from either local or remote data source. <p><strong><br /> Key Features of Telerik Core Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/charts\">Telerik Core Charts</a>.</p>"
        }
      },
      {
        "text": "Tag Helper",
        "url": "bubble-charts/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Chart Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK Chart component."
        }
      },
      {
        "text": "Binding to remote data",
        "url": "bubble-charts/remote-data-binding",
        "title": {
          "aspnet-core": "Binding to remote data example | UI for $FRAMEWORK Bubble Chart"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CrimeData.cs",
              "url": "~/Models/Chart/CrimeData.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo illustrates the  binding to remote data feature of $FRAMEWORK Bubble Chart."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Chart offers two ways of data-binding:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration.</p>"
        },
        "requiresServer": "true"
      },
      {
        "text": "Binding to local data",
        "url": "bubble-charts/local-data-binding",
        "title": {
          "aspnet-core": "Local data binding mode in $FRAMEWORK Bubble chart control"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "JobGrowth.cs",
              "url": "~/Models/JobGrowth.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo illustrates the powerful Binding to local data feature, supported in $FRAMEWORK Bubble Chart component."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Bubble chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series.</li> </ul>"
        }
      },
      {
        "text": "Binding to grouped data",
        "url": "bubble-charts/grouped-data",
        "title": {
          "aspnet-core": "Binding to grouped data example | $FRAMEWORK Bubble Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "BubbleChartsGroupedDataViewModel.cs",
              "url": "~/Models/Chart/BubbleChartsGroupedDataViewModel.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how to bind the $FRAMEWORK Bubble Chart component to grouped data. See how you can implement the feature in your rich web app."
        },
        "description": {
          "aspnet-core": "<p>Telerik Core charting extension can be integrated to a grouped data by <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/data/datasource\">ASP.NET Core DataSource</a>. To do, so you can follow the steps below:</p> <ol> <li>Bind the chart to a <a href=\"https://docs.telerik.com/KENDO-UI/api/javascript/dataviz/ui/chart#configuration-dataSource\">ASP.NET Core DataSource control</a>.</li> <li>Set the <a href=\"https://docs.telerik.com/KENDO-UI/api/javascript/dataviz/ui/chart#configuration-dataSource\">DataSource.group.field property</a> to the name of the column (e.g., the &ldquo;Country&rdquo; field) in the underlying data which will be the criteria for grouping the chart series items into series: Group(group =&gt; group.Add(model =&gt; model.Country)</li> <li>Bind the X, Y and Size values of the series to the &ldquo;Year, Standing and Number&rdquo; fields: </li> </ol> <p>series.Bubble(model =&gt; model.Year, model =&gt; model.Standing, model =&gt; model.Number)</p>"
        },
        "requiresServer": "true"
      }
    ],
    "category": "Charts"
  },
  {
    "text": "Bullet Charts",
    "name": "bullet-charts",
    "api": "dataviz/chart",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/charts"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/chart"
    },
    "spriteCssClass": "chartBulletIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "bullet-charts/index",
        "title": {
          "aspnet-core": "Basic usage of Telerik $FRAMEWORK Bullet Charts"
        },
        "meta": {
          "aspnet-core": "This sample demonstrates how to use the $FRAMEWORK helper for ASP.NET Core bullet graph, powered by HTML5 and jQuery."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"https://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"https://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>In this demo, you can see how to configure a Bullet chart, which is a variation of a <a href=\"https://demos.telerik.com/aspnet-core/bar-charts/index\">bar chart</a>. You can use it as a replacement for dashboard gauges and meters. The bullet graph compares a given quantitative measure (such as temperature) against qualitative ranges (e.g. warm, hot, mild, cool, chilly, cold, freezing, icy, frosty) and a symbol marker that encodes the comparative measure (for example the max temperature a year ago).<br /> <br /> The chart can fetch data for its series from either local or remote data source. <p><strong>Key Features of Telerik Core Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/charts\">Telerik Core Charts</a>.</p>"
        }
      },
      {
        "text": "Tag Helper",
        "url": "bullet-charts/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Chart Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK Chart component."
        }
      },
      {
        "text": "Binding to local data",
        "url": "bullet-charts/local-data-binding",
        "title": {
          "aspnet-core": "Local Data Binding in $FRAMEWORK Bullet Charts demo"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "BulletChartLocalDataViewModel.cs",
              "url": "~/Models/Chart/BulletChartLocalDataViewModel.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "In this example we will bind local data to the $FRAMEWORK Bullet Chart in order to show the behavior of the component."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Bullet chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways for databinding:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series.</li> </ul>"
        }
      },
      {
        "text": "Binding to remote data",
        "url": "bullet-charts/remote-data-binding",
        "title": {
          "aspnet-core": "Binding $FRAMEWORK Bullet Chart to remote data"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "AprilSales.cs",
              "url": "~/Models/Chart/AprilSales.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This online demo will show you how to bind $FRAMEWORK Bullet Chart to remote data."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Chart offers two ways of data-binding:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration.</p>"
        },
        "requiresServer": "true"
      }
    ],
    "category": "Charts"
  },
  {
    "text": "Chart API",
    "name": "chart-api",
    "api": "dataviz/chart",
    "spriteCssClass": "chartIcon",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/charts"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/chart"
    },
    "items": [
      {
        "text": "Methods",
        "url": "chart-api/index",
        "title": {
          "aspnet-core": "Charting API methods for $FRAMEWORK and jQuery "
        },
        "meta": {
          "aspnet-core": "Play with this demo and explore all API functions of Telerik Charting control for $FRAMEWORK."
        },
        "description": {
          "aspnet-core": "<p>This demo shows how to get reference to the Kendo Chart and its series client-side objects, which allows you to customize series options like type, appearance, stacking and many more:</p> <ul> <li>Get reference to the ASP.NET Core Chart client-side object: var chart = $(\"#chart\").data(\"kendoChart\");</li> <li>Get reference to the series client object: series = chart.options.series,</li> <li>Set the series type: series[i].type = type;</li> <li>Stack the series: series[i].stack = stack;</li> </ul> <p>You can find a complete list of the series attributes in <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart#configuration-series\">the control&rsquo;s API documentation</a>.</p>"
        }
      },
      {
        "text": "Events",
        "url": "chart-api/events",
        "title": {
          "aspnet-core": "Chart API events in $FRAMEWORK | UI for $FRAMEWORK demos"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ElectricityProduction.cs",
              "url": "~/Models/Chart/ElectricityProduction.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo illustrates the use of Telerik $FRAMEWORK API events."
        },
        "description": {
          "aspnet-core": "<p>The Chart exposes through its Events attribute many client-side events that allow easy and flexible use in a wide range of application scenarios:</p> <ul> <li>.SeriesClick()</li> <li>.SeriesHover()</li> <li>.DataBound()</li> <li>.AxisLabelClick()</li> <li>.PlotAreaClick()</li> <li>.Render()</li> <li>.LegendItemClick()</li> <li>.LegendItemHover()</li> <li>.DragStart()</li> <li>.Drag()</li> <li>.DragEnd()</li> <li>.ZoomStart()</li> <li>.Zoom()</li> <li>.ZoomEnd()</li> </ul>"
        },
        "requiresServer": "true"
      },
      {
        "text": "PDF Export",
        "url": "chart-api/pdf-export",
        "title": {
          "aspnet-core": "ASP.NET Core Chart saveAsPDF API method"
        },
        "meta": {
          "aspnet-core": "This example demonstrates how to save the chart contents to PDF directly in your browser"
        },
        "description": {
          "aspnet-core": "<p>This example shows how to configure the PDF export settings of the Telerik Core Charting helper. </p> <p>You can specify the Author, Creator, Date, FileName, AllPages, PaperSize, ProxyURL and other options, through the <strong>PDF</strong> property of the Chart helper.</p> <p>The <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart#methods-saveAsPDF\">saveAsPDF</a> or <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart#methods-exportPDF\">exportPDF</a> methods can be used to trigger export operation.</p>"
        }
      },
      {
        "text": "Advanced Export",
        "url": "chart-api/export",
        "title": {
          "aspnet-core": "ASP.NET Core Charts Export API methods"
        },
        "meta": {
          "aspnet-core": "This demo shows how to export charts to PDF, PNG Images or SVG and save them directly in the browser."
        },
        "description": {
          "aspnet-core": "<p>This example demonstrates how to export charts to PDF, PNG Images or SVG and save the produced files directly in the browser. You can do that by getting a reference to the chart&rsquo;s client-side object<br /> <br /> var chart = $(\"#chart\").getKendoChart();<br /> <br /> and firing the <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart#methods-exportPDF\">exportPDF</a>, <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart#methods-exportImage\">exportImage</a> and <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart#methods-exportSVG\">exportSVG</a> methods. Use the <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/kendo#methods-saveAs\">kendo.saveAs</a> method to save the result and specify the file name.</p>"
        }
      },
      {
        "text": "Selection",
        "url": "chart-api/selection",
        "title": {
          "aspnet-core": "$FRAMEWORK Chart API Selection Demo"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ElectricityProduction.cs",
              "url": "~/Models/Chart/ElectricityProduction.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "In this demo you will see how the API is used for a selection in Telerik $FRAMEWORK Chart."
        },
        "description": {
          "aspnet-core": "<p>This demo illustrates how to configure on the client the axis selection in the Telerik Core Chart through the exposed Events -&gt; SelectStart, Select and SelectEnd chart events as well as the zoom and reverse attributes of the categoryAxis -&gt; select -&gt; mousewheel settings.</p>"
        }
      },
      {
        "text": "RTL support",
        "url": "chart-api/rtl",
        "title": {
          "aspnet-core": "$FRAMEWORK Chart API RTL Demo"
        },
        "meta": {
          "aspnet-core": "This demo shows how the Telerik $FRAMEWORK Chart widget supports right-to-left direction."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK Chart supports right-to-left languages and rendering. All you have to do is wrap the editor in a container element with <strong>k-rtl </strong>class set for it, as demonstrated in this example.</p> <p>More information on the right-to-left support of the components can be found in <a href=\"https://docs.telerik.com/kendo-ui/accessibility/supporting-rtl-languages\" target=\"_blank\">this topic</a>.</p>"
        }
      }
    ],
    "category": "Charts"
  },
  {
    "text": "Donut Charts",
    "name": "donut-charts",
    "api": "dataviz/chart",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/charts"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/chart"
    },
    "spriteCssClass": "chartDonutIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "donut-charts/index",
        "title": {
          "aspnet-core": "$FRAMEWORK Donut charts sample | UI for $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "In this demo we show how Telerik jQuery-powered Donut charts can be implemented in $FRAMEWORK."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"https://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"https://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>In this demo, you can learn how to register and configure a Donut chart, which displays data as sectors from a circle. The Donut chart is a Pie chart variation with ability to display single series of data in a two-dimensional circle. It is useful for displaying data as parts of a whole.<br /> <br /> The chart can fetch data for its series from either local or remote data source. <p><strong>Key Features of Telerik Core Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/charts\">Telerik Core Charts</a>.</p>"
        }
      },
      {
        "text": "Tag Helper",
        "url": "donut-charts/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Chart Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK Chart component."
        }
      },
      {
        "text": "Donut labels",
        "url": "donut-charts/donut-labels",
        "title": {
          "aspnet-core": "Configuration of donut labels in $FRAMEWORK Donut charts"
        },
        "meta": {
          "aspnet-core": "This example shows how to configure the values of $FRAMEWORK Donut Charts, enable/disable donut labels and specify how they are aligned to the chart."
        },
        "description": {
          "aspnet-core": "<p>This example shows how to show/hide the labels of the $FRAMEWORK Donut Chart and specify how they are aligned.</p> <p>You can do that by getting a reference to the Chart client-object via:</p> <p>var chart = $(\"#chart\").data(\"kendoChart\")</p> <p>which will allow you to set and configure its series collection and attributes:<br /> <br /> var pieSeries = chart.options.series[0];<br /> pieSeries.labels.visible = true|false; // If set to true the chart will display the series labels.<br /> pieSeries.labels.align = \"circle\"; // \"circle\" - the labels are positioned in circle around the chart.\"column\" - the labels are positioned in columns to the left and right of the chart.</p> <p>You can find a complete list of the series attributes in <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart#configuration-series\">the control&rsquo;s API documentation</a>.</p>"
        }
      },
      {
        "text": "Binding to remote data",
        "url": "donut-charts/remote-data-binding",
        "title": {
          "aspnet-core": "Remote data binding in $FRAMEWORK Donut Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ScreenResolutionRemoteDataViewModel.cs",
              "url": "~/Models/ScreenResolutionRemoteDataViewModel.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "In this example you will see the remote data binding functionality of Telerik Grid for $FRAMEWORK."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Chart offers two ways of data-binding:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration.</p>"
        },
        "requiresServer": "true"
      },
      {
        "text": "Binding to local data",
        "url": "donut-charts/local-data-binding",
        "title": {
          "aspnet-core": "Binding ASP.NET Donut charts to local data"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ElectricitySource.cs",
              "url": "~/Models/Chart/ElectricitySource.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example demonstrates the binding to local data feature in Telerik $FRAMEWORK Donut charts."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Donut chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series.</li> </ul> <p>In this example you can see how to bind the chart using the server approach. You need to create an action method and pass the SpainElectricityBreakdown enumerator located in the \\Models\\Chart\\ChartDataRepository.cs file as a model. After that you should configure the data bound Percentage, Source and Explode fields for the Series. Note that the view has to be strongly typed so that the chart is able to load its data.</p>"
        }
      }
    ],
    "category": "Charts"
  },
  {
    "text": "Funnel Charts",
    "name": "funnel-charts",
    "api": "dataviz/chart",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/charts"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/chart"
    },
    "spriteCssClass": "chartFunnelIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "funnel-charts/index",
        "title": {
          "aspnet-core": "Example of $FRAMEWORK Funnel Charts"
        },
        "meta": {
          "aspnet-core": "This demo shows the core functionality of $FRAMEWORK Funnel Charts which visualize the breakdown of data into its elements."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"https://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"https://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>This example illustrates how to register and configure a Funnel Chart. A Funnel chart displays a single series of data in progressively decreasing or increasing proportions, organized in segments, where each segment represents the value for the particular item from the series. The items' values can also influence the height and the shape of the corresponding segments.</p> <p>Funnel charts are usually used to represent stages in a sales process (e.g., show the amount of potential revenue for each stage); identify a potential problematic areas in any company's process; visualize website visitors trends and other.<br /> <br /> The chart can fetch data for its series from either local or remote data source. <p><strong><br /> Key Features of Telerik Core Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/charts\">Telerik Core Charts</a>.</p>"
        }
      },
      {
        "text": "Tag Helper",
        "url": "funnel-charts/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Chart Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK Chart component."
        }
      },
      {
        "text": "Funnel labels",
        "url": "funnel-charts/funnel-labels",
        "title": {
          "aspnet-core": "Configuration of Funnel labels in $FRAMEWORK funnel charts"
        },
        "meta": {
          "aspnet-core": "This example shows how to configure the values of $FRAMEWORK Funnel Charts, enable/disable funnel labels and specify how they are aligned to the chart."
        },
        "description": {
          "aspnet-core": "<p>You can see in this demo how to configure the labels of the Core funnel chart. You can specify their properties for visibility, position and alignment, font color and size and so on through the SeriesDefaults -&gt; Funnel -&gt; Labels setting:</p> <ul> <li>Visibility: Labels -&gt; Visible</li> <li>Position and Alignment: Labels -&gt; Position and Labels -&gt; Alight </li> <li>Font color and size: Labels -&gt; Color and Labels -&gt; Font</li> </ul>"
        }
      },
      {
        "text": "Binding to remote data",
        "url": "funnel-charts/remote-data-binding",
        "title": {
          "aspnet-core": "Binding to remote data demo for $FRAMEWORK Funnel Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ElectricityProduction.cs",
              "url": "~/Models/Chart/ElectricityProduction.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example shows how to bind $FRAMEWORK Funnel Charts to remote data."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Chart offers two ways of data-binding:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration.</p>"
        },
        "requiresServer": "true"
      },
      {
        "text": "Binding to local data",
        "url": "funnel-charts/local-data-binding",
        "title": {
          "aspnet-core": "Local data binding in $FRAMEWORK Funnel Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "SiteOptimizationItem.cs",
              "url": "~/Models/Chart/SiteOptimizationItem.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo illustrates how $FRAMEWORK funnel Chart control can be bound to local data to deliver a high-performance business application."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Funnel chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways for databinding:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series.</li> </ul>"
        }
      }
    ],
    "category": "Charts"
  },
  {
    "text": "Linear Gauge",
    "name": "linear-gauge",
    "forum": {
      "aspnet-core": "aspnet-core-ui/gauge"
    },
    "spriteCssClass": "gaugeLinearIcon",
    "api": "dataviz/lineargauge",
    "items": [
      {
        "text": "Basic usage",
        "url": "linear-gauge/index",
        "title": {
          "aspnet-core": "$FRAMEWORK Linear Gauge Example"
        },
        "meta": {
          "aspnet-core": "This example shows how you can easily implement $FRAMEWORK Linear Gauge in your Core web application. Draw end users attention to a certain range of values."
        }
      },
      {
        "text": "Tag Helper",
        "url": "linear-gauge/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Linear Gauge Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK Linear Gauge component."
        }
      },
      {
        "text": "Scale options",
        "url": "linear-gauge/scale-options",
        "title": {
          "aspnet-core": "Scale customization example for $FRAMEWORK Linear Gauge"
        },
        "meta": {
          "aspnet-core": "This sample illustrates how you can customize $FRAMEWORK Linear Gauge by changing the location of the gauge scale and its appearance."
        }
      },
      {
        "text": "Multiple pointers",
        "url": "linear-gauge/multiple-pointers",
        "title": {
          "aspnet-core": "$FRAMEWORK Linear Gauge multiple pointers demo"
        },
        "meta": {
          "aspnet-core": "This example shows how easily you can configure the $FRAMEWORK Linear gauge to use multiple pointers."
        }
      },
      {
        "text": "Export to PDF, Image, SVG",
        "url": "linear-gauge/export",
        "title": {
          "aspnet-core": "$FRAMEWORK Linear Gauge export demo"
        },
        "meta": {
          "aspnet-core": "This example shows how easily you can export the $FRAMEWORK linear gauge to PDF, Image and SVG."
        }
      }
    ],
    "category": "Gauges"
  },
  {
    "text": "Radial Gauge",
    "name": "radial-gauge",
    "forum": {
      "aspnet-core": "aspnet-core-ui/gauge"
    },
    "spriteCssClass": "gaugeRadialIcon",
    "api": "dataviz/radialgauge",
    "items": [
      {
        "text": "Basic usage",
        "url": "radial-gauge/index",
        "title": {
          "aspnet-core": "Demo for core features in $FRAMEWORK Radial Gauge control"
        },
        "meta": {
          "aspnet-core": "This sample demonstrates the core functionality of $FRAMEWORK Radial Gauge which helps you easily visualize an indicator within a range of values."
        }
      },
      {
        "text": "Tag Helper",
        "url": "radial-gauge/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Radial Gauge Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK Radial Gauge component."
        }
      },
      {
        "text": "Scale options",
        "url": "radial-gauge/scale-options",
        "title": {
          "aspnet-core": "$FRAMEWORK Radial Gauge scale customization demo"
        },
        "meta": {
          "aspnet-core": "This example shows how you can easily use simple options to configure the $FRAMEWORK radial gauge, enable/disable scale ranges and gauge labels."
        }
      },
      {
        "text": "Multiple pointers",
        "url": "radial-gauge/multiple-pointers",
        "title": {
          "aspnet-core": "$FRAMEWORK Radial Gauge multiple pointers demo"
        },
        "meta": {
          "aspnet-core": "This example shows how easily you can configure the $FRAMEWORK radial gauge to use multiple pointers."
        }
      },
      {
        "text": "Export to PDF, Image, SVG",
        "url": "radial-gauge/export",
        "title": {
          "aspnet-core": "$FRAMEWORK Radial Gauge export demo"
        },
        "meta": {
          "aspnet-core": "This example shows how easily you can export the $FRAMEWORK radial gauge to PDF, Image and SVG."
        }
      }
    ],
    "category": "Gauges"
  },
  {
    "text": "Arc Gauge",
    "name": "arc-gauge",
    "forum": {
      "aspnet-core": "aspnet-core-ui/gauge"
    },
    "spriteCssClass": "gaugeArcIcon",
    "api": "dataviz/arcgauge",
    "items": [
      {
        "text": "Basic usage",
        "url": "arc-gauge/index",
        "title": {
          "aspnet-core": "Demo for core features in $FRAMEWORK Arc Gauge control"
        },
        "meta": {
          "aspnet-core": "This sample demonstrates the core functionality of $FRAMEWORK Arc Gauge which helps you easily visualize an indicator within a range of values."
        },
        "description": {
          "aspnet-core": "<p> The Kendo UI Arc Gauge widget displays a value range which is represented by an arc. All graphics render on the client by using the <a href=\"https://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">Scalable Vector Graphics (SVG)</a> format.</p>"
        }
      },
      {
        "text": "Tag Helper",
        "url": "arc-gauge/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Arc Gauge Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK Arc Gauge component.</p>"
        }
      },
      {
        "text": "Colors",
        "url": "arc-gauge/colors",
        "title": {
          "aspnet-core": "$FRAMEWORK Arc Gauge colors demo"
        },
        "meta": {
          "aspnet-core": "This example shows how you can configure the $FRAMEWORK Arc Gauge to use different colors for values in specific ranges."
        },
        "description": {
          "aspnet-core": "<p> The Arc Gauge enables you to set different colors depending on the current value. To configure the range colors, set the `Colors` option.</p>"
        }
      },
      {
        "text": "Export to PDF, Image, SVG",
        "url": "arc-gauge/export",
        "title": {
          "aspnet-core": "$FRAMEWORK Arc Gauge export demo"
        },
        "meta": {
          "aspnet-core": "This example shows how easily you can export the $FRAMEWORK Arc Gauge to PDF, Image and SVG."
        },
        "description": {
          "aspnet-core": "<p> This example shows how to export the arc gauge to PDF, Image and SVG. To export the Arc Gauge use the <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/arcgauge/methods/exportpdf\">exportPDF</a>, <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/arcgauge/methods/exportsvg\">exportSVG</a> and <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/arcgauge/methods/exportimage\">exportImage</a> methods.</p>"
        }
      }
    ],
    "category": "Gauges"
  },
  {
    "text": "Line Charts",
    "name": "line-charts",
    "api": "dataviz/chart",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/charts"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/chart"
    },
    "spriteCssClass": "chartLineIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "line-charts/index",
        "title": {
          "aspnet-core": " $FRAMEWORK Line Charts Control demo"
        },
        "meta": {
          "aspnet-core": "This demo illustrates how you can use Telerik $FRAMEWORK Line Charts helper to show trends for several series on the same diagram & visualize them as lines."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"https://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"https://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>In this example, you can see how to register and configure a Line chart. A Line chart shows data as continuous lines that pass through points defined by their items' values. It can be useful for showing a trend over time and comparing several (four in this demo) sets of similar data.</p> <p>The chart can fetch data for its series from either local or remote data source. <p><strong><br /> Key Features of Telerik Core Charts</strong></p> <ul><li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/charts\">Telerik Core Charts</a>.</p>"
        }
      },
      {
        "text": "Tag Helper",
        "url": "line-charts/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Chart Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK Chart component."
        }
      },
      {
        "text": "Stacked line",
        "url": "line-charts/stacked-line",
        "title": {
          "aspnet-core": "$FRAMEWORK Stacked Line Charts Demo"
        },
        "meta": {
          "aspnet-core": "This demo shows how you can easily implement $FRAMEWORK Stacked Line Charts in your business webapp."
        },
        "group": "Line Chart Types",
        "description": {
          "aspnet-core": "<p>This demo shows how to configure a Stacked line chart. To enable the stack feature set true as an argument of the the SeriesDefaults -&gt; Bar -&gt; Stack(true) method:</p> <p>.SeriesDefaults(series =&gt; series.Line().Stack(true))</p> <p>You can also divide the line chart on two parts, by setting:</p> <p>.MissingValues(ChartLineMissingValues.Gap)</p> <p>And having <strong>null</strong> data value entries in the series data, which will be used as a divider.</p>"
        }
      },
      {
        "text": "100% Stacked line",
        "url": "line-charts/stacked100-line",
        "title": {
          "aspnet-core": "100% stacked line example in Telerik $FRAMEWORK Line charts"
        },
        "meta": {
          "aspnet-core": "This example illustrates how to implement 100% stacked line in Telerik line charts for $FRAMEWORK."
        },
        "description": {
          "aspnet-core": "<p>The Line chart supports 100% stacking, where the last series is always rendered as a flat line on top of the value axis.</p> <p>You can enable the 100% stack feature through the SeriesDefaults -&gt; Line -&gt; Stack(ChartStackType.Stack100) method.</p>"
        }
      },
      {
        "text": "Stepped line",
        "url": "line-charts/step-line",
        "title": {
          "aspnet-core": "Steped line demo for Telerik $FRAMEWORK Line Charts"
        },
        "meta": {
          "aspnet-core": "This demo shows how to configure step line style for Telerik jQuery-based Line Charts in $FRAMEWORK."
        },
        "description": {
          "aspnet-core": "<p>The Stepped Line chart is a form of Line chart where each data point from the series is connected with vertical and horizontal lines to form a step-like progression. This type of line visualization is useful when you want to highlight the increase or decrease in values over time.</p> <p>You can configure a stepped area chart through the Series -&gt; Line -&gt; Style(ChartAreaStyle.<strong>Step</strong>) settings of the Core Chart.</p>"
        }
      },
      {
        "text": "Smooth line",
        "url": "line-charts/smooth-line",
        "title": {
          "aspnet-core": "$FRAMEWORK Smooth Line Charts for ASP.NET Core Line chart widget"
        },
        "meta": {
          "aspnet-core": "In this demo you will figure out how to configure smooth line (spline) style chart in $FRAMEWORK."
        },
        "description": {
          "aspnet-core": "<p>This demo shows how to configure smooth line (spline) style for the Telerik Core Line chart.</p> <p>A Spline chart is a form of line/area chart where each data point from the series is connected with a curved line, which represents a rough approximation of the missing data points.</p> <p>You can configure a smooth line area chart through the Series -&gt; Line -&gt; Style(ChartLineStyle.Smooth) settings of the $FRAMEWORK Chart.</p>"
        }
      },
      {
        "text": "Date axis",
        "url": "line-charts/date-axis",
        "title": {
          "aspnet-core": "Date axis in $FRAMEWORK Line Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "DatePoint.cs",
              "url": "~/Models/Chart/DatePoint.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example shows how date axis functionality works in Telerik Line Charts for $FRAMEWORK."
        },
        "group": "Functionality",
        "description": {
          "aspnet-core": "<p>You can scale the date axis of your $FRAMEWORK Line Chart to get a better visualization of the seasonal data in your app. This can be done by modifying:</p> <ul> <li>The base date unit of the x-axis through the CategoryAxis.BaseUnit property, which takes seconds, minutes, hours, days, week, months and years</li> <li>The default aggregates of the series through the Series.Aggregate property, which takes max, min, sum, avg and count.</li> </ul>"
        }
      },
      {
        "text": "Logarithmic axis",
        "url": "line-charts/logarithmic-axis",
        "title": {
          "aspnet-core": "Logarithmic axis sample for $FRAMEWORK Line Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ElectricityProduction.cs",
              "url": "~/Models/Chart/ElectricityProduction.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how you can use a logarithmic axis for the $FRAMEWORK Line Chart."
        },
        "description": {
          "aspnet-core": "<p>A logarithmic axis is a special numeric axis that transforms the actual values by using a logarithmic function with a particular base. A logarithmic axis is useful for displaying values that cover different orders of magnitude because it lets large values display together with small values in a more condensed scale than the default linear axis.</p> <p>This demo shows how you can use a logarithmic axis for the $FRAMEWORK Line Chart by setting the ValueAxis -&gt; Logarithmic() method. The base of the logarithmic axis is defined by the interval between the major divisions, controlled by the MajorUnit property.</p>"
        },
        "requiresServer": "true"
      },
      {
        "text": "Multi-axis",
        "url": "line-charts/multiple-axes",
        "title": {
          "aspnet-core": "Multi-axes feature example | $FRAMEWORK Line Charts control"
        },
        "meta": {
          "aspnet-core": "This demo shows how easily $FRAMEWORK Line Charts can be customized to achieve what you want in your app. Apply multiple axes to your $FRAMEWORK Line Charts."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK Line chart supports multiple axis. This helps you leverage the best charting performance and visualize data on any number axis to provide solid business reports for your users.</p> <p>The example shows a weather report and includes information for the: <em>max and min temperatures, wind speed and rainfall in mm</em>. Note that each of them has unique name which is set through the <strong>ValueAxis.Title </strong>method. You can also set the <strong>CategoryAxis.AxisCrossingValue</strong> method to specify the alignment of the value axes.</p>"
        }
      },
      {
        "text": "Notes",
        "url": "line-charts/notes",
        "title": {
          "aspnet-core": "Notes feature example | $FRAMEWORK Line Charts Control"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "GrandSlam.cs",
              "url": "~/Models/Chart/GrandSlam.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo illustrates how you can use Telerik $FRAMEWORK Line Charts helper to show trends for several series on the same diagram & visualize them as lines."
        },
        "description": {
          "aspnet-core": "<p>In this demo, you can see how to add notes for the Min and Max values of the Line chart.</p> <p>To do that you need to set the Series -&gt; Line -&gt; Notes and NoteTextField setting which will also allow you to specify the note and its label positions.</p>"
        }
      },
      {
        "text": "Error Bars",
        "url": "line-charts/error-bars",
        "title": {
          "aspnet-core": "Example of using ErrorBars for $FRAMEWORK Line Chart"
        },
        "meta": {
          "aspnet-core": "This demo shows how to use ErrorBars for $FRAMEWORK Line Chart"
        },
        "description": {
          "aspnet-core": "<p>This demo illustrates how to show variability of data using the Error Bars feature of the Telerik Core Line Chart. The Error bars are specified as part of the Series setting and are offered by the following Series types: Area, Vertical Area, Column, Bar, Line, Vertical Line, Scatter and ScatterLine.</p> <p>The error bars support statistical calculations based on the series data. The supported types are <a href=\"https://docs.telerik.com/kendo-ui/dataviz/chart/error-bars#setting-a-percentage-value\">percentage value</a>, <a href=\"https://en.wikipedia.org/wiki/Standard_error\">standard error</a> and <a href=\"https://en.wikipedia.org/wiki/Standard_deviation\">population standard deviation</a> and other. To specify that percentage error should be used, you need to set \"percentage(Int)\" as a value, i.e.</p><p>.ErrorBars(errorBars =&gt; errorBars.Value(\"percentage(20\"))</p><p>You can find more information in the following help article: <a href=\"https://docs.telerik.com/kendo-ui/dataviz/chart/error-bars\">Error Bars</a>.</p>"
        }
      },
      {
        "text": "Custom Visuals",
        "url": "line-charts/visuals",
        "title": {
          "aspnet-core": "Example of using custom visuals for $FRAMEWORK Line Chart"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "Forecast.cs",
              "url": "~/Models/Forecast.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how to use ustom visuals for the $FRAMEWORK Line Chart"
        },
        "description": {
          "aspnet-core": "<p>You can implement custom visualizations for the Line chart markers and highlights by utilizing the <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/drawing\">Kendo Drawing API</a>. You can do that by setting a JavaScript function name as a string parameter of the Series:</p> <ul> <li>Markers -&gt; Visual method: .Markers(markers =&gt; markers.Visual(\"markerVisual\"))</li> <li>Highlight -&gt; Toggle method -&gt; .Highlight(highlight =&gt; highlight.Toggle(\"toggleHandler\")); </li> </ul> <p>Various context information is available through the function argument fields. Such are <strong>rect</strong> (the <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/geometry/rect\">kendo.geometry.Rect</a> that defines where the visual should be rendered), createVisual (a function that can be used to get the default visual) and options (different options depending on the item type).</p> <p>You can read more about it in the <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/drawing\">ASP.NET Core JavaScript API reference</a>.</p>"
        }
      },
      {
        "text": "Binding to remote data",
        "url": "line-charts/remote-data-binding",
        "title": {
          "aspnet-core": "Binding to remote data - Telerik $FRAMEWORK Line Charts demo"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ElectricityProduction.cs",
              "url": "~/Models/Chart/ElectricityProduction.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example demonstrates how Telerik $FRAMEWORK Line charts can be bound to remote data source."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Chart offers two ways of data-binding:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration.</p>"
        },
        "group": "Data Binding",
        "requiresServer": "true"
      },
      {
        "text": "Binding to local data",
        "url": "line-charts/local-data-binding",
        "title": {
          "aspnet-core": "Binding to local data example | $FRAMEWORK Line Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "InternetUsers.cs",
              "url": "~/Models/Chart/InternetUsers.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example illustrates how $FRAMEWORK Line Charts use existing objects as data points."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Line chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series</li> </ul> <p>In this example you can see how to bind the chart using the server approach. You need to create an action method and pass the InternetUsers list located in the \\Models\\Chart\\ChartDataRepository.cs file as a model. After that you should configure the data bound fields for the Series (series =>{series.Area(model => model.Value)}) and Category Axis (axis => axis.Categories(model => model.Year)) Note that the view has to be strongly typed so that the chart is able to load its data.</p>"
        }
      },
      {
        "text": "Binding to grouped data",
        "url": "line-charts/grouped-data",
        "title": {
          "aspnet-core": "Binding to grouped data demo | $FRAMEWORK Line Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "StockDataPoint.cs",
              "url": "~/Models/Chart/StockDataPoint.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example illustrates how binding to grouped data feature works in $FRAMEWORK Line Charts."
        },
        "description": {
          "aspnet-core": "<p>Telerik Core charting extension can be integrated to a grouped data by <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/data/datasource\">ASP.NET Core DataSource</a>. To do, so you can follow the steps below:</p> <ol> <li>Bind the chart to a <a href=\"https://docs.telerik.com/kendo-ui/framework/datasource/overview\">ASP.NET Core DataSource control</a>.</li> <li>Set the <a href=\"https://docs.telerik.com/kendo-ui/framework/datasource/basic-usage#working-with-grouped-data\">DataSource.group.field property</a> to the name (e.g., the &ldquo;Symbol&rdquo; field) of the column in the underlying data which will be the criteria for grouping the chart series items into series Group(group =&gt; group.Add(model =&gt; model.Symbol)</li> <li>Bind the Y values of the series to the corresponding data source field (e.g., the \"Close\" field): series.Area(model =&gt; model.Close)</li> <li>Bind the Category Axis to the corresponding field (e.g., the \"Date\" field): .Categories(model =&gt; model.Date)</li> </ol> <p> This will result in as many series as the number of distinct values in the DataSource.group.field column (e.g., \"Symbol\"). &nbsp;Since the &ldquo;Symbol&rdquo; field in this example contains three distinct values (\"1. GOOG (close)\", \"2. AAPL (close)\" and \"3. AMZN (close)\") the chart will create three series as well.</p>"
        },
        "requiresServer": "true"
      }
    ],
    "category": "Charts"
  },
  {
    "text": "Map",
    "name": "map",
    "api": "dataviz/map",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/map"
    },
    "spriteCssClass": "mapIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "map/index",
        "title": {
          "aspnet-core": "Example of $FRAMEWORK Map with a simple tile layer"
        },
        "meta": {
          "aspnet-core": "With this demo built with $FRAMEWORK, you will be able to find out how $FRAMEWORK Map control can be implemented for tile maps."
        }
      },
      {
        "text": "Tag Helper",
        "url": "map/tag-helper",
        "new": "true",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Map Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK Map component."
        }
      },
      {
        "text": "Bing tile layer",
        "url": "map/bing",
        "title": {
          "aspnet-core": "Bing tile layer in $FRAMEWORK Map"
        },
        "meta": {
          "aspnet-core": "This demo demostrates how you can use Bing tile layer in your $FRAMEWORK Map."
        }
      },
      {
        "text": "Bubble layer",
        "url": "map/bubble-layer",
        "title": {
          "aspnet-core": "Displaying Bubble ASP.NET Core map layer"
        },
        "meta": {
          "aspnet-core": "This demo illustrates how to bind a ASP.NET Core bubble map layer to remote data."
        },
        "requiresServer": "true"
      },
      {
        "text": "Binding to GeoJSON",
        "url": "map/geojson",
        "title": {
          "aspnet-core": "Displaying GeoJSON shapes in $FRAMEWORK map"
        },
        "meta": {
          "aspnet-core": "This demo illustrates how to bind an $FRAMEWORK map layer to GeoJSON shapes."
        },
        "requiresServer": "true"
      },
      {
        "text": "Binding markers to remote data",
        "url": "map/remote-markers",
        "title": {
          "aspnet-core": "Load map markers in a $FRAMEWORK map layer"
        },
        "meta": {
          "aspnet-core": "This demo illustrates how to bind a $FRAMEWORK marker layer."
        },
        "requiresServer": "true"
      },
      {
        "text": "Export",
        "url": "map/export",
        "title": {
          "aspnet-core": "ASP.NET Core Map Export API methods"
        },
        "meta": {
          "aspnet-core": "This demo shows how to export maps to PDF, PNG Images or SVG and save them directly in the browser."
        }
      },
      {
        "text": "Events",
        "url": "map/events",
        "title": {
          "aspnet-core": "Events API for $FRAMEWORK Map component"
        },
        "meta": {
          "aspnet-core": "This sample demonstrates the events which are specific to $FRAMEWORK Map component."
        },
        "requiresServer": "true"
      },
      {
        "text": "API",
        "url": "map/api",
        "title": {
          "aspnet-core": "API for $FRAMEWORK Map component"
        },
        "meta": {
          "aspnet-core": "This sample demonstrates the public methods which are specific to $FRAMEWORK Map component."
        },
        "requiresServer": "true"
      }
    ],
    "category": "Diagrams & Maps"
  },
  {
    "text": "Pie Charts",
    "name": "pie-charts",
    "api": "dataviz/chart",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/charts"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/chart"
    },
    "spriteCssClass": "chartPieIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "pie-charts/index",
        "title": {
          "aspnet-core": "$FRAMEWORK Pie Charts example "
        },
        "meta": {
          "aspnet-core": "This example illustrates core functionality of Telerik pie charts extension for $FRAMEWORK."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"https://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"https://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>In this example, you can see how to register and configure a Pie chart. This chart type displays the data as sectors from a circle and is useful for displaying data as parts of a whole. The Pie chart displays a single series of data in a two-dimensional circle. <br /> <br /> The chart can fetch data for its series from either local or remote data source. <p><strong><br />Key Features of Telerik Core Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/charts\">Telerik Core Charts</a>.</p>"
        }
      },
      {
        "text": "Tag Helper",
        "url": "pie-charts/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Chart Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK Chart component."
        }
      },
      {
        "text": "Pie labels",
        "url": "pie-charts/pie-labels",
        "title": {
          "aspnet-core": "Pie labels demo | $FRAMEWORK Pie Charts"
        },
        "meta": {
          "aspnet-core": "This demo shows how the animated pie labels work in $FRAMEWORK Pie Charts and lets you play with the configuration of the labels."
        },
        "description": {
          "aspnet-core": "<p>This example shows how to show/hide the labels of the $FRAMEWORK Pie Chart and specify how they are aligned.</p> <p>You can do that by getting a reference to the Chart client-object via:</p> <p>var chart = $(\"#chart\").data(\"kendoChart\")</p> <p>which will allow you to set and configure its series collection and attributes:<br /> <br /> var pieSeries = chart.options.series[0];<br /> pieSeries.labels.visible = true|false; // If set to true the chart will display the series labels.<br /> pieSeries.labels.align = \"circle\"; // \"circle\" - the labels are positioned in circle around the chart.\"column\" - the labels are positioned in columns to the left and right of the chart.</p> <p>You can find a complete list of the series attributes in <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart#configuration-series\">the control&rsquo;s API documentation</a>.</p>"
        }
      },
      {
        "text": "Binding to remote data",
        "url": "pie-charts/remote-data-binding",
        "title": {
          "aspnet-core": "Binding to remote data example | $FRAMEWORK Pie Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ScreenResolutionRemoteDataViewModel.cs",
              "url": "~/Models/ScreenResolutionRemoteDataViewModel.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo illustrates how $FRAMEWORK Pie Charts can be bound to remote data by configuring ASP.NET Core DataSource component."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Chart offers two ways of data-binding:</p> <ul> <li>Server - the chart will bind to a supplied model</li><li>Ajax - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration.</p>"
        },
        "requiresServer": "true"
      },
      {
        "text": "Binding to local data",
        "url": "pie-charts/local-data-binding",
        "title": {
          "aspnet-core": "$FRAMEWORK Pie Charts binding to local data demo"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ElectricitySource.cs",
              "url": "~/Models/Chart/ElectricitySource.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how $FRAMEWORK Pie Charts use existing objects as data points. The example illustrates binding to local data feature of the control."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Pie chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series.</li> </ul> <p>In this example you can see how to bind the chart using the server approach. You need to create an action method and pass the SpainElectricityBreakdown enumerator located in the \\Models\\Chart\\ChartDataRepository.cs file as a model. After that you should configure the data bound Percentage, Source and Explode fields for the Series. Note that the view has to be strongly typed so that the chart is able to load its data.</p>"
        }
      }
    ],
    "category": "Charts"
  },
  {
    "text": "Polar Charts",
    "name": "polar-charts",
    "api": "dataviz/chart",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/charts"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/chart"
    },
    "spriteCssClass": "chartPolarIcon",
    "items": [
      {
        "text": "Polar line",
        "url": "polar-charts/index",
        "title": {
          "aspnet-core": "$FRAMEWORK Polar Charts Demo"
        },
        "meta": {
          "aspnet-core": "This demo illustrates how $FRAMEWORK Polar Charts control can be added to your web page in order to visualize quantitive data. Learn how to define your polar chart."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"https://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"https://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>The Polar chart, demonstrated in this demo, shows data in a circular plot area in polar coordinates where each data point is represented by a distance/radius and an angle, beginning of the coordinate system. Polar charts are useful for visualizing scientific data like precipitation/heat distribution in the Earth's poles and other multivariate data.<br /> <br /> The chart can fetch data for its series from either local or remote data source. <p><strong><br /> Key Features of Telerik Core Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/charts\">Telerik Core Charts</a>.</p>"
        }
      },
      {
        "text": "Tag Helper",
        "url": "polar-charts/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Chart Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK Chart component."
        }
      },
      {
        "text": "Smooth polar line",
        "url": "polar-charts/smooth-polar-line",
        "title": {
          "aspnet-core": "Smooth line (spline) style for $FRAMEWORK Polar Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "SunPositionItem.cs",
              "url": "~/Models/Chart/SunPositionItem.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how to configure the $FRAMEWORK Polar Charts to use smooth line (spline) style"
        },
        "description": {
          "aspnet-core": "<p>This demo shows how to configure <em>smooth (spline)</em> polar line style for the Telerik Core Polar chart.</p> <p>A Spline chart is a form of line/area chart where each data point from the series is connected with a curved line, which represents a rough approximation of the missing data points.</p> <p>You can configure a smooth polar area chart through the Series -&gt; PolarLine -&gt; Style(ChartPolarLineStyle.Smooth) setting.</p>"
        }
      },
      {
        "text": "Polar scatter",
        "url": "polar-charts/polar-scatter",
        "title": {
          "aspnet-core": "$FRAMEWORK Polar Charts | Example of polar scatter chart"
        },
        "meta": {
          "aspnet-core": "This demo shows how to configure $FRAMEWORK Polar Scatter Chart."
        },
        "description": {
          "aspnet-core": "<p>This example demonstrates how to create a polar scatter chart, which series type is represented on the chart as non-connected data points.</p> <p>You can define the polar scatter series through the Series -&gt; PolarScatter setting.</p>"
        }
      },
      {
        "text": "Polar area",
        "url": "polar-charts/polar-area",
        "title": {
          "aspnet-core": "$FRAMEWORK Polar Charts | Example of polar area chart"
        },
        "meta": {
          "aspnet-core": "This demo illustrates how to configure $FRAMEWORK Polar Area Chart."
        },
        "description": {
          "aspnet-core": "<p>This demo shows how to create a polar area chart, which series type is represented by data points connected with straight line segments that enclose a filled area together with the chart pole.</p> <p>You can configure such chart from the Series -&gt; PolarArea configuration setting</p>"
        }
      },
      {
        "text": "Binding to remote data",
        "url": "polar-charts/remote-data-binding",
        "title": {
          "aspnet-core": "Example of $FRAMEWORK Polar Chart bound to remote data"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "AntennaGainItem.cs",
              "url": "~/Models/Chart/AntennaGainItem.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "See how $FRAMEWORK Polar Chart can be bound to remote data by configuring the DataSource transport which defines how the DataSource interacts with remote data."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Chart offers two ways of data-binding:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration.</p>"
        },
        "requiresServer": "true"
      },
      {
        "text": "Binding to local data",
        "url": "polar-charts/local-data-binding",
        "title": {
          "aspnet-core": "$FRAMEWORK Polar Charts binding to local data example"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "SunPositionItem.cs",
              "url": "~/Models/Chart/SunPositionItem.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This sample demonstrates how $FRAMEWORK Polar Chart can use existing objects as data points."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Polar chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series.</li> </ul> <p>In this example you can see how to bind the chart using the server approach. You need to create an action method and pass the SunPosition list located in the \\Models\\Chart\\ChartDataRepository.Polar.cs file as a model. After that you should configure the data bound Azimuth and Altitude fields for the Series. Note that the view has to be strongly typed so that the chart is able to load its data.</p>"
        }
      }
    ],
    "category": "Charts"
  },
  {
    "text": "QR Code",
    "name": "qrcode",
    "forum": {
      "aspnet-core": "aspnet-core-ui/qrcode"
    },
    "spriteCssClass": "qrcodeIcon",
    "api": "dataviz/qrcode",
    "items": [
      {
        "text": "Basic usage",
        "url": "qrcode/index",
        "title": {
          "aspnet-core": "$FRAMEWORK QRCode Demo"
        },
        "meta": {
          "aspnet-core": "This sample demonstrates the core functionality of $FRAMEWORK QRCode which helps you easily encode large amounts of data in a machine readable format."
        }
      },
      {
        "text": "Tag Helper",
        "url": "qrcode/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK QRCode Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK QRCode component."
        },
        "new": "true"
      },
      {
        "text": "API",
        "url": "qrcode/api",
        "title": {
          "aspnet-core": "$FRAMEWORK QRCode API demo"
        },
        "meta": {
          "aspnet-core": "This demo shows how $FRAMEWORK QRCode control API works and what kind of functions it supports."
        }
      }
    ],
    "category": "Barcodes"
  },
  {
    "text": "Radar Charts",
    "name": "radar-charts",
    "api": "dataviz/chart",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/charts"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/chart"
    },
    "spriteCssClass": "chartRadarIcon",
    "items": [
      {
        "text": "Radar line",
        "url": "radar-charts/index",
        "title": {
          "aspnet-core": "$FRAMEWORK Radar Charts Demo"
        },
        "meta": {
          "aspnet-core": "This demo illustrates how $FRAMEWORK Radar Charts control can be added to your web page in order to visualize quantitive data. Learn how to define your radar chart."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"https://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"https://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>This demo demonstrates the Radar Line type which series are represented on the chart as data points connected with straight line.<br /> <br /> The chart can fetch data for its series from either local or remote data source.</p> <p><strong><br /> Key Features of Telerik Core Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/charts\">Telerik Core Charts</a>.</p>"
        }
      },
      {
        "text": "Tag Helper",
        "url": "radar-charts/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Chart Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK Chart component."
        }
      },
      {
        "text": "Smooth radar line",
        "url": "radar-charts/smooth-radar-line",
        "title": {
          "aspnet-core": "Smooth line (spline) style for the $FRAMEWORK Radar Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "BudgetReportItem.cs",
              "url": "~/Models/Chart/BudgetReportItem.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how to configure the $FRAMEWORK Radar Charts to use smooth line style (spline)."
        },
        "description": {
          "aspnet-core": "<p>This demo shows how to configure <em>smooth (spline)</em> radar line style for the Telerik Core Radar Chart.</p> <p>A Spline chart is a form of line/area chart where each data point from the series is connected with a curved line, which represents a rough approximation of the missing data points.</p> <p>You can configure a smooth polar area chart through the Series or SeriesDefaults -&gt; RadarLine -&gt; Style(ChartPolarLineStyle.Smooth) setting.</p>"
        },
        "requiresServer": "true"
      },
      {
        "text": "Radar area",
        "url": "radar-charts/radar-area",
        "title": {
          "aspnet-core": "$FRAMEWORK Radar Charts | Example of radar area chart"
        },
        "meta": {
          "aspnet-core": "This demo shows how to configure $FRAMEWORK Radar Area Chart"
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"https://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"https://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p><p>This demo shows how to create a radar area chart, which series type is represented by data points connected with straight line segments that enclose a filled area. You can configure this chart from the Series -&gt; RadarArea configuration setting.</p><p>The chart can fetch data for its series from either local or remote data source.</p> <p><strong><br /> Key Features of Telerik Core Charts</strong></p> <ul>"
        }
      },
      {
        "text": "Radar column",
        "url": "radar-charts/radar-column",
        "title": {
          "aspnet-core": "$FRAMEWORK Radar Charts | Example of radar column chart"
        },
        "meta": {
          "aspnet-core": "This demo illustrates how to display a $FRAMEWORK Radar Column Chart"
        },
        "description": {
          "aspnet-core": "<p>This example displays how to create a radar column chart, which series type is represented as data columns whose height varies according to their value.</p> <p>You can configure this chart from the Series -&gt; RadarColumn configuration setting.</p>"
        }
      },
      {
        "text": "Binding to remote data",
        "url": "radar-charts/remote-data-binding",
        "title": {
          "aspnet-core": "Example of $FRAMEWORK Radar Charts bound to remote data"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "BudgetReportItem.cs",
              "url": "~/Models/Chart/BudgetReportItem.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "See how $FRAMEWORK Radar Chart can be bound to remote data by configuring the DataSource transport which defines how the DataSource interacts with remote data."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Chart offers two ways of data-binding:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration.</p>"
        },
        "requiresServer": "true"
      },
      {
        "text": "Binding to local data",
        "url": "radar-charts/local-data-binding",
        "title": {
          "aspnet-core": "$FRAMEWORK Radar Charts binding to local data example"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ProteinScoreItem.cs",
              "url": "~/Models/Chart/ProteinScoreItem.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This sample demonstrates how $FRAMEWORK Radar chart can use existing objects as data points."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Radar chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series.</li> </ul> <p>In this example you can see how to bind the chart using the server approach. You need to create an action method and pass the ProteinQualityData list located in the \\Models\\Chart\\ChartDataRepository.Radar.cs file as a model. After that you should configure the data bound Score and Abbr fields for the Series and Categories. Note that the view has to be strongly typed so that the chart is able to load its data.</p>"
        }
      },
      {
        "text": "Binding to grouped data",
        "url": "radar-charts/grouped-data",
        "title": {
          "aspnet-core": "$FRAMEWORK Radar Charts | Example of binding to grouped data"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "WindDataItem.cs",
              "url": "~/Models/Chart/WindDataItem.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "With this example you will learn how to bind grouping data to $FRAMEWORK Radar Charts."
        },
        "description": {
          "aspnet-core": "<p>Telerik Core charting extension can be integrated to a grouped data by <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/data/datasource\">ASP.NET Core DataSource</a>. To do, so you can follow the steps below:</p> <ol> <li>Bind the chart to a <a href=\"https://docs.telerik.com/kendo-ui/framework/datasource/overview\">ASP.NET Core DataSource control</a>.</li> <li>Set the <a href=\"https://docs.telerik.com/kendo-ui/framework/datasource/basic-usage#working-with-grouped-data\">DataSource.group.field property</a> to the name (e.g., the \"Category\" field) of the column in the underlying data which will be the criteria for grouping the chart series items into series Group(group =&gt; group.Add(model =&gt; model.Category))</li> <li>Bind the RadarColumn values of the series to the corresponding data source field (e.g., the \"Frequency\" and \"DirText\" fields): series.RadarColumn(model =&gt; model.Frequency, categoryExpression: model =&gt; model.DirText)</li> <li>Hide the Value Axis: ValueAxis -&gt; Visible(false) </li> </ol> <p>This will result in as many series as the number of distinct values in the DataSource.group.field column (e.g. \"Category\"). </p>"
        },
        "requiresServer": "true"
      }
    ],
    "category": "Charts"
  },
  {
    "text": "Range Bar Charts",
    "api": "dataviz/chart",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/charts"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/chart"
    },
    "items": [
      {
        "text": "Basic usage",
        "url": "range-bar-charts/index",
        "title": {
          "aspnet-core": "Demo for ASP.NET Core Range Bar Chart"
        },
        "meta": {
          "aspnet-core": "This example illustrates the basic usage of ASP.NET Core Range Bar Chart which enables the user to show customized range bar charts."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"https://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"https://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>This demo shows how to create a Range Bar chart, which displays data as bars where each bar represents a value range that spans between its minimum (i.e., From property) and maximum (i.e., To property) levels. A Range Bar type has floating bars unlike the standard Ba chart that has anchored bars to its x-axis.</p> <p>This chart type is useful for comparing the low and high levels of value ranges (e.g., employees' working time, blood glucose levels per day, average minimum and maximum temperatures and rainfalls over time, etc.).</p> <p>The chart can fetch data for its series from either local or remote data source. <p><strong><br /> Key Features of Telerik Core Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/charts\">Telerik Core Charts</a>.</p>"
        }
      },
      {
        "text": "Tag Helper",
        "url": "range-bar-charts/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Chart Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK Chart component."
        }
      },
      {
        "text": "Binding to local data",
        "url": "range-bar-charts/local-data-binding",
        "title": {
          "aspnet-core": "Local data-binding example | ASP.NET Core Range Bar Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "RangeBarChartsLocalDataViewModel.cs",
              "url": "~/Models/Chart/RangeBarChartsLocalDataViewModel.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how the local data-binding is supported in ASP.NET Core Range Bar Charts. Use the demo source code to try the feature of the widget."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Range Bar chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series.</li> </ul> <p>You can learn from this demo how to bind the chart using the server approach. You need to create an action method and pass the RangeBarChartsLocalDataViewModel list model. After that you should configure the data bound FromA, ToA, FromB and ToB fields for the Series. Note that the view has to be strongly typed so that the chart is able to load its data.</p>"
        }
      },
      {
        "text": "Binding to remote data",
        "url": "range-bar-charts/remote-data-binding",
        "title": {
          "aspnet-core": "Binding to remote data demo | ASP.NET Core HTML5 jQuery Range Bar Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "DownloadSpeed.cs",
              "url": "~/Models/Chart/DownloadSpeed.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how ASP.NET Core Range Bar Chart widget can be bound to remote data to produce high-performance report in your business app."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Chart offers two ways of data-binding:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration.</p>"
        },
        "requiresServer": "true"
      }
    ],
    "spriteCssClass": "chartRangeBarIcon",
    "name": "range-bar-charts",
    "category": "Charts"
  },
  {
    "text": "Range Area Charts",
    "api": "dataviz/chart",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/charts"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/chart"
    },
    "items": [
      {
        "text": "Basic usage",
        "url": "range-area-charts/index",
        "title": {
          "aspnet-core": "Demo for ASP.NET Core Range Area Chart"
        },
        "meta": {
          "aspnet-core": "This example illustrates the basic usage of ASP.NET Core Range Area Chart which enables the user to show customized range area charts."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"https://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"https://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, area, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>This demo shows how to create a Range Area chart, which displays data as area where the area is filled between its minimum (i.e., From property) and maximum (i.e., To property) levels.</p> <p>This chart type is useful for comparing the low and high levels of value ranges (e.g., employees' working time, blood glucose levels per day, average minimum and maximum temperatures and rainfalls over time, etc.).</p> <p>The chart can fetch data for its series from either local or remote data source. <p><strong><br /> Key Features of Telerik Core Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/charts\">Telerik Core Charts</a>.</p>"
        }
      },
      {
        "text": "Tag Helper",
        "url": "range-area-charts/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Chart Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK Chart component."
        }
      },
      {
        "text": "Binding to local data",
        "url": "range-area-charts/local-data-binding",
        "title": {
          "aspnet-core": "Local data-binding example | ASP.NET Core Range Area Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "RangeBarChartsLocalDataViewModel.cs",
              "url": "~/Models/Chart/RangeBarChartsLocalDataViewModel.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how the local data-binding is supported in ASP.NET Core Range Area Charts. Use the demo source code to try the feature of the widget."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Range Area chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series.</li> </ul> <p>You can learn from this demo how to bind the chart using the server approach. You need to create an action method and pass the data that should be populated in the cart. After that you should configure the data bound FromA, ToA, FromB and ToB fields for the Series. Note that the view has to be strongly typed so that the chart is able to load its data.</p>"
        }
      },
      {
        "text": "Binding to remote data",
        "url": "range-area-charts/remote-data-binding",
        "title": {
          "aspnet-core": "Binding to remote data demo | ASP.NET Core HTML5 jQuery Range Area Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "DownloadSpeed.cs",
              "url": "~/Models/Chart/DownloadSpeed.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how ASP.NET Core Range Area Chart widget can be bound to remote data to produce high-performance report in your business app."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Chart offers two ways of data-binding:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration.</p>"
        },
        "requiresServer": "true"
      }
    ],
    "spriteCssClass": "chartRangeAreaIcon",
    "name": "range-area-charts",
    "category": "Charts"
  },
  {
    "text": "Scatter Charts",
    "name": "scatter-charts",
    "api": "dataviz/chart",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/charts"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/chart"
    },
    "spriteCssClass": "chartScatterIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "scatter-charts/index",
        "title": {
          "aspnet-core": "$FRAMEWORK Scatter Charts Demo"
        },
        "meta": {
          "aspnet-core": "This example shows the most important features and functionality of $FRAMEWORK Scatter Charts."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"https://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"https://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>You can see in this sample demonstration of a Scatter chart, which shows data as points defined by their items' values. Scatter charts are useful for showing the relation between different sets of data, for example scientific (experimental) results.</p> <p>The chart can fetch data for its series from either local or remote data source. <p><strong><br /> Key Features of Telerik Core Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/charts\">Telerik Core Charts</a>.</p>"
        }
      },
      {
        "text": "Tag Helper",
        "url": "scatter-charts/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Chart Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK Chart component."
        }
      },
      {
        "text": "Scatter line chart",
        "url": "scatter-charts/scatter-line",
        "title": {
          "aspnet-core": "$FRAMEWORK Scatter Line Charts Demo"
        },
        "meta": {
          "aspnet-core": "This sample demonstrates how $FRAMEWORK Scatter Line Charts combines Line and Scatter chart types in your rich data visualizations."
        },
        "description": {
          "aspnet-core": "<p>This example demonstrates how to create a scatter line chart, which is useful for displaying numerical data.</p> <p>You can define the scatter line series through the Series -&gt; ScatterLine setting.</p>"
        },
        "group": "Scatter Chart Types"
      },
      {
        "text": "Smooth scatter line",
        "url": "scatter-charts/smooth-scatter-line",
        "title": {
          "aspnet-core": "Smooth line (spline) style for the $FRAMEWORK Scatter Line Chart"
        },
        "meta": {
          "aspnet-core": "This demo shows how to configure the $FRAMEWORK Scatter Line Chart to use smooth line (spline) style."
        },
        "description": {
          "aspnet-core": "<p>This example demonstrates how to create a smoother scatter line chart, in which the series items are connected with a fitted curve which represents a rough approximation of the missing data points.</p> <p>You can define the scatter line series through the Series -&gt; ScatterLine -&gt; Style(ChartScatterLineStyle.Smooth) setting.</p>"
        }
      },
      {
        "text": "Date axis",
        "url": "scatter-charts/date-axis",
        "title": {
          "aspnet-core": "Date Axis demo in $FRAMEWORK Scatter Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "StockDataPoint.cs",
              "url": "~/Models/Chart/StockDataPoint.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example illustrates all properties, specific to date value axis of $FRAMEWORK Scatter Charts."
        },
        "group": "Functionality",
        "description": {
          "aspnet-core": "<p>This example illustrates how to data bind date time spans with Scatter Charts using a server binding.</p>"
        },
        "requiresServer": "true"
      },
      {
        "text": "Multi-axis",
        "url": "scatter-charts/multiple-axes",
        "title": {
          "aspnet-core": "Multiple axes in $FRAMEWORK Scatter Charts | $FRAMEWORK Demos"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "EngineDataPoint.cs",
              "url": "~/Models/Chart/EngineDataPoint.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo illustrates how array of values for multi-axis $FRAMEWORK Scatter Charts are displayed on the plot area."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK Scatter chart supports multiple axis. This helps you leverage the best charting performance and visualize data on any number axis to provide solid business reports for your users.</p> <p>The example shows a Dyno run report and includes information for the: <em>torgue and power</em>. Note that each of them has unique name which is set through the <strong>XAxis and YAxis Title </strong>method.</p>"
        }
      },
      {
        "text": "Pan and zoom",
        "url": "scatter-charts/pan-and-zoom",
        "title": {
          "aspnet-core": "Pan and zoom in ASP.NET Core Scatter Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ChartScatterPoint.cs",
              "url": "~/Models/Chart/ChartScatterPoint.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "In this example we demonstrate how to enable pan and zoom effects in ASP.NET Core Scatter Charts."
        },
        "description": {
          "aspnet-core": "<p>The Pan and Zoom features allow you to navigate through and zoom in/out the Telerik Core Scatter Chart.</p><p>You can enable the pan feature through the Pannable setting and the Zoom set the Zoomable configuration option.</p>"
        }
      },
      {
        "text": "Binding to remote data",
        "url": "scatter-charts/remote-data-binding",
        "title": {
          "aspnet-core": "Remote data-bound scatter series | $FRAMEWORK Scatter Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "PricePerformance.cs",
              "url": "~/Models/Chart/PricePerformance.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how scatter series of $FRAMEWORK Scatter Charts can be bound to remote data source items."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Chart offers two ways of data-binding:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration.</p>"
        },
        "group": "Data Binding",
        "requiresServer": "true"
      },
      {
        "text": "Binding to local data",
        "url": "scatter-charts/local-data-binding",
        "title": {
          "aspnet-core": "Example of binding to local data in $FRAMEWORK Scatter Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "PricePerformance.cs",
              "url": "~/Models/Chart/PricePerformance.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how $FRAMEWORK Scatter Charts can use local objects as data points in the HTML5 visualization."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Area chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series</li> </ul> <p>In this example you can see how to bind the chart using the server approach. You need to create an action method and pass the PricePerformanceData list located in the \\Models\\Chart\\ChartDataRepository.cs file as a model. After that you should configure the data bound fields for the Series: series.Scatter(model => model.Price, model => model.Performance). Note that the view has to be strongly typed so that the chart is able to load its data.</p>"
        }
      },
      {
        "text": "Binding to grouped data",
        "url": "scatter-charts/grouped-data",
        "title": {
          "aspnet-core": "Example of $FRAMEWORK Scatter Charts bound to grouped data"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "StockDataPoint.cs",
              "url": "~/Models/Chart/StockDataPoint.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how define a group of values in $FRAMEWORK Scatter Charts by configuring the parameters in the DataSource component."
        },
        "description": {
          "aspnet-core": "<p>Telerik Core charting extension can be integrated to a grouped data by <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/data/datasource\">ASP.NET Core DataSource</a>. To do, so you can follow the steps below:</p> <ol> <li>Bind the chart to a <a href=\"https://docs.telerik.com/kendo-ui/framework/datasource/overview\">ASP.NET Core DataSource control</a>.</li> <li>Set the <a href=\"https://docs.telerik.com/kendo-ui/framework/datasource/basic-usage#working-with-grouped-data\">DataSource.group.field property</a> to the name (e.g., the \"Symbol\" field) of the column in the underlying data which will be the criteria for grouping the chart series items into series Group(group =&gt; group.Add(model =&gt; model.Symbol)</li> <li>Bind the Y values of the series to the corresponding data source field (e.g., the \"Date\" and \"Close\" fields): series.ScatterLine(model =&gt; model.Date, model =&gt; model.Close)</li> </ol> <p><br /> This will result in as many series as the number of distinct values in the DataSource.group.field column (e.g., &ldquo;Symbol&rdquo;). &nbsp;Since the &ldquo;Symbol&rdquo; field in this example contains three distinct values (&ldquo;1. GOOG (close)&rdquo;, &ldquo;2. AAPL (close)&rdquo; and &ldquo;3. AMZN (close)&rdquo;) the chart will create three series as well.</p>"
        },
        "requiresServer": "true"
      }
    ],
    "category": "Charts"
  },
  {
    "text": "Sparklines",
    "name": "sparklines",
    "api": "dataviz/sparkline",
    "forum": {
      "aspnet-core": "aspnet-core-ui/sparkline"
    },
    "spriteCssClass": "sparklineIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "sparklines/index",
        "title": {
          "aspnet-core": "$FRAMEWORK Sparklines Usage | UI for $FRAMEWORK demos"
        },
        "meta": {
          "aspnet-core": "This example demonstrates the common usage of Telerik $FRAMEWORK Sparklines."
        },
        "description": {
          "aspnet-core": "<p>A Sparkline is a very small chart, drawn without axes, coordinates, legend, title and other chart-specific elements. It behaves like an inline element (rendered inside a span) as opposed to the standard charts, which behave like block elements (rendered inside divs) so that it can be easily embedded in text.</p> <p>You can specify the sparkline type through the Type property: .Type(SparklineType.[Area|Bar|Bullet|Column|Line|Pie])</p>"
        }
      },
      {
        "text": "Binding to remote data",
        "url": "sparklines/remote-data-binding",
        "title": {
          "aspnet-core": "Binding to remote data in $FRAMEWORK Sparkline Chart"
        },
        "meta": {
          "aspnet-core": "This $FRAMEWORK Demo shows how to bind to remote data in $FRAMEWORK Sparklines charting control."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Chart offers two ways of data-binding:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration.</p>"
        }
      },
      {
        "text": "Binding to local data",
        "url": "sparklines/local-data-binding",
        "title": {
          "aspnet-core": "Local data binding in $FRAMEWORK Sparkline Chart"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CompensationStats.cs",
              "url": "~/Models/CompensationStats.cs"
            },
            {
              "name": "ChartDataRepository.cs",
              "url": "~/Models/Chart/ChartDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "Learn how to bind local data to $FRAMEWORK Sparkline charting component. Try it now!"
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Area chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series</li> </ul> <p>In this example you can see how to bind the chart using the server approach. You need to create an action method and pass the CompensationData list located in the \\Models\\Chart\\ChartDataRepository.cs file as a model. After that you should configure the data bound fields for the Series, i.e. .ValueAxis(axis => axis.Numeric().Max(50)). Note that the view has to be strongly typed so that the chart is able to load its data.</p>"
        }
      }
    ],
    "category": "Charts"
  },
  {
    "text": "Stock Charts",
    "name": "financial",
    "api": "dataviz/stockchart",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/charts"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/chart"
    },
    "spriteCssClass": "chartStockIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "financial/index",
        "title": {
          "aspnet-core": "Example of $FRAMEWORK charts for stock analysis apps"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "StockDataPoint.cs",
              "url": "~/Models/Chart/StockDataPoint.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "See how you can implement $FRAMEWORK stock chart in your financial app."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"https://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"https://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC) and many more.</p> <p>The Stock Chart type, demonstrated in this example, can visualize the price movements of any financial instrument over the time. The chart describes the high, low, opening and closing prices for a single day by combining the Bar and Line charts. The High price is represented by the top of the upper thin line, while the Low price by the bottom of the lower line. The Open and Close prices are represented by the wide part (the body) of the item. If the close price is higher than the open price, the body is hollowed (usually colored white or green), otherwise it is filled (usually colored black or red). <br /> <br /> The financial chart also offers zooming and scrolling functionality, which is exposed by the Navigator pane, located below the main chart.</p> <p>The chart can fetch data for its series from either local or remote data source. <p><strong><br /> Key Features of Telerik Core Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/charts\">Telerik Core Charts</a>.</p>"
        },
        "requiresServer": "true"
      },
      {
        "text": "Multiple panes",
        "url": "financial/panes",
        "title": {
          "aspnet-core": "Multiple panes in $FRAMEWORK stock chart"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "StockDataPoint.cs",
              "url": "~/Models/Chart/StockDataPoint.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo illustrates the use of multiple graph panes in $FRAMEWORK Stock chart."
        },
        "description": {
          "aspnet-core": "<p>This demo illustrates the use of multiple graph panes in $FRAMEWORK Stock chart. You can define a pane through the Panes collection and set it&rsquo;s a title and height:</p> <p>panes.Add(\"volumePane\").Title(\"Volume\").Height(150);</p> <p>If you want to render a specific axis inside the newly create pane with name volumePane use the ValueAxis -&gt; Pane setting: ValueAxis(axis =&gt; axis.Numeric(\"volumeAxis\").Pane(\"volumePane\").Visible(false))</p>"
        },
        "requiresServer": "true"
      },
      {
        "text": "Virtualization",
        "url": "financial/virtualization",
        "title": {
          "aspnet-core": "Virtualization in $FRAMEWORK Stock Chart"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "StockDataPoint.cs",
              "url": "~/Models/Chart/StockDataPoint.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "In this example we show you how the virtualization works in $FRAMEWORK  Stock Chart for rich data visualization."
        },
        "description": {
          "aspnet-core": "<p>In this example you can see how the virtualization works in $FRAMEWORK Stock Chart for rich data visualization. To enable it you have to set the true parameter of the DataSource -&gt; ServerOperation(true) method.</p>"
        }
      },
      {
        "text": "PDF Export",
        "url": "financial/pdf-export",
        "title": {
          "aspnet-core": "ASP.NET Core StockChart saveAsPDF API method"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "StockDataPoint.cs",
              "url": "~/Models/Chart/StockDataPoint.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how to save the Stock Chart as PDF directly in the browser."
        },
        "description": {
          "aspnet-core": "<p>This example shows how to configure the PDF export settings of the Telerik Core Charting helper. </p> <p>You can specify the Author, Creator, Date, FileName, AllPages, PaperSize, ProxyURL and other options, through the <strong>PDF</strong> property of the Chart helper.</p> The <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart#methods-saveAsPDF\">saveAsPDF</a> or <a href=\"https://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart#methods-exportPDF\">exportPDF</a> methods can be used to trigger export operation.</p>"
        }
      },
      {
        "text": "Stock History",
        "url": "financial/stock-history",
        "title": {
          "aspnet-core": "$FRAMEWORK Chart controls application sample | Stock History"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "StockDataPoint.cs",
              "url": "~/Models/Chart/StockDataPoint.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "The Stock History Dashboard demonstrates how the charting components in ASP.NET Core $FRAMEWORK DataViz HTML5 framework are used to build a complex finance application."
        },
        "description": {
          "aspnet-core": "<p>The Stock History Dashboard demonstrates how the charting components in ASP.NET Core $FRAMEWORK DataViz HTML5 framework are used to build a complex finance application.</p>"
        }
      }
    ],
    "category": "Charts"
  },
  {
    "text": "TreeMap",
    "spriteCssClass": "treemapIcon",
    "api": "dataviz/treemap",
    "forum": {
      "aspnet-core": "aspnet-core-ui/treemap"
    },
    "items": [
      {
        "text": "Basic usage",
        "url": "treemap/index",
        "title": {
          "aspnet-core": "ASP.NET Core TreeMap Demo"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "PopulationUSA.cs",
              "url": "~/Models/TreeMap/PopulationUSA.cs"
            },
            {
              "name": "TreeMapDataRepository.cs",
              "url": "~/Models/TreeMap/TreeMapDataRepository.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": ""
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core TreeMap component suits perfectly for visualization of hierarchical data in a traditional tree structure. The extension provides three options (Squarified, Horizontal and Vertical) for displaying the data, which could be managed by the Type treemap setting.</p> <p>The main advantages of the control are that you could:</p> <ul> <li>Visualize huge data in a meaningful and colorized way (i.e. files system structure divided by size; the popularity of different tech devices on the market, and other)</li> <li>Optimize space on your web page by its compact structure</li> </ul>"
        }
      },
      {
        "text": "Tag Helper",
        "url": "treemap/tag-helper",
        "new": true,
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK TreeMap Tag Helper sample"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "TagHelperController.cs",
              "url": "~/Controllers/TreeMap/TagHelperController.cs"
            },
            {
              "name": "PopulationUSA.cs",
              "url": "~/Models/TreeMap/PopulationUSA.cs"
            },
            {
              "name": "TreeMapDataRepository.cs",
              "url": "~/Models/TreeMap/TreeMapDataRepository.cs"
            }
          ]
        }
      },
      {
        "text": "Events",
        "url": "treemap/events",
        "title": {
          "aspnet-core": "Events in ASP.NET Core TreeMap"
        },
        "meta": {
          "aspnet-core": ""
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "PopulationUSA.cs",
              "url": "~/Models/TreeMap/PopulationUSA.cs"
            },
            {
              "name": "TreeMapDataRepository.cs",
              "url": "~/Models/TreeMap/TreeMapDataRepository.cs"
            }
          ]
        },
        "description": {
          "aspnet-core": "<p>The sample demonstrates the usage of the ItemCreated and DataBound events of the Core Treemap helper. The ItemCreated event is fired when a tile has been created, while the DataBound one is triggered when the widget is bound to data from its DataSource.</p>"
        }
      }
    ],
    "name": "treemap",
    "category": "Charts"
  },
  {
    "text": "Waterfall Charts",
    "name": "waterfall-charts",
    "api": "dataviz/chart",
    "documentation": {
      "aspnet-core": "helpers/html-helpers/charts"
    },
    "forum": {
      "aspnet-core": "aspnet-core-ui/chart"
    },
    "items": [
      {
        "text": "Basic usage",
        "url": "waterfall-charts/index",
        "title": {
          "aspnet-core": "Demo for ASP.NET Core Waterfall Chart"
        },
        "meta": {
          "aspnet-core": "This example illustrates the basic usage of ASP.NET Core Waterfall Chart."
        },
        "description": {
          "aspnet-core": "<p>The Telerik $FRAMEWORK chart is a powerful data visualization component, which allows you to graphically represent your data. It is useful when you would like to utilize modern browser technologies such as <a href=\"https://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> or <a href=\"https://en.wikipedia.org/wiki/Canvas_element\">Canvas</a> (with a fallback to <a href=\"https://en.wikipedia.org/wiki/Vector_Markup_Language\">VML</a> for older IE versions) for interactive data visualizations. </p> <p>The component offers a variety of chart types such as area, bar, line, scatter, polar, radar, pie and donut, stock (OHLC), waterfall and other.</p> <p>A Waterfall chart type shows the cumulative effect of positive or negative values on the starting point. Its purpose is to provide a better understanding of how an initial amount is influenced by subsequently added positive or negative values. A Waterfall chart is useful for different types of quantitative analysis related to inventory, cash flows, performance, etc.</p> <p>The chart can fetch data for its series from either local or remote data source. <p><strong><br /> Key Features of Telerik Core Charts</strong></p> <ul> <li>Various Chart Types</li> <li>A Number of Data Types</li> <li>High Performance</li> <li>Export to PDF</li> <li>Simple-to-Customize Look and Feel</li> <li>Rich Server and Client-side API</li> <li>Server and Client-side Data Binding</li> <li>Built-in Themes</li> <li>Intuitive Built-in Animations</li> <li>Multiple Series and Combination Charts</li> <li>Plot Bands</li> <li>Rich Cross-Browser and Mobile Support</li> </ul> <p>More about <a href=\"https://www.telerik.com/aspnet-core-ui/charts\">Telerik Core Charts</a>.</p>"
        }
      },
      {
        "text": "Tag Helper",
        "url": "waterfall-charts/tag-helper",
        "packages": [ "aspnet-core" ],
        "title": {
          "aspnet-core": "$FRAMEWORK Chart Tag Helper sample"
        },
        "description": {
          "aspnet-core": "This example shows how you can use the tag-helper for $FRAMEWORK Chart component."
        }
      },
      {
        "text": "Horizontal Waterfall",
        "url": "waterfall-charts/horizontal",
        "title": {
          "aspnet-core": "Demo for horizontal ASP.NET Core Waterfall Chart"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "RequestDetail.cs",
              "url": "~/Models/Chart/RequestDetail.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This example illustrates how to set the ASP.NET Core Waterfall Chart orientation."
        },
        "description": {
          "aspnet-core": "<p>A Horizontal Waterfall chart type shows the cumulative effect of positive or negative values on the starting point. You can use it to provide a better understanding of how an initial amount is influenced by subsequently added positive or negative values. A Horizontal Waterfall chart is useful for different types of quantitative analysis related to inventory, cash flows, performance, etc. This chart type looks like a Range Bar chart where the low or high value of a subsequent item is connected to the preceding one with a thin line.</p>"
        }
      },
      {
        "text": "Binding to local data",
        "url": "waterfall-charts/local-data-binding",
        "title": {
          "aspnet-core": "Local data-binding example | ASP.NET Core Waterfall Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CashFlowData.cs",
              "url": "~/Models/Chart/CashFlowData.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how the local data-binding is supported in ASP.NET Core Waterfall Charts. Use the demo source code to try the feature of the widget."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core waterfall chart can be instructed to display data from local data storage using its built-in data-binding capabilities. </p> <p>There are two ways to bind the chart:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series</li> </ul> <p>In this example you can see how to bind the chart using the strongly typed server approach. You need to create an action method and supply the CashFlowData model array. After that you should configure the data bound fields for the Series: .Series(series => series.Waterfall(model => model.Amount, model => model.Period, model => model.Summary)) </p>"
        }
      },
      {
        "text": "Binding to remote data",
        "url": "waterfall-charts/remote-data-binding",
        "title": {
          "aspnet-core": "Binding to remote data demo | ASP.NET Core HTML5 jQuery Waterfall Charts"
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "PriceData.cs",
              "url": "~/Models/Chart/PriceData.cs"
            }
          ]
        },
        "meta": {
          "aspnet-core": "This demo shows how ASP.NET Core Waterfall Chart widget can be bound to remote data to produce high-performance report in your business app."
        },
        "description": {
          "aspnet-core": "<p>The Telerik Core Chart offers two ways of data-binding:</p> <ul> <li>Server - the chart will bind to a supplied model</li> <li>Ajax - the chart will perform Ajax requests to populate its series</li> </ul> <p>For remote data binding you need to specify a remote endpoint or web service returning data in JSON/JSONP format and utilize the DataSource as a mediator between the chart and the underlying data. To make the connection to the remote endpoint and process the data properly, the data source needs information about the web service URL(s), the request type, the response data type, and the structure (schema) of the response, in case it is more complex than a plain array of objects.</p> <p>In this example the chart fetches its data from a MVC controller assigned via the DataSource read configuration.</p>"
        },
        "requiresServer": "true"
      }
    ],
    "spriteCssClass": "chartWaterfallIcon",
    "category": "Charts"
  },
  {
    "text": "SpreadProcessing",
    "name": "spreadprocessing",
    "packages": [ "aspnet-mvc", "aspnet-core" ],
    "api": "https://docs.telerik.com/devtools/document-processing/libraries/radspreadprocessing/overview",
    "category": "Document Processing",
    "spriteCssClass": "spreadprocessingIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "spreadprocessing/index",
        "title": {
          "aspnet-core": "Demo and source code for Telerik RadSpreadProcessing in Core"
        },
        "meta": {
          "aspnet-core": "See how the Telerik RadSpreadProcessing can be integrated in Core applications."
        },
        "description": {
          "aspnet-core": "With <strong>RadSpreadProcessing</strong> you can effortlessly convert documents from one to another file format among XLSX, CSV and TXT. Further, you can export any of these to PDF."
        }
      },
      {
        "text": "Generate documents",
        "url": "spreadprocessing/generate-documents",
        "title": {
          "aspnet-core": "Generate documets with Telerik RadSpreadProcessing in ASP.NET Core"
        },
        "meta": {
          "aspnet-core": "See how the you can generate documetns with Telerik RadSpreadProcessing in ASP.NET Core applications."
        },
        "description": {
          "aspnet-core": "<strong>RadSpreadProcessing</strong> allows you to create a document from scratch using only code. This is particulary convenient when you need to export large amount of data to one of the supported formats - Xlsx, Csv, Txt."
        }
      },
      {
        "text": "Grid integration",
        "url": "spreadprocessing/grid-integration",
        "title": {
          "aspnet-core": "Kendo ASP.NET Core Grid and Telerik RadSpreadProcessing integration in ASP.NET Core"
        },
        "meta": {
          "aspnet-core": "See how the Telerik RadSpreadProcessing and Kendo ASP.NET Core Grid wrapper can be integrated in ASP.NET Core applications."
        },
        "description": {
          "aspnet-core": "This example illustrates integration between Telerik SpreadProcessing and the Kendo ASP.NET Core Grid component. You can visualize data in Grid and easily export it to Xlsx, Csv or Txt format."
        }
      }
    ],
    "documentation": {
      "aspnet-core": "https://docs.telerik.com/devtools/document-processing/libraries/radspreadstreamprocessing/overview"
    }
  },
  {
    "text": "SpreadStreamProcessing",
    "name": "spreadstreamprocessing",
    "packages": [ "aspnet-mvc", "aspnet-core" ],
    "api": "https://docs.telerik.com/devtools/document-processing/libraries/radspreadstreamprocessing/overview",
    "category": "Document Processing",
    "spriteCssClass": "spreadstreamprocessingIcon",
    "items": [
      {
        "text": "Large Document Export",
        "url": "spreadstreamprocessing/index",
        "title": {
          "aspnet-core": "Demo and source code for Telerik RadSpreadStreamProcessing in $FRAMEWORK"
        },
        "meta": {
          "aspnet-core": "See how the Telerik RadSpreadStreamProcessing can be integrated in $FRAMEWORK applications."
        },
        "description": {
          "aspnet-core": "With <strong>SpreadStreamProcessing</strong> you can effortlessly generate large XLSX and CSV files."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "DocumentExportHelper.cs",
              "url": "~/Models/SpreadStreamProcessing/DocumentExportHelper.cs"
            },
            {
              "name": "DocumentHelper.cs",
              "url": "~/Models/SpreadStreamProcessing/DocumentHelper.cs"
            },
            {
              "name": "DocumentRow.cs",
              "url": "~/Models/SpreadStreamProcessing/DocumentRow.cs"
            },
            {
              "name": "DocumentSettings.cs",
              "url": "~/Models/SpreadStreamProcessing/DocumentSettings.cs"
            },
            {
              "name": "Shipping.cs",
              "url": "~/Models/SpreadStreamProcessing/Shipping.cs"
            },
            {
              "name": "Client.cs",
              "url": "~/Models/SpreadStreamProcessing/Client.cs"
            }
          ]
        }
      }
    ],
    "documentation": {
      "aspnet-core": "https://docs.telerik.com/devtools/document-processing/libraries/radspreadstreamprocessing/overview"
    }
  },
  {
    "text": "WordsProcessing",
    "name": "wordsprocessing",
    "api": "https://docs.telerik.com/devtools/wpf/controls/radwordsprocessing/overview",
    "category": "Document Processing",
    "spriteCssClass": "wordprocessingIcon",
    "packages": [ "aspnet-core", "aspnet-mvc" ],
    "items": [
      {
        "text": "Basic usage",
        "url": "wordsprocessing/index",
        "title": {
          "aspnet-core": "Demo and source code for Telerik RadWordsProcessing in ASP.NET Core"
        },
        "meta": {
          "aspnet-core": "See how the Telerik RadWordsProcessing can be integrated in MVC applications."
        },
        "description": {
          "aspnet-core": "With <strong>WordsProcessing</strong> you can virtually effortlessly convert documents from one to another file format among the supported DOCX, RTF, HTML and TXT."
        },
        "packages": [ "aspnet-core", "aspnet-mvc" ]
      },
      {
        "text": "PDF Export",
        "url": "wordsprocessing/pdf-export",
        "title": {
          "aspnet-core": "Demo and source code for Telerik WordsProcessing in ASP.NET Core"
        },
        "meta": {
          "aspnet-core": "See how the Telerik RadWordsProcessing can be integrated in ASP.NET Core applications."
        },
        "description": {
          "aspnet-core": "This example demonstrates export of documents to PDF using WordsProcessing. You can upload Word(docx), RTF, HTML or plain text document and convert it to PDF."
        },
        "packages": [ "aspnet-core", "aspnet-mvc" ]
      }
    ],
    "documentation": {
      "aspnet-core": "https://docs.telerik.com/devtools/wpf/controls/radwordsprocessing/overview"
    }
  },
  {
    "text": "Zip Library",
    "name": "ziplibrary",
    "packages": [ "aspnet-core", "aspnet-mvc" ],
    "api": "https://docs.telerik.com/devtools/wpf/controls/radziplibrary/overview",
    "category": "Document Processing",
    "spriteCssClass": "ziplibraryIcon",
    "documentation": {
      "aspnet-core": "https://docs.telerik.com/devtools/wpf/controls/radziplibrary/overview"
    },
    "items": [
      {
        "text": "Basic usage",
        "url": "ziplibrary/index",
        "title": {
          "aspnet-core": "Demo and source code for Telerik ZipLibrary in $FRAMEWORK"
        },
        "meta": {
          "aspnet-core": "See how the Telerik ZipLibrary can be integrated in $FRAMEWORK applications."
        },
        "description": {
          "aspnet-core": "The example demonstrates how to read all the data from a ZIP file simultaneously and display the information about the compressed files in UI for $FRAMEWORK Grid - name, original and compressed size."
        }
      },
      {
        "text": "Compress Stream",
        "url": "ziplibrary/compress-stream",
        "title": {
          "aspnet-core": "Demo and source code for Telerik ZipLibrary in $FRAMEWORK"
        },
        "meta": {
          "aspnet-core": "See how to generate documents using the Telerik ZipLibrary in $FRAMEWORK applications."
        },
        "description": {
          "aspnet-core": "The example demonstrates how to easily compress streams with the preferred compression level."
        }
      }
    ]
  },
  {
    "text": "PdfProcessing",
    "name": "pdfprocessing",
    "packages": [ "aspnet-core", "aspnet-mvc" ],
    "api": "https://docs.telerik.com/devtools/wpf/controls/radpdfprocessing/overview",
    "category": "Document Processing",
    "spriteCssClass": "pdfIcon",
    "items": [
      {
        "text": "Basic usage",
        "url": "pdfprocessing/index",
        "title": {
          "aspnet-core": "Demo and source code for Telerik RadPdfProcessing in $FRAMEWORK"
        },
        "meta": {
          "aspnet-core": "See how the Telerik RadPdfProcessing can be integrated in $FRAMEWORK applications."
        },
        "description": {
          "aspnet-core": "Telerik <strong>RadPdfProcessing</strong> provides easy to use API which allows code-only generation of PDF documents. This example demonstrates how to create a document containing images, text and shapes and export it to PDF."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CreatePdfDocument.cs",
              "url": "~/Helpers/CreatePdfDocument.cs"
            }
          ]
        }
      },
      {
        "text": "Bar Chart Export",
        "url": "pdfprocessing/bar-chart-export",
        "title": {
          "aspnet-core": "Demo and source code for Telerik RadPdfProcessing in $FRAMEWORK"
        },
        "meta": {
          "aspnet-core": "See how the Telerik RadPdfProcessing can be integrated in $FRAMEWORK applications."
        },
        "description": {
          "aspnet-core": "Telerik <strong>RadPdfProcessing</strong> provides easy to use API which allows code-only generation of PDF documents. This example demonstrates how to create a document containing Bar Chart, Data Table and export it to PDF."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "CreatePdfWithBarChart.cs",
              "url": "~/Helpers/CreatePdfWithBarChart.cs"
            }
          ]
        }
      },
      {
        "text": "Read And Write Form Fields",
        "url": "pdfprocessing/read-write-form-fields",
        "title": {
          "aspnet-core": "Demo and source code for Telerik RadPdfProcessing in $FRAMEWORK"
        },
        "meta": {
          "aspnet-core": "See how the Telerik RadPdfProcessing can be integrated in $FRAMEWORK applications."
        },
        "description": {
          "aspnet-core": "Telerik <strong>RadPdfProcessing</strong> provides easy to use API which allows code-only generation of PDF documents. This example demonstrates how to use a PDF from the server, modify its fields based on user input and export it to PDF on the client."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "ReadWriteFormFields.cs",
              "url": "~/Controllers/PdfProcessing/ReadWriteFormFields.cs"
            }
          ]
        }
      },
      {
        "text": "Merge, Split or Add Content",
        "url": "pdfprocessing/merge-split-add-content",
        "title": {
          "aspnet-core": "Demo and source code for Telerik RadPdfProcessing in $FRAMEWORK"
        },
        "meta": {
          "aspnet-core": "See how the Telerik RadPdfProcessing can be integrated in MVC applications."
        },
        "description": {
          "aspnet-core": "Telerik <strong>RadPdfProcessing</strong> provides easy to use API which allows code-only generation of PDF documents. This example demonstrates how to merge, split or add content to PDF document."
        },
        "sources": {
          "aspnet-core": [
            {
              "name": "MergeSplitAddContent.cs",
              "url": "~/Controllers/PdfProcessing/MergeSplitAddContent.cs"
            }
          ]
        }
      }
    ],
    "documentation": {
      "aspnet-core": "https://docs.telerik.com/devtools/wpf/controls/radpdfprocessing/overview"
    }
  }
]
