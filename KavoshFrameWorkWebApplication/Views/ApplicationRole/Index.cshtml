@model IEnumerable<ApplicationRoleViewModel>
@{
    var entity = Url.ActionContext.RouteData.Values["controller"].ToString();
    var title = Entities.ResourceManager.GetString(entity);
    ViewData["Title"] = title;
}

    <style>
        .k-grid-edit {
            display: none !important;
        }
    </style>

@section breadcrumbs{
        @await Component.InvokeAsync("BreadCrumb", new
    {
        args = new AdminBreadCrumbArgsViewModel
        {
            EntityTitle = title,
            Controller = entity,
            PageType = AdminPageType.List
        }
    })
    }

<div class="k-rtl">

    @(Html.Kendo().Grid(Model)
    .Name("Grid")
    .Columns(columns =>
    {
        //columns.Bound(m => m.Id)
        //            .ClientTemplate("#= renderNumber() #")
        //            .Title("ردیف").Sortable(false).Width(100);
        columns.Bound(p => p.Title).Title("نقش ها");
        columns.Command(command => { command.Edit().Text(" ").UpdateText("افزودن").CancelText("انصراف"); command.Destroy().Text(" ").IconClass("k-icon k-i-delete"); }).Title("عملیات").IncludeInMenu(false);

    })
    .Editable(editable => editable.Mode(GridEditMode.InLine))
     .ToolBar(toolbar =>
     {
         toolbar.Search();
         toolbar.Create().Text("افزودن");
         toolbar.Excel().Text("خروجی اکسل");
       // toolbar.Pdf().Text("خروجی پی دی اف");

     })
    .Pdf(pdf => pdf
           .AllPages()
           .Landscape()
           .PaperSize("A4")
           .Scale(0.75)
        ).Excel(excel => excel
        .FileName("Application.xlsx")

        .AllPages()
        )
    .Pageable()
    .Sortable()
    .Filterable()
    .Navigatable()
        .Reorderable(reorderable => reorderable.Columns(true))
        .ColumnMenu()
        .Scrollable(s=>s.Virtual(GridVirtualizationMode.Columns).Height("auto"))
        .DataSource(dataSource => dataSource
        .WebApi()
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(p => p.Id);
            model.Field(s => s.Id).Editable(false);
        })
        .Events(events => events.Error("error_handler"))
        .Destroy(destroy => destroy.Action("DELETE", "ApplicationRole", new { id = "{0}" }))
       .Read(read => read.Action("Get", "Product"))
            .Create(create => create.Action("Create", "ApplicationRole"))
        //.Update(update => update.Action("Edit", "ApplicationRole", new { id = "{0}"} ))
        )
        //.Events(e => e.DataBound("onRowBound"))
        )
</div>

<script>

    function error_handler(e) {
        var errors = $.parseJSON(e.xhr.responseText);

        if (errors) {
            alert("Errors:\n" + errors.join("\n"));
        }
    }

  
</script>


